{"version":3,"mappings":"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","names":["queue","AsyncScheduler","AsyncAction","constructor","scheduler","work","super","this","schedule","state","delay","flush","execute","closed","_execute","requestAsyncId","id","Subject","bufferSize","Number","POSITIVE_INFINITY","windowTime","_events","_infiniteTimeWindow","_bufferSize","_windowTime","n","next","nextInfiniteTimeWindow","nextTimeWindow","value","isStopped","push","length","shift","ReplayEvent","_getNow","_trimBufferThenGetEvents","_subscribe","subscriber","len","subscription","ObjectUnsubscribedError","hasError","Subscription","observers","SubjectSubscription","add","ObserveOnSubscriber","i","error","thrownError","complete","now","eventsCount","spliceCount","time","Math","max","splice","i0","routes","path","component","fb","recordService","timer","pipe","map","Date","configOrBufferSize","config","refCount","source","lift","useRefCount","subject","isComplete","innerSub","ReplaySubject","subscribe","err","undefined","unsubscribe","shareReplayOperator","shareReplay","group","remark","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday","Array","from","_","ngOnInit","reloadRangeRecord","getRange","startTime","endTime","form","reset","onSubmit","get","create","alert","DashboardComponent","selectors","ctx","DashboardRoutingModule","RouterModule","DashboardModule","CommonModule","ReactiveFormsModule"],"sources":["./node_modules/rxjs/_esm2015/internal/scheduler/queue.js","./node_modules/rxjs/_esm2015/internal/scheduler/QueueScheduler.js","./node_modules/rxjs/_esm2015/internal/scheduler/QueueAction.js","./node_modules/rxjs/_esm2015/internal/ReplaySubject.js","./src/app/pages/dashboard/dashboard.component.html","./src/app/pages/dashboard/dashboard-routing.module.ts","./src/app/pages/dashboard/dashboard.component.ts","./node_modules/rxjs/_esm2015/internal/operators/shareReplay.js","./src/app/pages/dashboard/dashboard.module.ts"],"sourcesContent":["import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\nexport const queueScheduler = new QueueScheduler(QueueAction);\nexport const queue = queueScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { AsyncAction } from './AsyncAction';\nexport class QueueAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    schedule(state, delay = 0) {\n        if (delay > 0) {\n            return super.schedule(state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    }\n    execute(state, delay) {\n        return (delay > 0 || this.closed) ?\n            super.execute(state, delay) :\n            this._execute(state, delay);\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        return scheduler.flush(this);\n    }\n}\n","import { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nexport class ReplaySubject extends Subject {\n    constructor(bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, scheduler) {\n        super();\n        this.scheduler = scheduler;\n        this._events = [];\n        this._infiniteTimeWindow = false;\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n        if (windowTime === Number.POSITIVE_INFINITY) {\n            this._infiniteTimeWindow = true;\n            this.next = this.nextInfiniteTimeWindow;\n        }\n        else {\n            this.next = this.nextTimeWindow;\n        }\n    }\n    nextInfiniteTimeWindow(value) {\n        if (!this.isStopped) {\n            const _events = this._events;\n            _events.push(value);\n            if (_events.length > this._bufferSize) {\n                _events.shift();\n            }\n        }\n        super.next(value);\n    }\n    nextTimeWindow(value) {\n        if (!this.isStopped) {\n            this._events.push(new ReplayEvent(this._getNow(), value));\n            this._trimBufferThenGetEvents();\n        }\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        const _infiniteTimeWindow = this._infiniteTimeWindow;\n        const _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n        const scheduler = this.scheduler;\n        const len = _events.length;\n        let subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.isStopped || this.hasError) {\n            subscription = Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n        }\n        if (_infiniteTimeWindow) {\n            for (let i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i]);\n            }\n        }\n        else {\n            for (let i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i].value);\n            }\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    }\n    _getNow() {\n        return (this.scheduler || queue).now();\n    }\n    _trimBufferThenGetEvents() {\n        const now = this._getNow();\n        const _bufferSize = this._bufferSize;\n        const _windowTime = this._windowTime;\n        const _events = this._events;\n        const eventsCount = _events.length;\n        let spliceCount = 0;\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    }\n}\nclass ReplayEvent {\n    constructor(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n}\n","<form [formGroup]=\"form\" class=\"d-flex flex-column text-center\">\r\n  <p class=\"fa-2x mb-0 text-white\" *ngIf=\"currentTime$ | async as currentTIme\">\r\n    {{ currentTIme | date: 'yyyy-MM-dd' }}\r\n    {{ weekDay[currentTIme | date: 'EEEE'] }}\r\n  </p>\r\n\r\n  <p class=\"fa-5x font-weight-bold text-white\">\r\n    {{ currentTime$ | async | date: 'HH:mm:ss' }}\r\n  </p>\r\n\r\n  <ul class=\"list-group\">\r\n    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\r\n      <div class=\"align-items-center d-flex w-50\">\r\n        <i class=\"fa fa-clock-o fa-2x mr-3\"></i>\r\n        <div class=\"text-left\">\r\n          First time <br />\r\n          <span class=\"font-weight-bold\">首次打卡</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"w-50 h4 m-0\" [class.font-weight-bold]=\"startTime\" [class.text-black-50]=\"!startTime\">\r\n        {{ startTime ? (startTime | date: 'HH:mm') : '尚未打卡' }}\r\n      </div>\r\n    </li>\r\n    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\r\n      <div class=\"align-items-center d-flex w-50\">\r\n        <i class=\"fa fa-clock-o fa-2x mr-3\"></i>\r\n        <div class=\"text-left\">\r\n          Last time <br />\r\n          <span class=\"font-weight-bold\">最後打卡</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"w-50 h4 m-0\" [class.font-weight-bold]=\"endTime\" [class.text-black-50]=\"!endTime\">\r\n        {{ endTime ? (endTime | date: 'HH:mm') : '尚未打卡' }}\r\n      </div>\r\n    </li>\r\n  </ul>\r\n\r\n  <div class=\"form-group mt-3 text-left\">\r\n    <label for=\"remark\" class=\"h5 text-white\">備註：</label\r\n    ><input id=\"remark\" type=\"text\" class=\"form-control\" formControlName=\"remark\" />\r\n  </div>\r\n\r\n  <div class=\"d-flex\">\r\n    <button class=\"btn btn-secondary fa-2x rounded w-50\" type=\"button\" (click)=\"onSubmit()\">\r\n      上班打卡\r\n      <span *ngIf=\"startTime\">（編輯）</span>\r\n    </button>\r\n    <i class=\"flex-fill p-1\"></i>\r\n    <button class=\"btn btn-secondary fa-2x rounded w-50\" type=\"button\" (click)=\"onSubmit()\">\r\n      下班打卡\r\n      <span *ngIf=\"endTime\">（編輯）</span>\r\n    </button>\r\n  </div>\r\n</form>\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DashboardComponent } from './dashboard.component';\n\nconst routes: Routes = [\n  {\n    path: '', component: DashboardComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DashboardRoutingModule { }\n","import { Component, HostBinding, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { RecordService } from '@attendance-system/data/services';\r\nimport { timer } from 'rxjs';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n  @HostBinding('className') className = 'd-flex justify-content-center pt-2';\r\n\r\n  currentTime$ = timer(0, 1000).pipe(\r\n    map(() => new Date()),\r\n    shareReplay(1)\r\n  );\r\n\r\n  form = this.fb.group({ remark: [null] });\r\n\r\n  startTime = null;\r\n  endTime = null;\r\n\r\n  readonly weekDay = {\r\n    Monday: '星期一',\r\n    Tuesday: '星期二',\r\n    Wednesday: '星期三',\r\n    Thursday: '星期四',\r\n    Friday: '星期五',\r\n    Saturday: '星期六',\r\n    Sunday: '星期日'\r\n  };\r\n\r\n  hours = Array.from({ length: 24 }, (_, i) => i);\r\n  minutes = Array.from({ length: 60 }, (_, i) => i);\r\n\r\n  constructor(private fb: FormBuilder, private recordService: RecordService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.reloadRangeRecord();\r\n  }\r\n\r\n  reloadRangeRecord(): void {\r\n    this.recordService.getRange().subscribe(({ startTime, endTime, remark }) => {\r\n      this.startTime = startTime;\r\n      this.endTime = endTime;\r\n      this.form.reset({ remark });\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const remark = this.form.get('remark').value;\r\n    this.recordService.create(remark).subscribe(() => {\r\n      this.reloadRangeRecord();\r\n      alert('Success!!');\r\n    });\r\n  }\r\n}\r\n","import { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let config;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        config = configOrBufferSize;\n    }\n    else {\n        config = {\n            bufferSize: configOrBufferSize,\n            windowTime,\n            refCount: false,\n            scheduler\n        };\n    }\n    return (source) => source.lift(shareReplayOperator(config));\n}\nfunction shareReplayOperator({ bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, refCount: useRefCount, scheduler }) {\n    let subject;\n    let refCount = 0;\n    let subscription;\n    let hasError = false;\n    let isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        let innerSub;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n            innerSub = subject.subscribe(this);\n            subscription = source.subscribe({\n                next(value) { subject.next(value); },\n                error(err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete() {\n                    isComplete = true;\n                    subscription = undefined;\n                    subject.complete();\n                },\n            });\n        }\n        else {\n            innerSub = subject.subscribe(this);\n        }\n        this.add(() => {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && !isComplete && useRefCount && refCount === 0) {\n                subscription.unsubscribe();\n                subscription = undefined;\n                subject = undefined;\n            }\n        });\n    };\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { DashboardRoutingModule } from './dashboard-routing.module';\r\nimport { DashboardComponent } from './dashboard.component';\r\n\r\n@NgModule({\r\n  declarations: [DashboardComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    DashboardRoutingModule\r\n  ]\r\n})\r\nexport class DashboardModule { }\r\n"],"sourceRoot":"webpack:///","file":"86.ac65f11d167537bf.js"}