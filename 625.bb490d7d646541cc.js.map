{"version":3,"mappings":"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","names":["DIR_DOCUMENT","InjectionToken","providedIn","factory","inject","DOCUMENT","RTL_LOCALE_PATTERN","hasV8BreakIterator","Directionality","constructor","_document","this","value","change","EventEmitter","htmlDir","documentElement","dir","rawValue","toLowerCase","navigator","language","test","_resolveDirectionality","body","ngOnDestroy","complete","ɵfac","i0","ɵprov","BidiModule","ɵmod","ɵinj","Intl","v8BreakIterator","_a","supportedInputTypes","Platform","_platformId","isBrowser","isPlatformBrowser","document","EDGE","userAgent","TRIDENT","BLINK","window","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","PLATFORM_ID","candidateInputTypes","Set","featureTestInput","createElement","filter","setAttribute","type","supportsPassiveEvents","scrollBehaviorSupported","shadowDomIsSupported","options","addEventListener","Object","defineProperty","get","supportsPassiveEventListeners","capture","Element","style","scrollToFunction","prototype","scrollTo","toString","activeElement","shadowRoot","newActiveElement","event","composedPath","target","__karma__","jasmine","jest","Mocha","ENTER","SPACE","modifiers","length","some","modifier","altKey","shiftKey","ctrlKey","metaKey","total","call","subscriber","source","subscribe","SkipSubscriber","Subscriber","destination","super","count","_next","x","next","compare","keySelector","DistinctUntilChangedSubscriber","hasKey","y","key","err","error","result","notifier","lift","TakeUntilOperator","takeUntilSubscriber","TakeUntilSubscriber","notifierSubscription","innerSubscribe","SimpleInnerSubscriber","seenValue","add","SimpleOuterSubscriber","notifyNext","notifyComplete","Array","isArray","elementOrRef","ElementRef","nativeElement","dueTime","scheduler","DebounceTimeSubscriber","debouncedSubscription","lastValue","hasValue","clearDebounce","schedule","dispatchNext","_complete","debouncedNext","remove","unsubscribe","MutationObserverFactory","create","callback","MutationObserver","ContentObserver","_mutationObserverFactory","_observedElements","Map","forEach","_","element","_cleanupObserver","observe","coerceElement","Observable","observer","subscription","stream","_observeElement","_unobserveElement","has","Subject","mutations","characterData","childList","subtree","set","disconnect","delete","CdkObserveContent","_contentObserver","_elementRef","_ngZone","_disabled","_currentSubscription","disabled","coerceBooleanProperty","_unsubscribe","_subscribe","debounce","_debounce","fallbackValue","isNaN","parseFloat","Number","_isNumberValue","coerceNumberProperty","ngAfterContentInit","runOutsideAngular","pipe","async","DebounceTimeOperator","debounceTime","ɵdir","selectors","ObserversModule","InteractivityChecker","_platform","isDisabled","hasAttribute","isVisible","offsetWidth","offsetHeight","getClientRects","hasGeometry","getComputedStyle","visibility","isTabbable","frameElement","getFrameElement","node","ownerDocument","defaultView","getWindow","getTabIndexValue","nodeName","tabIndexValue","inputType","isPotentiallyTabbableIOS","tabIndex","isFocusable","config","isInputElement","isHiddenInput","isNativeFormElement","isAnchorElement","isAnchorWithHref","hasValidTabIndex","isPotentiallyFocusable","ignoreVisibility","i1","undefined","getAttribute","parseInt","_element","_checker","deferAnchors","_hasAttached","startAnchorListener","focusLastTabbableElement","endAnchorListener","focusFirstTabbableElement","_enabled","attachAnchors","enabled","_startAnchor","_endAnchor","_toggleAnchorTabIndex","destroy","startAnchor","endAnchor","removeEventListener","_createAnchor","parentNode","insertBefore","nextSibling","focusInitialElementWhenReady","Promise","resolve","_executeOnStable","focusInitialElement","focusFirstTabbableElementWhenReady","focusLastTabbableElementWhenReady","_getRegionBoundary","bound","markers","querySelectorAll","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","querySelector","focusableChild","focus","hasAttached","root","children","i","tabbableChild","nodeType","ELEMENT_NODE","anchor","classList","isEnabled","removeAttribute","toggleAnchors","fn","isStable","onStable","take","FocusTrapFactory","deferCaptureElements","FocusTrap","CdkTrapFocus","_focusTrapFactory","_previouslyFocusedElement","focusTrap","autoCapture","_autoCapture","_captureFocus","ngDoCheck","ngOnChanges","changes","autoCaptureChange","firstChange","_getFocusedElementPierceShadowDom","buttons","offsetX","offsetY","touch","touches","changedTouches","identifier","radiusX","radiusY","INPUT_MODALITY_DETECTOR_OPTIONS","INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS","ignoreKeys","modalityEventListenerOptions","normalizePassiveListenerOptions","passive","InputModalityDetector","ngZone","_mostRecentTarget","_modality","BehaviorSubject","_lastTouchMs","_onKeydown","_b","_options","keyCode","_getEventTarget","_onMousedown","Date","now","isFakeMousedownFromScreenReader","_onTouchstart","isFakeTouchstartFromScreenReader","assign","modalityDetected","SkipOperator","skip","modalityChanged","DistinctUntilChangedOperator","distinctUntilChanged","mostRecentModality","FOCUS_MONITOR_DEFAULT_OPTIONS","captureEventListenerOptions","FocusMonitor","_inputModalityDetector","_origin","_windowFocused","_originFromTouchInteraction","_elementInfo","_monitoredElementCount","_rootNodeFocusListenerCount","_windowFocusListener","_windowFocusTimeoutId","setTimeout","_stopInputModalityDetector","_rootNodeFocusAndBlurListener","handler","_onFocus","_onBlur","parentElement","_detectionMode","detectionMode","monitor","checkChildren","of","rootNode","head","createShadowRoot","attachShadow","_supportsShadowDom","getRootNode","ShadowRoot","_getShadowRoot","_getDocument","cachedInfo","subject","info","_registerGlobalListeners","stopMonitoring","elementInfo","_setClasses","_removeGlobalListeners","focusVia","origin","_getClosestElementsInfo","currentElement","_originChanged","_setOrigin","_info","_getWindow","_getFocusOrigin","focusEventTarget","_shouldBeAttributedToTouch","_lastFocusOrigin","contains","toggle","isFromInteraction","clearTimeout","_originTimeoutId","relatedTarget","Node","_emitOrigin","run","rootNodeFocusListeners","takeUntil","modality","results","push","CdkMonitorFocus","_focusMonitor","cdkFocusChange","ngAfterViewInit","_monitorSubscription","emit","BLACK_ON_WHITE_CSS_CLASS","WHITE_ON_BLACK_CSS_CLASS","HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS","HighContrastModeDetector","getHighContrastMode","testElement","backgroundColor","position","appendChild","documentWindow","computedStyle","computedColor","replace","_applyBodyHighContrastModeCssClasses","_hasCheckedHighContrastMode","bodyClasses","mode","A11yModule","highContrastModeDetector","MATERIAL_SANITY_CHECKS","MatCommonModule","_sanityChecks","_hasDoneGlobalChecks","_checkIsEnabled","name","_isTestEnvironment","base","args","defaultColor","color","_color","colorPalette","_disableRipple","disableRipple","stateChanges","errorState","updateErrorState","oldState","newState","errorStateMatcher","_defaultErrorStateMatcher","isErrorState","ngControl","control","_parentFormGroup","_parentForm","MAT_DATE_LOCALE","LOCALE_ID","_localeChanges","localeChanges","getValidDateOrNull","obj","isDateInstance","isValid","deserialize","invalid","setLocale","locale","compareDate","first","second","getYear","getMonth","getDate","sameDate","firstValid","secondValid","clampDate","date","min","max","MAT_DATE_FORMATS","ISO_8601_REGEX","valueFunction","valuesArray","NativeDateAdapter","DateAdapter","matDateLocale","useUtcForDisplay","getFullYear","getDayOfWeek","getDay","getMonthNames","dtf","DateTimeFormat","month","timeZone","range","_format","getDateNames","day","getDayOfWeekNames","weekday","getYearName","year","getFirstDayOfWeek","getNumDaysInMonth","_createDateWithOverflow","clone","getTime","createDate","today","parse","format","displayFormat","Error","addCalendarYears","years","addCalendarMonths","months","newDate","addCalendarDays","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","NaN","d","setFullYear","setHours","n","slice","setUTCFullYear","setUTCHours","getHours","getMinutes","getSeconds","getMilliseconds","i1$1","MAT_NATIVE_DATE_FORMATS","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","NativeDateModule","provide","useClass","MatNativeDateModule","useValue","imports","ErrorStateMatcher","form","touched","submitted","_renderer","state","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","passiveEventOptions","pointerDownEvents","pointerUpEvents","_target","elementOrElementRef","platform","_isPointerDown","_activeRipples","_pointerUpEventsRegistered","_containerElement","fadeInRipple","containerRect","_containerRect","getBoundingClientRect","animationConfig","animation","centered","left","width","top","height","radius","rect","distX","Math","abs","right","distY","bottom","sqrt","distanceToFurthestCorner","duration","ripple","transitionDuration","getPropertyValue","enforceStyleRecalculation","transform","rippleRef","RippleRef","persistent","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","size","rippleEl","opacity","fadeOutAll","fadeOutAllNonPersistent","setupTriggerEvents","_triggerElement","_removeTriggerEvents","_registerEvents","handleEvent","_onTouchStart","_onPointerUp","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","rippleDisabled","clientX","clientY","rippleConfig","terminateOnPointerUp","delay","eventTypes","MAT_RIPPLE_GLOBAL_OPTIONS","MatRipple","globalOptions","_animationMode","_isInitialized","_globalOptions","_rippleRenderer","RippleRenderer","_setupTriggerEventsIfEnabled","trigger","_trigger","ngOnInit","launch","configOrX","ANIMATION_MODULE_TYPE","MatRippleModule","BUTTON_HOST_ATTRIBUTES","_MatButtonBase","mixinColor","mixinDisabled","mixinDisableRipple","MatButton","elementRef","isRoundButton","_hasHostAttributes","isIconButton","attr","_getHostElement","_isRippleDisabled","attributes","attribute","ɵcmp","r","t","attrs","directives","i2","styles","MatButtonModule","animationFrameScheduler","AsyncScheduler","flush","action","active","scheduled","actions","index","shift","execute","AsyncAction","work","requestAsyncId","id","requestAnimationFrame","recycleAsyncId","cancelAnimationFrame","nextHandle","RESOLVED","activeHandles","handle","Immediate","setImmediate","cb","then","findAndClearHandle","clearImmediate","bind","durationSelector","AuditSubscriber","throttled","innerSubscription","closed","clearThrottle","AuditOperator","audit","timer","ScrollDispatcher","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","register","scrollable","elementScrolled","deregister","scrollableReference","scrolled","auditTimeInMs","_addGlobalListener","auditTime","_removeGlobalListener","container","ancestorScrolled","ancestors","getAncestorScrollContainers","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","scrollableElement","getElementRef","fromEvent","ViewportRuler","_change","_changeListener","_viewportSize","getViewportSize","_updateViewportSize","output","getViewportRect","scrollPosition","getViewportScrollPosition","documentRect","scrollTop","scrollY","scrollLeft","scrollX","throttleTime","innerWidth","innerHeight","CdkScrollableModule","ScrollingModule","attach","host","_attachedHost","detach","isAttached","setAttachedHost","Portal","component","viewContainerRef","injector","componentFactoryResolver","template","context","templateRef","_isDisposed","attachDomPortal","_attachedPortal","portal","ComponentPortal","attachComponentPortal","TemplatePortal","attachTemplatePortal","DomPortal","_invokeDisposeFn","dispose","setDisposeFn","_disposeFn","BasePortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","anchorNode","createComment","replaceChild","componentFactory","resolveComponentFactory","componentRef","createComponent","Injector","attachView","hostView","viewCount","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","rootNodes","detectChanges","CdkPortalOutlet","_viewContainerRef","attached","_getRootNode","attachedRef","_attachedRef","ref","clear","PortalModule","supportsScrollBehavior","_viewportRuler","_previousHTMLStyles","_isEnabled","enable","_canBeEnabled","_previousScrollPosition","coerceCssPixelValue","disable","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","viewport","scrollHeight","scrollWidth","_scrollDispatcher","_config","_scrollSubscription","_detach","_overlayRef","overlayRef","threshold","_initialScrollPosition","updatePosition","containerBounds","scrollContainerRect","scrollThrottle","autoClose","overlayRect","overlayElement","isElementScrolledOutsideView","ScrollStrategyOptions","noop","NoopScrollStrategy","close","CloseScrollStrategy","block","BlockScrollStrategy","reposition","RepositionScrollStrategy","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","keys","connectionPair","scrollableViewProperties","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","_backdropTransitionendHandler","_disposeBackdrop","_keydownEvents","_outsidePointerEvents","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","_previousHostParent","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","_disposeScrollStrategy","backdropClick","attachments","detachments","keydownEvents","outsidePointerEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","backdropToDetach","_backdropTimeout","cssClasses","isAdd","coerceArray","c","merge","backdrop","OverlayContainer","getContainerElement","_createContainer","containerClass","oppositePlatformContainers","we","boundingBoxClass","cssUnitPattern","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isInitialRender","_lastPosition","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","originX","startX","_isRtl","endX","originY","overlayStartX","overlayStartY","overlayX","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","horizontalFit","_pushOverlayOnScreen","start","overflowRight","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","ConnectedOverlayPositionChange","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","_hasExactPosition","e","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","isOriginClipped","isElementClippedByScrolling","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","cssClass","hasOwnProperty","input","units","split","clientRect","floor","wrapperClass","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","global","GlobalPositionStrategy","flexibleConnectedTo","FlexibleConnectedPositionStrategy","BaseOverlayDispatcher","_attachedOverlays","splice","OverlayKeyboardDispatcher","_keydownListener","overlays","_isAttached","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_clickListener","_addEventListeners","_cursorOriginalValue","cursor","nextUniqueId","Overlay","scrollStrategies","_positionBuilder","_injector","_directionality","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","OverlayConfig","OverlayRef","ApplicationRef","DomPortalOutlet","i5","i6","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","deps","useFactory","OverlayModule","updateOutlineGap","MAT_ERROR","matFormFieldAnimations","transitionMessages","transition","animate","MatFormFieldControl","_MAT_HINT","MatLabel","MatPlaceholder","MAT_PREFIX","MAT_SUFFIX","MatSuffix","useExisting","_MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","MAT_FORM_FIELD","MatFormField","_changeDetectorRef","_dir","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_destroyed","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelId","floatLabel","_getDefaultFloatLabelState","_animationsEnabled","appearance","_hideRequiredMarker","hideRequiredMarker","_appearance","oldValue","_shouldAlwaysFloat","_canLabelFloat","hintLabel","_processHints","_floatLabel","markForCheck","_control","_explicitFormFieldControl","_controlNonStatic","_controlStatic","getLabelId","_hasFloatingLabel","getConnectedOverlayOrigin","_connectionContainerRef","_validateControlChild","controlType","startWith","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","ngAfterContentChecked","_shouldForward","prop","_hasPlaceholder","placeholder","_placeholderChild","_hasLabel","_labelChildNonStatic","_labelChildStatic","_shouldLabelFloat","shouldLabelFloat","_hideControlPlaceholder","_getDisplayedMessages","_animateAndLockLabel","_label","_validateHints","ids","userAriaDescribedBy","startHint","find","hint","align","endHint","setDescribedByIds","labelEl","outlineStartSelector","outlineGapSelector","textContent","gapElements","_isAttachedToDOM","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelChildren","labelStart","labelWidth","outlineGapPadding","o","Ma","xa","Aa","ngContentSelectors","Na","i3","i4","changeDetection","MatFormFieldModule","CommonModule","listenerOptions","AutofillMonitor","_monitoredElements","EMPTY","listener","animationName","isAutofilled","unlisten","TextFieldModule","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","_MatInputBase","mixinErrorState","MatInput","inputValueAccessor","_autofillMonitor","_formField","_uid","focused","autofilled","_type","_readonly","_neverEmptyInputTypes","getSupportedInputTypes","_iOSKeyupListener","el","selectionStart","selectionEnd","setSelectionRange","_inputValueAccessor","_previousNativeValue","_isServer","_isNativeSelect","_isTextarea","_isInFormField","multiple","_id","required","_c","_d","_required","hasValidator","Validators","_validateType","readonly","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","_focusChanged","isFocused","_onInput","_previousPlaceholder","newValue","_isNeverEmpty","_isBadInput","validity","badInput","empty","selectElement","firstOption","selectedIndex","label","onContainerClick","_isInlineSelect","MatInputModule","_cellClicked","activeDate","_dateSelected","_monthSelectedInYearView","_goToDateInView","_yearSelectedInMultiYearView","displayValue","ariaLabel","compareValue","MatCalendarBody","numCols","activeCell","isRange","cellAspectRatio","previewStart","previewEnd","selectedValueChange","previewChange","_enterHandler","_skipNextFocus","cell","_getCellFromElement","_leaveHandler","_isSelected","startValue","endValue","columnChanges","rows","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","rowIndex","colIndex","cellNumber","_focusActiveCell","movePreview","_isRangeStart","isStart","_isRangeEnd","isEnd","_isInRange","isInRange","_isComparisonStart","comparisonStart","comparisonEnd","_isComparisonBridgeStart","previousCell","previousRow","_isComparisonBridgeEnd","_isComparisonEnd","nextCell","nextRow","_isInComparisonRange","_isComparisonIdentical","_isPreviewStart","_isPreviewEnd","_isInPreview","isTableCell","row","col","end","rangeEnabled","MatDateSelectionModel","selection","_adapter","_selectionChanged","selectionChanged","updateSelection","_isValidDateInstance","MatSingleDateSelectionModel","adapter","isComplete","MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER","Optional","SkipSelf","MAT_DATE_RANGE_SELECTION_STRATEGY","MatMonthView","_dateFormats","_dateAdapter","_rangeStrategy","_rerenderSubscription","selectedChange","_userSelection","activeDateChange","_activeDate","oldActiveDate","validDate","minDate","maxDate","_hasSameMonthAndYear","_init","selected","_selected","DateRange","_setRanges","_minDate","_maxDate","comparisonChange","selectedYear","selectedMonth","selectedDate","rangeStartDate","rangeEndDate","_getDateInCurrentMonth","_previewStart","_previewEnd","_handleCalendarBodyKeydown","_selectionKeyPressed","_canSelect","preventDefault","hasModifierKey","stopPropagation","_handleCalendarBodyKeyup","_todayDate","_getCellCompareValue","_monthLabel","monthLabel","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","_initWeekdays","_createWeekCells","_matCalendarBody","_previewChanged","previewRange","createPreview","firstDayOfWeek","narrowWeekdays","weekdays","long","narrow","_weekdays","concat","daysInMonth","dateNames","_weeks","_shouldEnableDate","cellClasses","dateClass","MatCalendarCell","dateFilter","d1","d2","selectedValue","_rangeStart","_rangeEnd","_isRange","_comparisonRangeStart","_comparisonRangeEnd","decls","encapsulation","yearsPerPage","MatMultiYearView","yearSelected","isSameMultiYearView","_setSelectedYear","_todayYear","minYearOfPage","activeYear","getActiveOffset","_years","_createCellForYear","_yearSelected","_getActiveCell","yearName","_shouldEnableYear","_selectedYear","dateAdapter","date1","date2","year1","year2","startingYear","getStartingYear","a","b","euclideanModulo","MatYearView","monthSelected","_setSelectedMonth","_monthSelected","normalizedDate","_todayMonth","_getMonthInCurrentYear","_yearLabel","monthNames","_months","_createCellForMonth","monthName","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","_selectedMonth","MatDatepickerIntl","calendarLabel","openCalendarLabel","closeCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","formatYearRange","uniqueId","MatCalendarHeader","_intl","calendar","changeDetectorRef","_buttonDescriptionId","periodButtonText","currentView","maxYearOfPage","minYearName","maxYearName","periodButtonLabel","prevButtonLabel","nextButtonLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","forwardRef","MatCalendar","_moveFocusOnNextTick","startView","viewChanged","_intlChanges","startAt","_startAt","_clampedActiveDate","_currentView","viewChangedResult","_calendarHeaderPortal","headerComponent","ngAfterViewChecked","focusActiveCell","minDateChange","previousValue","maxDateChange","view","_getCurrentViewComponent","updateTodaysDate","normalizedYear","normalizedMonth","monthView","yearView","multiYearView","i7","i8","matDatepickerAnimations","transformPanel","keyframes","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","_MatDatepickerContentBase","MatDatepickerContent","_globalModel","_rangeSelectionStrategy","intl","_subscriptions","_animationDone","_actionsPortal","_closeButtonText","_model","_animationState","datepicker","touchUi","_calendar","_handleUserSelection","newSelection","selectionFinished","_startExitAnimation","_getSelected","_applyPendingSelection","MatDatepickerBase","_overlay","_inputStateChanges","_touchUi","xPosition","yPosition","_restoreFocus","openedStream","closedStream","_opened","_focusedElementBeforeOpen","_backdropHarnessClass","datepickerInput","getStartValue","getThemePalette","restoreFocus","_panelClass","separator","sourceValues","sourceValue","trimmedString","coerceStringArray","opened","open","_getMinDate","_getMaxDate","_getDateFilter","positionChange","_setConnectedPositions","_destroyOverlay","select","_selectYear","_selectMonth","_viewChanged","registerInput","registerActions","removeActions","_openOverlay","_componentRef","instance","completeClose","_forwardContentValues","_dialogLabelId","getOverlayLabelId","isDialog","_getDialogStrategy","_getDropdownStrategy","_getCloseStream","primaryX","secondaryX","primaryY","secondaryY","i9","inputs","MatDatepicker","targetElement","MatDatepickerInputBase","dateChange","_onTouched","_validatorOnChange","_cvaOnChange","_valueChangesSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_filterValidator","controlValue","_matchesFilter","matDatepickerFilter","_minValidator","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_assignValueProgrammatically","_getValueFromModel","_pendingValue","_parentDisabled","blur","_getValidators","_registerModel","model","_assignValue","_shouldHandleChangeEvent","_isValidValue","_formatValue","MatDatepickerInputEvent","dateInputsHaveChanged","registerOnValidatorChange","validate","_validator","writeValue","registerOnChange","registerOnTouched","setDisabledState","isAltDownArrow","readOnly","_openPopup","lastValueWasValid","hasChanged","_onChange","_assignValueToModel","MAT_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","dateFormats","_closedSubscription","matDatepicker","_datepicker","_min","validValue","_max","_dateFilter","wasMatchingValue","modelValue","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","_stateChanges","parsedTabIndex","_watchStateChanges","_open","datepickerStateChanged","inputStateChanged","datepickerToggled","_r","vr","MatDatepickerModule","content","data","_close","afterClosed$","AsDialogComponent","contentType","TemplateRef","AsDialog","configs","dialogRef","AsDialogRef","createInjector","location","inj","providers","AsDialogModule","SharedModule","TypeError","argument","requiredArgs","arguments","argStr","console","warn","stack","dirtyNumber","number","ceil","dirtyDate","dirtyOptions","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","toInteger","RangeError","toDate","diff","setDate","dirtyAmount","amount","SWIPE_DIRECTION","item","transArr","mat","match","z","CalendarSlideContainerDirective","zone","elm","slideList","translate","handleDrag","destroy$","hammerPan","Hammer","DIRECTION_HORIZONTAL","pan$","panStart$","panMove$","observeOn","panEnd$","getMatrix","switchMap","tap","deltaX","distance","asyncScheduler","onSwipeChange","noticeSwipeChange","swipeChange","EventDetailDialogComponent","job","ctx","ctx_r9","oxw","ctx_r12","ctx_r15","ctx_r18","startDate","startOfWeek","from","addDays","weekDay","dateString","toDateString","isToday","routes","path","cd","dialog","jobService","swipeDirection$","swipeDirection","calcWeekDays","selectedDate$","weekDays","endDate","getList","jobList","formatDate","planDate","PlanDate","prevWeekDays","currWeekDays","nextWeekDays","slideContainer","onPrev","onNext","onPrevDay","targetDate","onSelect","onNextDay","endOfWeek","onSelectToday","openEventDetailDialog","log","trackByFn","CalendarComponent","_r0","CalendarRoutingModule","RouterModule","MAT_MODULES","CalendarModule","FormsModule"],"sources":["./node_modules/@angular/cdk/fesm2015/bidi.mjs","./node_modules/@angular/cdk/fesm2015/platform.mjs","./node_modules/@angular/cdk/fesm2015/keycodes.mjs","./node_modules/rxjs/_esm2015/internal/operators/skip.js","./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js","./node_modules/rxjs/_esm2015/internal/operators/takeUntil.js","./node_modules/@angular/cdk/fesm2015/coercion.mjs","./node_modules/rxjs/_esm2015/internal/operators/debounceTime.js","./node_modules/@angular/cdk/fesm2015/observers.mjs","./node_modules/@angular/cdk/fesm2015/a11y.mjs","./node_modules/@angular/material/fesm2015/core.mjs","./node_modules/@angular/material/fesm2015/button.mjs","./node_modules/rxjs/_esm2015/internal/scheduler/animationFrame.js","./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameScheduler.js","./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameAction.js","./node_modules/rxjs/_esm2015/internal/util/Immediate.js","./node_modules/rxjs/_esm2015/internal/scheduler/asap.js","./node_modules/rxjs/_esm2015/internal/scheduler/AsapScheduler.js","./node_modules/rxjs/_esm2015/internal/scheduler/AsapAction.js","./node_modules/rxjs/_esm2015/internal/operators/audit.js","./node_modules/rxjs/_esm2015/internal/operators/auditTime.js","./node_modules/@angular/cdk/fesm2015/scrolling.mjs","./node_modules/@angular/cdk/fesm2015/portal.mjs","./node_modules/@angular/cdk/fesm2015/overlay.mjs","./node_modules/@angular/material/fesm2015/form-field.mjs","./node_modules/@angular/cdk/fesm2015/text-field.mjs","./node_modules/@angular/material/fesm2015/input.mjs","./node_modules/@angular/material/fesm2015/datepicker.mjs","./src/app/shared/ui/dialog/dialog-ref.ts","./src/app/shared/ui/dialog/dialog.component.html","./src/app/shared/ui/dialog/dialog.component.ts","./src/app/shared/ui/dialog/dialog.ts","./src/app/shared/ui/dialog/dialog.module.ts","./src/app/shared/shared.module.ts","./node_modules/date-fns/esm/_lib/requiredArgs/index.js","./node_modules/date-fns/esm/toDate/index.js","./node_modules/date-fns/esm/_lib/toInteger/index.js","./node_modules/date-fns/esm/startOfWeek/index.js","./node_modules/date-fns/esm/addDays/index.js","./src/app/pages/calendar/constant/swipe-direction.ts","./src/app/pages/calendar/util/translate.ts","./src/app/pages/calendar/util/matrix.ts","./src/app/pages/calendar/calendar-slide-container.directive.ts","./src/app/pages/calendar/ui/event-detail-dialog/event-detail-dialog.component.ts","./src/app/pages/calendar/ui/event-detail-dialog/event-detail-dialog.component.html","./src/app/pages/calendar/calendar.component.html","./src/app/pages/calendar/calendar.component.ts","./src/app/pages/calendar/calendar-routing.module.ts","./node_modules/date-fns/esm/endOfWeek/index.js","./src/app/pages/calendar/calendar.module.ts"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY,\n});\n/** @docs-private */\nfunction DIR_DOCUMENT_FACTORY() {\n    return inject(DOCUMENT);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */\nconst RTL_LOCALE_PATTERN = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;\n/** Resolves a string value to a specific direction. */\nfunction _resolveDirectionality(rawValue) {\n    const value = (rawValue === null || rawValue === void 0 ? void 0 : rawValue.toLowerCase()) || '';\n    if (value === 'auto' && typeof navigator !== 'undefined' && (navigator === null || navigator === void 0 ? void 0 : navigator.language)) {\n        return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';\n    }\n    return value === 'rtl' ? 'rtl' : 'ltr';\n}\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nclass Directionality {\n    constructor(_document) {\n        /** The current 'ltr' or 'rtl' value. */\n        this.value = 'ltr';\n        /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n        this.change = new EventEmitter();\n        if (_document) {\n            const bodyDir = _document.body ? _document.body.dir : null;\n            const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n            this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');\n        }\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\nDirectionality.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Directionality, deps: [{ token: DIR_DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nDirectionality.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Directionality, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Directionality, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DIR_DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nclass Dir {\n    constructor() {\n        /** Normalized direction that accounts for invalid/unsupported values. */\n        this._dir = 'ltr';\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Event emitted when the direction changes. */\n        this.change = new EventEmitter();\n    }\n    /** @docs-private */\n    get dir() {\n        return this._dir;\n    }\n    set dir(value) {\n        const previousValue = this._dir;\n        // Note: `_resolveDirectionality` resolves the language based on the browser's language,\n        // whereas the browser does it based on the content of the element. Since doing so based\n        // on the content can be expensive, for now we're doing the simpler matching.\n        this._dir = _resolveDirectionality(value);\n        this._rawDir = value;\n        if (previousValue !== this._dir && this._isInitialized) {\n            this.change.emit(this._dir);\n        }\n    }\n    /** Current layout direction of the element. */\n    get value() {\n        return this.dir;\n    }\n    /** Initialize once default value has been set. */\n    ngAfterContentInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\nDir.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Dir, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nDir.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: Dir, selector: \"[dir]\", inputs: { dir: \"dir\" }, outputs: { change: \"dirChange\" }, host: { properties: { \"attr.dir\": \"_rawDir\" } }, providers: [{ provide: Directionality, useExisting: Dir }], exportAs: [\"dir\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Dir, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[dir]',\n                    providers: [{ provide: Directionality, useExisting: Dir }],\n                    host: { '[attr.dir]': '_rawDir' },\n                    exportAs: 'dir',\n                }]\n        }], propDecorators: { change: [{\n                type: Output,\n                args: ['dirChange']\n            }], dir: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass BidiModule {\n}\nBidiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BidiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBidiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BidiModule, declarations: [Dir], exports: [Dir] });\nBidiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BidiModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BidiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [Dir],\n                    declarations: [Dir],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality };\n","import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Injectable, Inject, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;\n}\ncatch (_a) {\n    hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\nclass Platform {\n    constructor(_platformId) {\n        this._platformId = _platformId;\n        // We want to use the Angular platform check because if the Document is shimmed\n        // without the navigator, the following checks will fail. This is preferred because\n        // sometimes the Document may be shimmed without the user's knowledge or intention\n        /** Whether the Angular application is being rendered in the browser. */\n        this.isBrowser = this._platformId\n            ? isPlatformBrowser(this._platformId)\n            : typeof document === 'object' && !!document;\n        /** Whether the current browser is Microsoft Edge. */\n        this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n        /** Whether the current rendering engine is Microsoft Trident. */\n        this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n        // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n        /** Whether the current rendering engine is Blink. */\n        this.BLINK = this.isBrowser &&\n            !!(window.chrome || hasV8BreakIterator) &&\n            typeof CSS !== 'undefined' &&\n            !this.EDGE &&\n            !this.TRIDENT;\n        // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n        // ensure that Webkit runs standalone and is not used as another engine's base.\n        /** Whether the current rendering engine is WebKit. */\n        this.WEBKIT = this.isBrowser &&\n            /AppleWebKit/i.test(navigator.userAgent) &&\n            !this.BLINK &&\n            !this.EDGE &&\n            !this.TRIDENT;\n        /** Whether the current platform is Apple iOS. */\n        this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n        // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n        // them self as Gecko-like browsers and modify the userAgent's according to that.\n        // Since we only cover one explicit Firefox case, we can simply check for Firefox\n        // instead of having an unstable check for Gecko.\n        /** Whether the current browser is Firefox. */\n        this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n        /** Whether the current platform is Android. */\n        // Trident on mobile adds the android platform to the userAgent to trick detections.\n        this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n        // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n        // Safari browser should also use Webkit as its layout engine.\n        /** Whether the current browser is Safari. */\n        this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n    }\n}\nPlatform.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Platform, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable });\nPlatform.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Platform, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Platform, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: Object, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass PlatformModule {\n}\nPlatformModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PlatformModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPlatformModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PlatformModule });\nPlatformModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PlatformModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PlatformModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes;\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n    // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n    // first changing it to something else:\n    // The specified value \"\" does not conform to the required format.\n    // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n    'color',\n    'button',\n    'checkbox',\n    'date',\n    'datetime-local',\n    'email',\n    'file',\n    'hidden',\n    'image',\n    'month',\n    'number',\n    'password',\n    'radio',\n    'range',\n    'reset',\n    'search',\n    'submit',\n    'tel',\n    'text',\n    'time',\n    'url',\n    'week',\n];\n/** @returns The input types supported by this browser. */\nfunction getSupportedInputTypes() {\n    // Result is cached.\n    if (supportedInputTypes) {\n        return supportedInputTypes;\n    }\n    // We can't check if an input type is not supported until we're on the browser, so say that\n    // everything is supported when not on the browser. We don't use `Platform` here since it's\n    // just a helper function and can't inject it.\n    if (typeof document !== 'object' || !document) {\n        supportedInputTypes = new Set(candidateInputTypes);\n        return supportedInputTypes;\n    }\n    let featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n        featureTestInput.setAttribute('type', value);\n        return featureTestInput.type === value;\n    }));\n    return supportedInputTypes;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nfunction supportsPassiveEventListeners() {\n    if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n        try {\n            window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n                get: () => (supportsPassiveEvents = true),\n            }));\n        }\n        finally {\n            supportsPassiveEvents = supportsPassiveEvents || false;\n        }\n    }\n    return supportsPassiveEvents;\n}\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nfunction normalizePassiveListenerOptions(options) {\n    return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType;\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported;\n/** Check whether the browser supports scroll behaviors. */\nfunction supportsScrollBehavior() {\n    if (scrollBehaviorSupported == null) {\n        // If we're not in the browser, it can't be supported. Also check for `Element`, because\n        // some projects stub out the global `document` during SSR which can throw us off.\n        if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n            scrollBehaviorSupported = false;\n            return scrollBehaviorSupported;\n        }\n        // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n        if ('scrollBehavior' in document.documentElement.style) {\n            scrollBehaviorSupported = true;\n        }\n        else {\n            // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n            // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n            const scrollToFunction = Element.prototype.scrollTo;\n            if (scrollToFunction) {\n                // We can detect if the function has been polyfilled by calling `toString` on it. Native\n                // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n                // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n                // polyfilled functions as supporting scroll behavior.\n                scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n            }\n            else {\n                scrollBehaviorSupported = false;\n            }\n        }\n    }\n    return scrollBehaviorSupported;\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nfunction getRtlScrollAxisType() {\n    // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n    if (typeof document !== 'object' || !document) {\n        return 0 /* NORMAL */;\n    }\n    if (rtlScrollAxisType == null) {\n        // Create a 1px wide scrolling container and a 2px wide content element.\n        const scrollContainer = document.createElement('div');\n        const containerStyle = scrollContainer.style;\n        scrollContainer.dir = 'rtl';\n        containerStyle.width = '1px';\n        containerStyle.overflow = 'auto';\n        containerStyle.visibility = 'hidden';\n        containerStyle.pointerEvents = 'none';\n        containerStyle.position = 'absolute';\n        const content = document.createElement('div');\n        const contentStyle = content.style;\n        contentStyle.width = '2px';\n        contentStyle.height = '1px';\n        scrollContainer.appendChild(content);\n        document.body.appendChild(scrollContainer);\n        rtlScrollAxisType = 0 /* NORMAL */;\n        // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n        // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n        // dealing with one of the other two types of browsers.\n        if (scrollContainer.scrollLeft === 0) {\n            // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n            // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n            // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n            // return 0 when we read it again.\n            scrollContainer.scrollLeft = 1;\n            rtlScrollAxisType =\n                scrollContainer.scrollLeft === 0 ? 1 /* NEGATED */ : 2 /* INVERTED */;\n        }\n        scrollContainer.remove();\n    }\n    return rtlScrollAxisType;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet shadowDomIsSupported;\n/** Checks whether the user's browser support Shadow DOM. */\nfunction _supportsShadowDom() {\n    if (shadowDomIsSupported == null) {\n        const head = typeof document !== 'undefined' ? document.head : null;\n        shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));\n    }\n    return shadowDomIsSupported;\n}\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nfunction _getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        // Note that this should be caught by `_supportsShadowDom`, but some\n        // teams have been able to hit this code path on unsupported browsers.\n        if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n/**\n * Gets the currently-focused element on the page while\n * also piercing through Shadow DOM boundaries.\n */\nfunction _getFocusedElementPierceShadowDom() {\n    let activeElement = typeof document !== 'undefined' && document\n        ? document.activeElement\n        : null;\n    while (activeElement && activeElement.shadowRoot) {\n        const newActiveElement = activeElement.shadowRoot.activeElement;\n        if (newActiveElement === activeElement) {\n            break;\n        }\n        else {\n            activeElement = newActiveElement;\n        }\n    }\n    return activeElement;\n}\n/** Gets the target of an event while accounting for Shadow DOM. */\nfunction _getEventTarget(event) {\n    // If an event is bound outside the Shadow DOM, the `event.target` will\n    // point to the shadow root so we have to use `composedPath` instead.\n    return (event.composedPath ? event.composedPath()[0] : event.target);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets whether the code is currently running in a test environment. */\nfunction _isTestEnvironment() {\n    // We can't use `declare const` because it causes conflicts inside Google with the real typings\n    // for these symbols and we can't read them off the global object, because they don't appear to\n    // be attached there for some runners like Jest.\n    // (see: https://github.com/angular/components/issues/23365#issuecomment-938146643)\n    return (\n    // @ts-ignore\n    (typeof __karma__ !== 'undefined' && !!__karma__) ||\n        // @ts-ignore\n        (typeof jasmine !== 'undefined' && !!jasmine) ||\n        // @ts-ignore\n        (typeof jest !== 'undefined' && !!jest) ||\n        // @ts-ignore\n        (typeof Mocha !== 'undefined' && !!Mocha));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Platform, PlatformModule, _getEventTarget, _getFocusedElementPierceShadowDom, _getShadowRoot, _isTestEnvironment, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior };\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAC_ENTER = 3;\nconst BACKSPACE = 8;\nconst TAB = 9;\nconst NUM_CENTER = 12;\nconst ENTER = 13;\nconst SHIFT = 16;\nconst CONTROL = 17;\nconst ALT = 18;\nconst PAUSE = 19;\nconst CAPS_LOCK = 20;\nconst ESCAPE = 27;\nconst SPACE = 32;\nconst PAGE_UP = 33;\nconst PAGE_DOWN = 34;\nconst END = 35;\nconst HOME = 36;\nconst LEFT_ARROW = 37;\nconst UP_ARROW = 38;\nconst RIGHT_ARROW = 39;\nconst DOWN_ARROW = 40;\nconst PLUS_SIGN = 43;\nconst PRINT_SCREEN = 44;\nconst INSERT = 45;\nconst DELETE = 46;\nconst ZERO = 48;\nconst ONE = 49;\nconst TWO = 50;\nconst THREE = 51;\nconst FOUR = 52;\nconst FIVE = 53;\nconst SIX = 54;\nconst SEVEN = 55;\nconst EIGHT = 56;\nconst NINE = 57;\nconst FF_SEMICOLON = 59; // Firefox (Gecko) fires this for semicolon instead of 186\nconst FF_EQUALS = 61; // Firefox (Gecko) fires this for equals instead of 187\nconst QUESTION_MARK = 63;\nconst AT_SIGN = 64;\nconst A = 65;\nconst B = 66;\nconst C = 67;\nconst D = 68;\nconst E = 69;\nconst F = 70;\nconst G = 71;\nconst H = 72;\nconst I = 73;\nconst J = 74;\nconst K = 75;\nconst L = 76;\nconst M = 77;\nconst N = 78;\nconst O = 79;\nconst P = 80;\nconst Q = 81;\nconst R = 82;\nconst S = 83;\nconst T = 84;\nconst U = 85;\nconst V = 86;\nconst W = 87;\nconst X = 88;\nconst Y = 89;\nconst Z = 90;\nconst META = 91; // WIN_KEY_LEFT\nconst MAC_WK_CMD_LEFT = 91;\nconst MAC_WK_CMD_RIGHT = 93;\nconst CONTEXT_MENU = 93;\nconst NUMPAD_ZERO = 96;\nconst NUMPAD_ONE = 97;\nconst NUMPAD_TWO = 98;\nconst NUMPAD_THREE = 99;\nconst NUMPAD_FOUR = 100;\nconst NUMPAD_FIVE = 101;\nconst NUMPAD_SIX = 102;\nconst NUMPAD_SEVEN = 103;\nconst NUMPAD_EIGHT = 104;\nconst NUMPAD_NINE = 105;\nconst NUMPAD_MULTIPLY = 106;\nconst NUMPAD_PLUS = 107;\nconst NUMPAD_MINUS = 109;\nconst NUMPAD_PERIOD = 110;\nconst NUMPAD_DIVIDE = 111;\nconst F1 = 112;\nconst F2 = 113;\nconst F3 = 114;\nconst F4 = 115;\nconst F5 = 116;\nconst F6 = 117;\nconst F7 = 118;\nconst F8 = 119;\nconst F9 = 120;\nconst F10 = 121;\nconst F11 = 122;\nconst F12 = 123;\nconst NUM_LOCK = 144;\nconst SCROLL_LOCK = 145;\nconst FIRST_MEDIA = 166;\nconst FF_MINUS = 173;\nconst MUTE = 173; // Firefox (Gecko) fires 181 for MUTE\nconst VOLUME_DOWN = 174; // Firefox (Gecko) fires 182 for VOLUME_DOWN\nconst VOLUME_UP = 175; // Firefox (Gecko) fires 183 for VOLUME_UP\nconst FF_MUTE = 181;\nconst FF_VOLUME_DOWN = 182;\nconst LAST_MEDIA = 183;\nconst FF_VOLUME_UP = 183;\nconst SEMICOLON = 186; // Firefox (Gecko) fires 59 for SEMICOLON\nconst EQUALS = 187; // Firefox (Gecko) fires 61 for EQUALS\nconst COMMA = 188;\nconst DASH = 189; // Firefox (Gecko) fires 173 for DASH/MINUS\nconst PERIOD = 190;\nconst SLASH = 191;\nconst APOSTROPHE = 192;\nconst TILDE = 192;\nconst OPEN_SQUARE_BRACKET = 219;\nconst BACKSLASH = 220;\nconst CLOSE_SQUARE_BRACKET = 221;\nconst SINGLE_QUOTE = 222;\nconst MAC_META = 224;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Checks whether a modifier key is pressed.\n * @param event Event to be checked.\n */\nfunction hasModifierKey(event, ...modifiers) {\n    if (modifiers.length) {\n        return modifiers.some(modifier => event[modifier]);\n    }\n    return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { A, ALT, APOSTROPHE, AT_SIGN, B, BACKSLASH, BACKSPACE, C, CAPS_LOCK, CLOSE_SQUARE_BRACKET, COMMA, CONTEXT_MENU, CONTROL, D, DASH, DELETE, DOWN_ARROW, E, EIGHT, END, ENTER, EQUALS, ESCAPE, F, F1, F10, F11, F12, F2, F3, F4, F5, F6, F7, F8, F9, FF_EQUALS, FF_MINUS, FF_MUTE, FF_SEMICOLON, FF_VOLUME_DOWN, FF_VOLUME_UP, FIRST_MEDIA, FIVE, FOUR, G, H, HOME, I, INSERT, J, K, L, LAST_MEDIA, LEFT_ARROW, M, MAC_ENTER, MAC_META, MAC_WK_CMD_LEFT, MAC_WK_CMD_RIGHT, META, MUTE, N, NINE, NUMPAD_DIVIDE, NUMPAD_EIGHT, NUMPAD_FIVE, NUMPAD_FOUR, NUMPAD_MINUS, NUMPAD_MULTIPLY, NUMPAD_NINE, NUMPAD_ONE, NUMPAD_PERIOD, NUMPAD_PLUS, NUMPAD_SEVEN, NUMPAD_SIX, NUMPAD_THREE, NUMPAD_TWO, NUMPAD_ZERO, NUM_CENTER, NUM_LOCK, O, ONE, OPEN_SQUARE_BRACKET, P, PAGE_DOWN, PAGE_UP, PAUSE, PERIOD, PLUS_SIGN, PRINT_SCREEN, Q, QUESTION_MARK, R, RIGHT_ARROW, S, SCROLL_LOCK, SEMICOLON, SEVEN, SHIFT, SINGLE_QUOTE, SIX, SLASH, SPACE, T, TAB, THREE, TILDE, TWO, U, UP_ARROW, V, VOLUME_DOWN, VOLUME_UP, W, X, Y, Z, ZERO, hasModifierKey };\n","import { Subscriber } from '../Subscriber';\nexport function skip(count) {\n    return (source) => source.lift(new SkipOperator(count));\n}\nclass SkipOperator {\n    constructor(total) {\n        this.total = total;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    }\n}\nclass SkipSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    }\n}\n","import { Subscriber } from '../Subscriber';\nexport function distinctUntilChanged(compare, keySelector) {\n    return (source) => source.lift(new DistinctUntilChangedOperator(compare, keySelector));\n}\nclass DistinctUntilChangedOperator {\n    constructor(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    }\n}\nclass DistinctUntilChangedSubscriber extends Subscriber {\n    constructor(destination, compare, keySelector) {\n        super(destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    compare(x, y) {\n        return x === y;\n    }\n    _next(value) {\n        let key;\n        try {\n            const { keySelector } = this;\n            key = keySelector ? keySelector(value) : value;\n        }\n        catch (err) {\n            return this.destination.error(err);\n        }\n        let result = false;\n        if (this.hasKey) {\n            try {\n                const { compare } = this;\n                result = compare(this.key, key);\n            }\n            catch (err) {\n                return this.destination.error(err);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (!result) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    }\n}\n","import { innerSubscribe, SimpleInnerSubscriber, SimpleOuterSubscriber } from '../innerSubscribe';\nexport function takeUntil(notifier) {\n    return (source) => source.lift(new TakeUntilOperator(notifier));\n}\nclass TakeUntilOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n        const notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));\n        if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n            takeUntilSubscriber.add(notifierSubscription);\n            return source.subscribe(takeUntilSubscriber);\n        }\n        return takeUntilSubscriber;\n    }\n}\nclass TakeUntilSubscriber extends SimpleOuterSubscriber {\n    constructor(destination) {\n        super(destination);\n        this.seenValue = false;\n    }\n    notifyNext() {\n        this.seenValue = true;\n        this.complete();\n    }\n    notifyComplete() {\n    }\n}\n","import { ElementRef } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Coerces a data-bound value (typically a string) to a boolean. */\nfunction coerceBooleanProperty(value) {\n    return value != null && `${value}` !== 'false';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n    return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n    if (value == null) {\n        return '';\n    }\n    return typeof value === 'string' ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nfunction coerceStringArray(value, separator = /\\s+/) {\n    const result = [];\n    if (value != null) {\n        const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n        for (const sourceValue of sourceValues) {\n            const trimmedString = `${sourceValue}`.trim();\n            if (trimmedString) {\n                result.push(trimmedString);\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty, coerceStringArray };\n","import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function debounceTime(dueTime, scheduler = async) {\n    return (source) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\nclass DebounceTimeOperator {\n    constructor(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    }\n}\nclass DebounceTimeSubscriber extends Subscriber {\n    constructor(destination, dueTime, scheduler) {\n        super(destination);\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n        this.debouncedSubscription = null;\n        this.lastValue = null;\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    }\n    _complete() {\n        this.debouncedNext();\n        this.destination.complete();\n    }\n    debouncedNext() {\n        this.clearDebounce();\n        if (this.hasValue) {\n            const { lastValue } = this;\n            this.lastValue = null;\n            this.hasValue = false;\n            this.destination.next(lastValue);\n        }\n    }\n    clearDebounce() {\n        const debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    }\n}\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n","import { coerceElement, coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\nclass MutationObserverFactory {\n    create(callback) {\n        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n    }\n}\nMutationObserverFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MutationObserverFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMutationObserverFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MutationObserverFactory, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MutationObserverFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** An injectable service that allows watching elements for changes to their content. */\nclass ContentObserver {\n    constructor(_mutationObserverFactory) {\n        this._mutationObserverFactory = _mutationObserverFactory;\n        /** Keeps track of the existing MutationObservers so they can be reused. */\n        this._observedElements = new Map();\n    }\n    ngOnDestroy() {\n        this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n    }\n    observe(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        return new Observable((observer) => {\n            const stream = this._observeElement(element);\n            const subscription = stream.subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n                this._unobserveElement(element);\n            };\n        });\n    }\n    /**\n     * Observes the given element by using the existing MutationObserver if available, or creating a\n     * new one if not.\n     */\n    _observeElement(element) {\n        if (!this._observedElements.has(element)) {\n            const stream = new Subject();\n            const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n            if (observer) {\n                observer.observe(element, {\n                    characterData: true,\n                    childList: true,\n                    subtree: true,\n                });\n            }\n            this._observedElements.set(element, { observer, stream, count: 1 });\n        }\n        else {\n            this._observedElements.get(element).count++;\n        }\n        return this._observedElements.get(element).stream;\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n     * observing this element.\n     */\n    _unobserveElement(element) {\n        if (this._observedElements.has(element)) {\n            this._observedElements.get(element).count--;\n            if (!this._observedElements.get(element).count) {\n                this._cleanupObserver(element);\n            }\n        }\n    }\n    /** Clean up the underlying MutationObserver for the specified element. */\n    _cleanupObserver(element) {\n        if (this._observedElements.has(element)) {\n            const { observer, stream } = this._observedElements.get(element);\n            if (observer) {\n                observer.disconnect();\n            }\n            stream.complete();\n            this._observedElements.delete(element);\n        }\n    }\n}\nContentObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ContentObserver, deps: [{ token: MutationObserverFactory }], target: i0.ɵɵFactoryTarget.Injectable });\nContentObserver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ContentObserver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ContentObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: MutationObserverFactory }]; } });\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nclass CdkObserveContent {\n    constructor(_contentObserver, _elementRef, _ngZone) {\n        this._contentObserver = _contentObserver;\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /** Event emitted for each change in the element's content. */\n        this.event = new EventEmitter();\n        this._disabled = false;\n        this._currentSubscription = null;\n    }\n    /**\n     * Whether observing content is disabled. This option can be used\n     * to disconnect the underlying MutationObserver until it is needed.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._disabled ? this._unsubscribe() : this._subscribe();\n    }\n    /** Debounce interval for emitting the changes. */\n    get debounce() {\n        return this._debounce;\n    }\n    set debounce(value) {\n        this._debounce = coerceNumberProperty(value);\n        this._subscribe();\n    }\n    ngAfterContentInit() {\n        if (!this._currentSubscription && !this.disabled) {\n            this._subscribe();\n        }\n    }\n    ngOnDestroy() {\n        this._unsubscribe();\n    }\n    _subscribe() {\n        this._unsubscribe();\n        const stream = this._contentObserver.observe(this._elementRef);\n        // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n        // Consider brining it back inside the zone next time we're making breaking changes.\n        // Bringing it back inside can cause things like infinite change detection loops and changed\n        // after checked errors if people's code isn't handling it properly.\n        this._ngZone.runOutsideAngular(() => {\n            this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n        });\n    }\n    _unsubscribe() {\n        var _a;\n        (_a = this._currentSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    }\n}\nCdkObserveContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkObserveContent, deps: [{ token: ContentObserver }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nCdkObserveContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: { disabled: [\"cdkObserveContentDisabled\", \"disabled\"], debounce: \"debounce\" }, outputs: { event: \"cdkObserveContent\" }, exportAs: [\"cdkObserveContent\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkObserveContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkObserveContent]',\n                    exportAs: 'cdkObserveContent',\n                }]\n        }], ctorParameters: function () { return [{ type: ContentObserver }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { event: [{\n                type: Output,\n                args: ['cdkObserveContent']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkObserveContentDisabled']\n            }], debounce: [{\n                type: Input\n            }] } });\nclass ObserversModule {\n}\nObserversModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ObserversModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nObserversModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ObserversModule, declarations: [CdkObserveContent], exports: [CdkObserveContent] });\nObserversModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ObserversModule, providers: [MutationObserverFactory] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ObserversModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkObserveContent],\n                    declarations: [CdkObserveContent],\n                    providers: [MutationObserverFactory],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };\n","import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, QueryList, Directive, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getFocusedElementPierceShadowDom, normalizePassiveListenerOptions, _getEventTarget, _getShadowRoot } from '@angular/cdk/platform';\nimport { Subject, Subscription, BehaviorSubject, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB, ALT, CONTROL, MAC_META, META, SHIFT } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction addAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    if (ids.some(existingId => existingId.trim() == id.trim())) {\n        return;\n    }\n    ids.push(id.trim());\n    el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction removeAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    const filteredIds = ids.filter(val => val != id.trim());\n    if (filteredIds.length) {\n        el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n    }\n    else {\n        el.removeAttribute(attr);\n    }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction getAriaReferenceIds(el, attr) {\n    // Get string array of all individual ids (whitespace delimited) in the attribute value\n    return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * ID used for the body container where all messages are appended.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 14.0.0\n */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/**\n * ID prefix used for each created message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/**\n * Attribute given to each host element that is described by a message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\nclass AriaDescriber {\n    constructor(_document, \n    /**\n     * @deprecated To be turned into a required parameter.\n     * @breaking-change 14.0.0\n     */\n    _platform) {\n        this._platform = _platform;\n        /** Map of all registered message elements that have been placed into the document. */\n        this._messageRegistry = new Map();\n        /** Container for all registered messages. */\n        this._messagesContainer = null;\n        /** Unique ID for the service. */\n        this._id = `${nextId++}`;\n        this._document = _document;\n    }\n    describe(hostElement, message, role) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n        const key = getKey(message, role);\n        if (typeof message !== 'string') {\n            // We need to ensure that the element has an ID.\n            setMessageId(message);\n            this._messageRegistry.set(key, { messageElement: message, referenceCount: 0 });\n        }\n        else if (!this._messageRegistry.has(key)) {\n            this._createMessageElement(message, role);\n        }\n        if (!this._isElementDescribedByMessage(hostElement, key)) {\n            this._addMessageReference(hostElement, key);\n        }\n    }\n    removeDescription(hostElement, message, role) {\n        var _a;\n        if (!message || !this._isElementNode(hostElement)) {\n            return;\n        }\n        const key = getKey(message, role);\n        if (this._isElementDescribedByMessage(hostElement, key)) {\n            this._removeMessageReference(hostElement, key);\n        }\n        // If the message is a string, it means that it's one that we created for the\n        // consumer so we can remove it safely, otherwise we should leave it in place.\n        if (typeof message === 'string') {\n            const registeredMessage = this._messageRegistry.get(key);\n            if (registeredMessage && registeredMessage.referenceCount === 0) {\n                this._deleteMessageElement(key);\n            }\n        }\n        if (((_a = this._messagesContainer) === null || _a === void 0 ? void 0 : _a.childNodes.length) === 0) {\n            this._messagesContainer.remove();\n            this._messagesContainer = null;\n        }\n    }\n    /** Unregisters all created message elements and removes the message container. */\n    ngOnDestroy() {\n        var _a;\n        const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}=\"${this._id}\"]`);\n        for (let i = 0; i < describedElements.length; i++) {\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n        (_a = this._messagesContainer) === null || _a === void 0 ? void 0 : _a.remove();\n        this._messagesContainer = null;\n        this._messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n    _createMessageElement(message, role) {\n        const messageElement = this._document.createElement('div');\n        setMessageId(messageElement);\n        messageElement.textContent = message;\n        if (role) {\n            messageElement.setAttribute('role', role);\n        }\n        this._createMessagesContainer();\n        this._messagesContainer.appendChild(messageElement);\n        this._messageRegistry.set(getKey(message, role), { messageElement, referenceCount: 0 });\n    }\n    /** Deletes the message element from the global messages container. */\n    _deleteMessageElement(key) {\n        var _a, _b;\n        (_b = (_a = this._messageRegistry.get(key)) === null || _a === void 0 ? void 0 : _a.messageElement) === null || _b === void 0 ? void 0 : _b.remove();\n        this._messageRegistry.delete(key);\n    }\n    /** Creates the global container for all aria-describedby messages. */\n    _createMessagesContainer() {\n        if (this._messagesContainer) {\n            return;\n        }\n        const containerClassName = 'cdk-describedby-message-container';\n        const serverContainers = this._document.querySelectorAll(`.${containerClassName}[platform=\"server\"]`);\n        for (let i = 0; i < serverContainers.length; i++) {\n            // When going from the server to the client, we may end up in a situation where there's\n            // already a container on the page, but we don't have a reference to it. Clear the\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\n            // container, should be slightly faster.\n            serverContainers[i].remove();\n        }\n        const messagesContainer = this._document.createElement('div');\n        // We add `visibility: hidden` in order to prevent text in this container from\n        // being searchable by the browser's Ctrl + F functionality.\n        // Screen-readers will still read the description for elements with aria-describedby even\n        // when the description element is not visible.\n        messagesContainer.style.visibility = 'hidden';\n        // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n        // the description element doesn't impact page layout.\n        messagesContainer.classList.add(containerClassName);\n        messagesContainer.classList.add('cdk-visually-hidden');\n        // @breaking-change 14.0.0 Remove null check for `_platform`.\n        if (this._platform && !this._platform.isBrowser) {\n            messagesContainer.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(messagesContainer);\n        this._messagesContainer = messagesContainer;\n    }\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n    _removeCdkDescribedByReferenceIds(element) {\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n    _addMessageReference(element, key) {\n        const registeredMessage = this._messageRegistry.get(key);\n        // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);\n        registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n    _removeMessageReference(element, key) {\n        const registeredMessage = this._messageRegistry.get(key);\n        registeredMessage.referenceCount--;\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /** Returns true if the element has been described by the provided message ID. */\n    _isElementDescribedByMessage(element, key) {\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        const registeredMessage = this._messageRegistry.get(key);\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /** Determines whether a message can be described on a particular element. */\n    _canBeDescribed(element, message) {\n        if (!this._isElementNode(element)) {\n            return false;\n        }\n        if (message && typeof message === 'object') {\n            // We'd have to make some assumptions about the description element's text, if the consumer\n            // passed in an element. Assume that if an element is passed in, the consumer has verified\n            // that it can be used as a description.\n            return true;\n        }\n        const trimmedMessage = message == null ? '' : `${message}`.trim();\n        const ariaLabel = element.getAttribute('aria-label');\n        // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n        // element, because screen readers will end up reading out the same text twice in a row.\n        return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n    }\n    /** Checks whether a node is an Element node. */\n    _isElementNode(element) {\n        return element.nodeType === this._document.ELEMENT_NODE;\n    }\n}\nAriaDescriber.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: AriaDescriber, deps: [{ token: DOCUMENT }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nAriaDescriber.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: AriaDescriber, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: AriaDescriber, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1.Platform }];\n    } });\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message, role) {\n    return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element) {\n    if (!element.id) {\n        element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nclass ListKeyManager {\n    constructor(_items) {\n        this._items = _items;\n        this._activeItemIndex = -1;\n        this._activeItem = null;\n        this._wrap = false;\n        this._letterKeyStream = new Subject();\n        this._typeaheadSubscription = Subscription.EMPTY;\n        this._vertical = true;\n        this._allowedModifierKeys = [];\n        this._homeAndEnd = false;\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this._skipPredicateFn = (item) => item.disabled;\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n        this._pressedLetters = [];\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /** Stream that emits whenever the active item of the list manager changes. */\n        this.change = new Subject();\n        // We allow for the items to be an array because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (_items instanceof QueryList) {\n            _items.changes.subscribe((newItems) => {\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param predicate Function that determines whether the given item should be skipped.\n     */\n    skipPredicate(predicate) {\n        this._skipPredicateFn = predicate;\n        return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param shouldWrap Whether the list should wrap when reaching the end.\n     */\n    withWrap(shouldWrap = true) {\n        this._wrap = shouldWrap;\n        return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled = true) {\n        this._vertical = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction) {\n        this._horizontal = direction;\n        return this;\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n    withAllowedModifierKeys(keys) {\n        this._allowedModifierKeys = keys;\n        return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval = 200) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            this._items.length &&\n            this._items.some(item => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        this._typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream\n            .pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join('')))\n            .subscribe(inputString => {\n            const items = this._getItemsArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n                if (!this._skipPredicateFn(item) &&\n                    item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n            this._pressedLetters = [];\n        });\n        return this;\n    }\n    /**\n     * Configures the key manager to activate the first and last items\n     * respectively when the Home or End key is pressed.\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\n     */\n    withHomeAndEnd(enabled = true) {\n        this._homeAndEnd = enabled;\n        return this;\n    }\n    setActiveItem(item) {\n        const previousActiveItem = this._activeItem;\n        this.updateActiveItem(item);\n        if (this._activeItem !== previousActiveItem) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event) {\n        const keyCode = event.keyCode;\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        const isModifierAllowed = modifiers.every(modifier => {\n            return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n        });\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case HOME:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setFirstItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case END:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setLastItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n                    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                    // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                    if (event.key && event.key.length === 1) {\n                        this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                    }\n                    else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                        this._letterKeyStream.next(String.fromCharCode(keyCode));\n                    }\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n    /** Index of the currently active item. */\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    /** The active item. */\n    get activeItem() {\n        return this._activeItem;\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping() {\n        return this._pressedLetters.length > 0;\n    }\n    /** Sets the active item to the first enabled item in the list. */\n    setFirstItemActive() {\n        this._setActiveItemByIndex(0, 1);\n    }\n    /** Sets the active item to the last enabled item in the list. */\n    setLastItemActive() {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /** Sets the active item to the next enabled item in the list. */\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /** Sets the active item to a previous enabled item in the list. */\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this._wrap\n            ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n    updateActiveItem(item) {\n        const itemArray = this._getItemsArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        const activeItem = itemArray[index];\n        // Explicitly check for `null` and `undefined` because other falsy values are valid.\n        this._activeItem = activeItem == null ? null : activeItem;\n        this._activeItemIndex = index;\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    _setActiveItemByDelta(delta) {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    _setActiveInWrapMode(delta) {\n        const items = this._getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n            const item = items[index];\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    _setActiveInDefaultMode(delta) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    _setActiveItemByIndex(index, fallbackDelta) {\n        const items = this._getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    }\n    /** Returns the items as an array. */\n    _getItemsArray() {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ActiveDescendantKeyManager extends ListKeyManager {\n    setActiveItem(index) {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this._origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\n/**\n * Configuration for the isFocusable method.\n */\nclass IsFocusableConfig {\n    constructor() {\n        /**\n         * Whether to count an element as focusable even if it is not currently visible.\n         */\n        this.ignoreVisibility = false;\n    }\n}\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n    constructor(_platform) {\n        this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is disabled.\n     */\n    isDisabled(element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @returns Whether the element is visible.\n     */\n    isVisible(element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is tabbable.\n     */\n    isTabbable(element) {\n        // Nothing is tabbable on the server 😎\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        const frameElement = getFrameElement(getWindow(element));\n        if (frameElement) {\n            // Frame elements inherit their tabindex onto all child elements.\n            if (getTabIndexValue(frameElement) === -1) {\n                return false;\n            }\n            // Browsers disable tabbing to an element inside of an invisible frame.\n            if (!this.isVisible(frameElement)) {\n                return false;\n            }\n        }\n        let nodeName = element.nodeName.toLowerCase();\n        let tabIndexValue = getTabIndexValue(element);\n        if (element.hasAttribute('contenteditable')) {\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'iframe' || nodeName === 'object') {\n            // The frame or object's content may be tabbable depending on the content, but it's\n            // not possibly to reliably detect the content of the frames. We always consider such\n            // elements as non-tabbable.\n            return false;\n        }\n        // In iOS, the browser only considers some specific elements as tabbable.\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n            return false;\n        }\n        if (nodeName === 'audio') {\n            // Audio elements without controls enabled are never tabbable, regardless\n            // of the tabindex attribute explicitly being set.\n            if (!element.hasAttribute('controls')) {\n                return false;\n            }\n            // Audio elements with controls are by default tabbable unless the\n            // tabindex attribute is set to `-1` explicitly.\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'video') {\n            // For all video elements, if the tabindex attribute is set to `-1`, the video\n            // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n            // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n            // tabindex attribute is the source of truth here.\n            if (tabIndexValue === -1) {\n                return false;\n            }\n            // If the tabindex is explicitly set, and not `-1` (as per check before), the\n            // video element is always tabbable (regardless of whether it has controls or not).\n            if (tabIndexValue !== null) {\n                return true;\n            }\n            // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n            // has controls enabled. Firefox is special as videos are always tabbable regardless\n            // of whether there are controls or not.\n            return this._platform.FIREFOX || element.hasAttribute('controls');\n        }\n        return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param element Element to be checked.\n     * @param config The config object with options to customize this method's behavior\n     * @returns Whether the element is focusable.\n     */\n    isFocusable(element, config) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return (isPotentiallyFocusable(element) &&\n            !this.isDisabled(element) &&\n            ((config === null || config === void 0 ? void 0 : config.ignoreVisibility) || this.isVisible(element)));\n    }\n}\nInteractivityChecker.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: InteractivityChecker, deps: [{ token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nInteractivityChecker.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: InteractivityChecker, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: InteractivityChecker, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }]; } });\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window) {\n    try {\n        return window.frameElement;\n    }\n    catch (_a) {\n        return null;\n    }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth ||\n        element.offsetHeight ||\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n/** Gets whether an element's  */\nfunction isNativeFormElement(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    return (nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea');\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    let tabIndex = element.getAttribute('tabindex');\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    let inputType = nodeName === 'input' && element.type;\n    return (inputType === 'text' ||\n        inputType === 'password' ||\n        nodeName === 'select' ||\n        nodeName === 'textarea');\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return (isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element));\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node) {\n    // ownerDocument is null if `node` itself *is* a document.\n    return (node.ownerDocument && node.ownerDocument.defaultView) || window;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change 11.0.0\n */\nclass FocusTrap {\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._hasAttached = false;\n        // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n        this.startAnchorListener = () => this.focusLastTabbableElement();\n        this.endAnchorListener = () => this.focusFirstTabbableElement();\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    /** Whether the focus trap is active. */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(value, this._startAnchor);\n            this._toggleAnchorTabIndex(value, this._endAnchor);\n        }\n    }\n    /** Destroys the focus trap by cleaning up the anchors. */\n    destroy() {\n        const startAnchor = this._startAnchor;\n        const endAnchor = this._endAnchor;\n        if (startAnchor) {\n            startAnchor.removeEventListener('focus', this.startAnchorListener);\n            startAnchor.remove();\n        }\n        if (endAnchor) {\n            endAnchor.removeEventListener('focus', this.endAnchorListener);\n            endAnchor.remove();\n        }\n        this._startAnchor = this._endAnchor = null;\n        this._hasAttached = false;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @returns Whether the focus trap managed to attach successfully. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n    attachAnchors() {\n        // If we're not on the browser, there can be no focus to trap.\n        if (this._hasAttached) {\n            return true;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            if (!this._startAnchor) {\n                this._startAnchor = this._createAnchor();\n                this._startAnchor.addEventListener('focus', this.startAnchorListener);\n            }\n            if (!this._endAnchor) {\n                this._endAnchor = this._createAnchor();\n                this._endAnchor.addEventListener('focus', this.endAnchorListener);\n            }\n        });\n        if (this._element.parentNode) {\n            this._element.parentNode.insertBefore(this._startAnchor, this._element);\n            this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n            this._hasAttached = true;\n        }\n        return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses the first tabbable element.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusInitialElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusFirstTabbableElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusLastTabbableElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n        });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param bound The boundary to get (start or end of trapped region).\n     * @returns The boundary element.\n     */\n    _getRegionBoundary(bound) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        const markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            for (let i = 0; i < markers.length; i++) {\n                // @breaking-change 8.0.0\n                if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n                    console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                        `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                        `attribute will be removed in 8.0.0.`, markers[i]);\n                }\n                else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n                    console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                        `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                        `will be removed in 8.0.0.`, markers[i]);\n                }\n            }\n        }\n        if (bound == 'start') {\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n        }\n        return markers.length\n            ? markers[markers.length - 1]\n            : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @returns Whether focus was moved successfully.\n     */\n    focusInitialElement(options) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n        if (redirectToElement) {\n            // @breaking-change 8.0.0\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n            }\n            // Warn the consumer if the element they've pointed to\n            // isn't focusable, when not in production mode.\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                !this._checker.isFocusable(redirectToElement)) {\n                console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n            }\n            if (!this._checker.isFocusable(redirectToElement)) {\n                const focusableChild = this._getFirstTabbableElement(redirectToElement);\n                focusableChild === null || focusableChild === void 0 ? void 0 : focusableChild.focus(options);\n                return !!focusableChild;\n            }\n            redirectToElement.focus(options);\n            return true;\n        }\n        return this.focusFirstTabbableElement(options);\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusFirstTabbableElement(options) {\n        const redirectToElement = this._getRegionBoundary('start');\n        if (redirectToElement) {\n            redirectToElement.focus(options);\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusLastTabbableElement(options) {\n        const redirectToElement = this._getRegionBoundary('end');\n        if (redirectToElement) {\n            redirectToElement.focus(options);\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfully been attached.\n     */\n    hasAttached() {\n        return this._hasAttached;\n    }\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\n    _getFirstTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        const children = root.children;\n        for (let i = 0; i < children.length; i++) {\n            const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE\n                ? this._getFirstTabbableElement(children[i])\n                : null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\n    _getLastTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in reverse DOM order.\n        const children = root.children;\n        for (let i = children.length - 1; i >= 0; i--) {\n            const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE\n                ? this._getLastTabbableElement(children[i])\n                : null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Creates an anchor element. */\n    _createAnchor() {\n        const anchor = this._document.createElement('div');\n        this._toggleAnchorTabIndex(this._enabled, anchor);\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        anchor.setAttribute('aria-hidden', 'true');\n        return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param isEnabled Whether the focus trap is enabled.\n     * @param anchor Anchor on which to toggle the tabindex.\n     */\n    _toggleAnchorTabIndex(isEnabled, anchor) {\n        // Remove the tabindex completely, rather than setting it to -1, because if the\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n     * @param enabled: Whether the anchors should trap Tab.\n     */\n    toggleAnchors(enabled) {\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(enabled, this._startAnchor);\n            this._toggleAnchorTabIndex(enabled, this._endAnchor);\n        }\n    }\n    /** Executes a function when the zone is stable. */\n    _executeOnStable(fn) {\n        if (this._ngZone.isStable) {\n            fn();\n        }\n        else {\n            this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n        }\n    }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change 11.0.0\n */\nclass FocusTrapFactory {\n    constructor(_checker, _ngZone, _document) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param element The element around which focus will be trapped.\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @returns The created focus trap instance.\n     */\n    create(element, deferCaptureElements = false) {\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n}\nFocusTrapFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FocusTrapFactory, deps: [{ token: InteractivityChecker }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nFocusTrapFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FocusTrapFactory, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FocusTrapFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: InteractivityChecker }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n/** Directive for trapping focus within a region. */\nclass CdkTrapFocus {\n    constructor(_elementRef, _focusTrapFactory, \n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 13.0.0\n     */\n    _document) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n        this._previouslyFocusedElement = null;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    /** Whether the focus trap is active. */\n    get enabled() {\n        return this.focusTrap.enabled;\n    }\n    set enabled(value) {\n        this.focusTrap.enabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the directive should automatically move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     */\n    get autoCapture() {\n        return this._autoCapture;\n    }\n    set autoCapture(value) {\n        this._autoCapture = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this.focusTrap.destroy();\n        // If we stored a previously focused element when using autoCapture, return focus to that\n        // element now that the trapped region is being destroyed.\n        if (this._previouslyFocusedElement) {\n            this._previouslyFocusedElement.focus();\n            this._previouslyFocusedElement = null;\n        }\n    }\n    ngAfterContentInit() {\n        this.focusTrap.attachAnchors();\n        if (this.autoCapture) {\n            this._captureFocus();\n        }\n    }\n    ngDoCheck() {\n        if (!this.focusTrap.hasAttached()) {\n            this.focusTrap.attachAnchors();\n        }\n    }\n    ngOnChanges(changes) {\n        const autoCaptureChange = changes['autoCapture'];\n        if (autoCaptureChange &&\n            !autoCaptureChange.firstChange &&\n            this.autoCapture &&\n            this.focusTrap.hasAttached()) {\n            this._captureFocus();\n        }\n    }\n    _captureFocus() {\n        this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n        this.focusTrap.focusInitialElementWhenReady();\n    }\n}\nCdkTrapFocus.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTrapFocus, deps: [{ token: i0.ElementRef }, { token: FocusTrapFactory }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTrapFocus.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTrapFocus, selector: \"[cdkTrapFocus]\", inputs: { enabled: [\"cdkTrapFocus\", \"enabled\"], autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"] }, exportAs: [\"cdkTrapFocus\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTrapFocus, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTrapFocus]',\n                    exportAs: 'cdkTrapFocus',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: FocusTrapFactory }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    }, propDecorators: { enabled: [{\n                type: Input,\n                args: ['cdkTrapFocus']\n            }], autoCapture: [{\n                type: Input,\n                args: ['cdkTrapFocusAutoCapture']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nclass ConfigurableFocusTrap extends FocusTrap {\n    constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n        super(_element, _checker, _ngZone, _document, config.defer);\n        this._focusTrapManager = _focusTrapManager;\n        this._inertStrategy = _inertStrategy;\n        this._focusTrapManager.register(this);\n    }\n    /** Whether the FocusTrap is enabled. */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._enabled) {\n            this._focusTrapManager.register(this);\n        }\n        else {\n            this._focusTrapManager.deregister(this);\n        }\n    }\n    /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n    destroy() {\n        this._focusTrapManager.deregister(this);\n        super.destroy();\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _enable() {\n        this._inertStrategy.preventFocus(this);\n        this.toggleAnchors(true);\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _disable() {\n        this._inertStrategy.allowFocus(this);\n        this.toggleAnchors(false);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the inert strategy. */\nconst FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nclass EventListenerFocusTrapInertStrategy {\n    constructor() {\n        /** Focus event handler. */\n        this._listener = null;\n    }\n    /** Adds a document event listener that keeps focus inside the FocusTrap. */\n    preventFocus(focusTrap) {\n        // Ensure there's only one listener per document\n        if (this._listener) {\n            focusTrap._document.removeEventListener('focus', this._listener, true);\n        }\n        this._listener = (e) => this._trapFocus(focusTrap, e);\n        focusTrap._ngZone.runOutsideAngular(() => {\n            focusTrap._document.addEventListener('focus', this._listener, true);\n        });\n    }\n    /** Removes the event listener added in preventFocus. */\n    allowFocus(focusTrap) {\n        if (!this._listener) {\n            return;\n        }\n        focusTrap._document.removeEventListener('focus', this._listener, true);\n        this._listener = null;\n    }\n    /**\n     * Refocuses the first element in the FocusTrap if the focus event target was outside\n     * the FocusTrap.\n     *\n     * This is an event listener callback. The event listener is added in runOutsideAngular,\n     * so all this code runs outside Angular as well.\n     */\n    _trapFocus(focusTrap, event) {\n        var _a;\n        const target = event.target;\n        const focusTrapRoot = focusTrap._element;\n        // Don't refocus if target was in an overlay, because the overlay might be associated\n        // with an element inside the FocusTrap, ex. mat-select.\n        if (target && !focusTrapRoot.contains(target) && !((_a = target.closest) === null || _a === void 0 ? void 0 : _a.call(target, 'div.cdk-overlay-pane'))) {\n            // Some legacy FocusTrap usages have logic that focuses some element on the page\n            // just before FocusTrap is destroyed. For backwards compatibility, wait\n            // to be sure FocusTrap is still enabled before refocusing.\n            setTimeout(() => {\n                // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n                if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n                    focusTrap.focusFirstTabbableElement();\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\nclass FocusTrapManager {\n    constructor() {\n        // A stack of the FocusTraps on the page. Only the FocusTrap at the\n        // top of the stack is active.\n        this._focusTrapStack = [];\n    }\n    /**\n     * Disables the FocusTrap at the top of the stack, and then pushes\n     * the new FocusTrap onto the stack.\n     */\n    register(focusTrap) {\n        // Dedupe focusTraps that register multiple times.\n        this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n        let stack = this._focusTrapStack;\n        if (stack.length) {\n            stack[stack.length - 1]._disable();\n        }\n        stack.push(focusTrap);\n        focusTrap._enable();\n    }\n    /**\n     * Removes the FocusTrap from the stack, and activates the\n     * FocusTrap that is the new top of the stack.\n     */\n    deregister(focusTrap) {\n        focusTrap._disable();\n        const stack = this._focusTrapStack;\n        const i = stack.indexOf(focusTrap);\n        if (i !== -1) {\n            stack.splice(i, 1);\n            if (stack.length) {\n                stack[stack.length - 1]._enable();\n            }\n        }\n    }\n}\nFocusTrapManager.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FocusTrapManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFocusTrapManager.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FocusTrapManager, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FocusTrapManager, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Factory that allows easy instantiation of configurable focus traps. */\nclass ConfigurableFocusTrapFactory {\n    constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._focusTrapManager = _focusTrapManager;\n        this._document = _document;\n        // TODO split up the strategies into different modules, similar to DateAdapter.\n        this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n    }\n    create(element, config = { defer: false }) {\n        let configObject;\n        if (typeof config === 'boolean') {\n            configObject = { defer: config };\n        }\n        else {\n            configObject = config;\n        }\n        return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n    }\n}\nConfigurableFocusTrapFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ConfigurableFocusTrapFactory, deps: [{ token: InteractivityChecker }, { token: i0.NgZone }, { token: FocusTrapManager }, { token: DOCUMENT }, { token: FOCUS_TRAP_INERT_STRATEGY, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nConfigurableFocusTrapFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ConfigurableFocusTrapFactory, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ConfigurableFocusTrapFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: InteractivityChecker }, { type: i0.NgZone }, { type: FocusTrapManager }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [FOCUS_TRAP_INERT_STRATEGY]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nfunction isFakeMousedownFromScreenReader(event) {\n    // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n    // a clickable element. We can distinguish these events when both `offsetX` and `offsetY` are\n    // zero or `event.buttons` is zero, depending on the browser:\n    // - `event.buttons` works on Firefox, but fails on Chrome.\n    // - `offsetX` and `offsetY` work on Chrome, but fail on Firefox.\n    // Note that there's an edge case where the user could click the 0x0 spot of the\n    // screen themselves, but that is unlikely to contain interactive elements.\n    return event.buttons === 0 || (event.offsetX === 0 && event.offsetY === 0);\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nfunction isFakeTouchstartFromScreenReader(event) {\n    const touch = (event.touches && event.touches[0]) || (event.changedTouches && event.changedTouches[0]);\n    // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n    // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n    // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n    // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n    return (!!touch &&\n        touch.identifier === -1 &&\n        (touch.radiusX == null || touch.radiusX === 1) &&\n        (touch.radiusY == null || touch.radiusY === 1));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\n * options.\n */\nconst INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken('cdk-input-modality-detector-options');\n/**\n * Default options for the InputModalityDetector.\n *\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\n * keyboard input modality) for two reasons:\n *\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\n *    in new tab', and are thus less representative of actual keyboard interaction.\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\n *    these keys so as to not update the input modality.\n *\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\n * distinguish between the two.\n */\nconst INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {\n    ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT],\n};\n/**\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\n * event to be attributed as mouse and not touch.\n *\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n * that a value of around 650ms seems appropriate.\n */\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Event listener options that enable capturing and also mark the listener as passive if the browser\n * supports it.\n */\nconst modalityEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true,\n});\n/**\n * Service that detects the user's input modality.\n *\n * This service does not update the input modality when a user navigates with a screen reader\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\n * input interaction.\n *\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\n * update the input modality to keyboard, but in general this service's behavior is largely\n * undefined.\n */\nclass InputModalityDetector {\n    constructor(_platform, ngZone, document, options) {\n        this._platform = _platform;\n        /**\n         * The most recently detected input modality event target. Is null if no input modality has been\n         * detected or if the associated event target is null for some unknown reason.\n         */\n        this._mostRecentTarget = null;\n        /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n        this._modality = new BehaviorSubject(null);\n        /**\n         * The timestamp of the last touch input modality. Used to determine whether mousedown events\n         * should be attributed to mouse or touch.\n         */\n        this._lastTouchMs = 0;\n        /**\n         * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\n         * bound.\n         */\n        this._onKeydown = (event) => {\n            var _a, _b;\n            // If this is one of the keys we should ignore, then ignore it and don't update the input\n            // modality to keyboard.\n            if ((_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.ignoreKeys) === null || _b === void 0 ? void 0 : _b.some(keyCode => keyCode === event.keyCode)) {\n                return;\n            }\n            this._modality.next('keyboard');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        /**\n         * Handles mousedown events. Must be an arrow function in order to preserve the context when it\n         * gets bound.\n         */\n        this._onMousedown = (event) => {\n            // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n            // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n            // after the previous touch event.\n            if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\n                return;\n            }\n            // Fake mousedown events are fired by some screen readers when controls are activated by the\n            // screen reader. Attribute them to keyboard input modality.\n            this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        /**\n         * Handles touchstart events. Must be an arrow function in order to preserve the context when it\n         * gets bound.\n         */\n        this._onTouchstart = (event) => {\n            // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n            // events are fired. Again, attribute to keyboard input modality.\n            if (isFakeTouchstartFromScreenReader(event)) {\n                this._modality.next('keyboard');\n                return;\n            }\n            // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n            // triggered via mouse vs touch.\n            this._lastTouchMs = Date.now();\n            this._modality.next('touch');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        this._options = Object.assign(Object.assign({}, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS), options);\n        // Skip the first emission as it's null.\n        this.modalityDetected = this._modality.pipe(skip(1));\n        this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());\n        // If we're not in a browser, this service should do nothing, as there's no relevant input\n        // modality to detect.\n        if (_platform.isBrowser) {\n            ngZone.runOutsideAngular(() => {\n                document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n                document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n                document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n            });\n        }\n    }\n    /** The most recently detected input modality. */\n    get mostRecentModality() {\n        return this._modality.value;\n    }\n    ngOnDestroy() {\n        this._modality.complete();\n        if (this._platform.isBrowser) {\n            document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n            document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n            document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n        }\n    }\n}\nInputModalityDetector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: InputModalityDetector, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT }, { token: INPUT_MODALITY_DETECTOR_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nInputModalityDetector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: InputModalityDetector, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: InputModalityDetector, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.Platform }, { type: i0.NgZone }, { type: Document, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [INPUT_MODALITY_DETECTOR_OPTIONS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n});\n/** @docs-private */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n    return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\nclass LiveAnnouncer {\n    constructor(elementToken, _ngZone, _document, _defaultOptions) {\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        // We inject the live element and document as `any` because the constructor signature cannot\n        // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n        // a class decorator causes TypeScript to preserve the constructor signature types.\n        this._document = _document;\n        this._liveElement = elementToken || this._createLiveElement();\n    }\n    announce(message, ...args) {\n        const defaultOptions = this._defaultOptions;\n        let politeness;\n        let duration;\n        if (args.length === 1 && typeof args[0] === 'number') {\n            duration = args[0];\n        }\n        else {\n            [politeness, duration] = args;\n        }\n        this.clear();\n        clearTimeout(this._previousTimeout);\n        if (!politeness) {\n            politeness =\n                defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n        }\n        if (duration == null && defaultOptions) {\n            duration = defaultOptions.duration;\n        }\n        // TODO: ensure changing the politeness works on all environments we support.\n        this._liveElement.setAttribute('aria-live', politeness);\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n        return this._ngZone.runOutsideAngular(() => {\n            if (!this._currentPromise) {\n                this._currentPromise = new Promise(resolve => (this._currentResolve = resolve));\n            }\n            clearTimeout(this._previousTimeout);\n            this._previousTimeout = setTimeout(() => {\n                this._liveElement.textContent = message;\n                if (typeof duration === 'number') {\n                    this._previousTimeout = setTimeout(() => this.clear(), duration);\n                }\n                this._currentResolve();\n                this._currentPromise = this._currentResolve = undefined;\n            }, 100);\n            return this._currentPromise;\n        });\n    }\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     */\n    clear() {\n        if (this._liveElement) {\n            this._liveElement.textContent = '';\n        }\n    }\n    ngOnDestroy() {\n        var _a, _b;\n        clearTimeout(this._previousTimeout);\n        (_a = this._liveElement) === null || _a === void 0 ? void 0 : _a.remove();\n        this._liveElement = null;\n        (_b = this._currentResolve) === null || _b === void 0 ? void 0 : _b.call(this);\n        this._currentPromise = this._currentResolve = undefined;\n    }\n    _createLiveElement() {\n        const elementClass = 'cdk-live-announcer-element';\n        const previousElements = this._document.getElementsByClassName(elementClass);\n        const liveEl = this._document.createElement('div');\n        // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n        for (let i = 0; i < previousElements.length; i++) {\n            previousElements[i].remove();\n        }\n        liveEl.classList.add(elementClass);\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n        this._document.body.appendChild(liveEl);\n        return liveEl;\n    }\n}\nLiveAnnouncer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: LiveAnnouncer, deps: [{ token: LIVE_ANNOUNCER_ELEMENT_TOKEN, optional: true }, { token: i0.NgZone }, { token: DOCUMENT }, { token: LIVE_ANNOUNCER_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nLiveAnnouncer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: LiveAnnouncer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: LiveAnnouncer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n                    }] }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nclass CdkAriaLive {\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n        this._elementRef = _elementRef;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._contentObserver = _contentObserver;\n        this._ngZone = _ngZone;\n        this._politeness = 'polite';\n    }\n    /** The aria-live politeness level to use when announcing messages. */\n    get politeness() {\n        return this._politeness;\n    }\n    set politeness(value) {\n        this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n        if (this._politeness === 'off') {\n            if (this._subscription) {\n                this._subscription.unsubscribe();\n                this._subscription = null;\n            }\n        }\n        else if (!this._subscription) {\n            this._subscription = this._ngZone.runOutsideAngular(() => {\n                return this._contentObserver.observe(this._elementRef).subscribe(() => {\n                    // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n                    const elementText = this._elementRef.nativeElement.textContent;\n                    // The `MutationObserver` fires also for attribute\n                    // changes which we don't want to announce.\n                    if (elementText !== this._previousAnnouncedText) {\n                        this._liveAnnouncer.announce(elementText, this._politeness);\n                        this._previousAnnouncedText = elementText;\n                    }\n                });\n            });\n        }\n    }\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n    }\n}\nCdkAriaLive.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkAriaLive, deps: [{ token: i0.ElementRef }, { token: LiveAnnouncer }, { token: i1$1.ContentObserver }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nCdkAriaLive.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkAriaLive, selector: \"[cdkAriaLive]\", inputs: { politeness: [\"cdkAriaLive\", \"politeness\"] }, exportAs: [\"cdkAriaLive\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkAriaLive, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAriaLive]',\n                    exportAs: 'cdkAriaLive',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: LiveAnnouncer }, { type: i1$1.ContentObserver }, { type: i0.NgZone }]; }, propDecorators: { politeness: [{\n                type: Input,\n                args: ['cdkAriaLive']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** InjectionToken for FocusMonitorOptions. */\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true,\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\nclass FocusMonitor {\n    constructor(_ngZone, _platform, _inputModalityDetector, \n    /** @breaking-change 11.0.0 make document required */\n    document, options) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._inputModalityDetector = _inputModalityDetector;\n        /** The focus origin that the next focus event is a result of. */\n        this._origin = null;\n        /** Whether the window has just been focused. */\n        this._windowFocused = false;\n        /**\n         * Whether the origin was determined via a touch interaction. Necessary as properly attributing\n         * focus events to touch interactions requires special logic.\n         */\n        this._originFromTouchInteraction = false;\n        /** Map of elements being monitored to their info. */\n        this._elementInfo = new Map();\n        /** The number of elements currently being monitored. */\n        this._monitoredElementCount = 0;\n        /**\n         * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n         * as well as the number of monitored elements that they contain. We have to treat focus/blur\n         * handlers differently from the rest of the events, because the browser won't emit events\n         * to the document when focus moves inside of a shadow root.\n         */\n        this._rootNodeFocusListenerCount = new Map();\n        /**\n         * Event listener for `focus` events on the window.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._windowFocusListener = () => {\n            // Make a note of when the window regains focus, so we can\n            // restore the origin info for the focused element.\n            this._windowFocused = true;\n            this._windowFocusTimeoutId = window.setTimeout(() => (this._windowFocused = false));\n        };\n        /** Subject for stopping our InputModalityDetector subscription. */\n        this._stopInputModalityDetector = new Subject();\n        /**\n         * Event listener for `focus` and 'blur' events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._rootNodeFocusAndBlurListener = (event) => {\n            const target = _getEventTarget(event);\n            const handler = event.type === 'focus' ? this._onFocus : this._onBlur;\n            // We need to walk up the ancestor chain in order to support `checkChildren`.\n            for (let element = target; element; element = element.parentElement) {\n                handler.call(this, event, element);\n            }\n        };\n        this._document = document;\n        this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0 /* IMMEDIATE */;\n    }\n    monitor(element, checkChildren = false) {\n        const nativeElement = coerceElement(element);\n        // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n        if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n            return of(null);\n        }\n        // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n        // the shadow root, rather than the `document`, because the browser won't emit focus events\n        // to the `document`, if focus is moving within the same shadow root.\n        const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n        const cachedInfo = this._elementInfo.get(nativeElement);\n        // Check if we're already monitoring this element.\n        if (cachedInfo) {\n            if (checkChildren) {\n                // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n                // observers into ones that behave as if `checkChildren` was turned on. We need a more\n                // robust solution.\n                cachedInfo.checkChildren = true;\n            }\n            return cachedInfo.subject;\n        }\n        // Create monitored element info.\n        const info = {\n            checkChildren: checkChildren,\n            subject: new Subject(),\n            rootNode,\n        };\n        this._elementInfo.set(nativeElement, info);\n        this._registerGlobalListeners(info);\n        return info.subject;\n    }\n    stopMonitoring(element) {\n        const nativeElement = coerceElement(element);\n        const elementInfo = this._elementInfo.get(nativeElement);\n        if (elementInfo) {\n            elementInfo.subject.complete();\n            this._setClasses(nativeElement);\n            this._elementInfo.delete(nativeElement);\n            this._removeGlobalListeners(elementInfo);\n        }\n    }\n    focusVia(element, origin, options) {\n        const nativeElement = coerceElement(element);\n        const focusedElement = this._getDocument().activeElement;\n        // If the element is focused already, calling `focus` again won't trigger the event listener\n        // which means that the focus classes won't be updated. If that's the case, update the classes\n        // directly without waiting for an event.\n        if (nativeElement === focusedElement) {\n            this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\n        }\n        else {\n            this._setOrigin(origin);\n            // `focus` isn't available on the server\n            if (typeof nativeElement.focus === 'function') {\n                nativeElement.focus(options);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    _getFocusOrigin(focusEventTarget) {\n        if (this._origin) {\n            // If the origin was realized via a touch interaction, we need to perform additional checks\n            // to determine whether the focus origin should be attributed to touch or program.\n            if (this._originFromTouchInteraction) {\n                return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n            }\n            else {\n                return this._origin;\n            }\n        }\n        // If the window has just regained focus, we can restore the most recent origin from before the\n        // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n        // focus. This typically means one of two things happened:\n        //\n        // 1) The element was programmatically focused, or\n        // 2) The element was focused via screen reader navigation (which generally doesn't fire\n        //    events).\n        //\n        // Because we can't distinguish between these two cases, we default to setting `program`.\n        return this._windowFocused && this._lastFocusOrigin ? this._lastFocusOrigin : 'program';\n    }\n    /**\n     * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\n     * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\n     * handle a focus event following a touch interaction, we need to determine whether (1) the focus\n     * event was directly caused by the touch interaction or (2) the focus event was caused by a\n     * subsequent programmatic focus call triggered by the touch interaction.\n     * @param focusEventTarget The target of the focus event under examination.\n     */\n    _shouldBeAttributedToTouch(focusEventTarget) {\n        // Please note that this check is not perfect. Consider the following edge case:\n        //\n        // <div #parent tabindex=\"0\">\n        //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n        // #child, #parent is programmatically focused. This code will attribute the focus to touch\n        // instead of program. This is a relatively minor edge-case that can be worked around by using\n        // focusVia(parent, 'program') to focus #parent.\n        return (this._detectionMode === 1 /* EVENTUAL */ ||\n            !!(focusEventTarget === null || focusEventTarget === void 0 ? void 0 : focusEventTarget.contains(this._inputModalityDetector._mostRecentTarget)));\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n    _setClasses(element, origin) {\n        element.classList.toggle('cdk-focused', !!origin);\n        element.classList.toggle('cdk-touch-focused', origin === 'touch');\n        element.classList.toggle('cdk-keyboard-focused', origin === 'keyboard');\n        element.classList.toggle('cdk-mouse-focused', origin === 'mouse');\n        element.classList.toggle('cdk-program-focused', origin === 'program');\n    }\n    /**\n     * Updates the focus origin. If we're using immediate detection mode, we schedule an async\n     * function to clear the origin at the end of a timeout. The duration of the timeout depends on\n     * the origin being set.\n     * @param origin The origin to set.\n     * @param isFromInteraction Whether we are setting the origin from an interaction event.\n     */\n    _setOrigin(origin, isFromInteraction = false) {\n        this._ngZone.runOutsideAngular(() => {\n            this._origin = origin;\n            this._originFromTouchInteraction = origin === 'touch' && isFromInteraction;\n            // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n            // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n            // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n            // a touch event because when a touch event is fired, the associated focus event isn't yet in\n            // the event queue. Before doing so, clear any pending timeouts.\n            if (this._detectionMode === 0 /* IMMEDIATE */) {\n                clearTimeout(this._originTimeoutId);\n                const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n                this._originTimeoutId = setTimeout(() => (this._origin = null), ms);\n            }\n        });\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n    _onFocus(event, element) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        const elementInfo = this._elementInfo.get(element);\n        const focusEventTarget = _getEventTarget(event);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== focusEventTarget)) {\n            return;\n        }\n        this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n    _onBlur(event, element) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo ||\n            (elementInfo.checkChildren &&\n                event.relatedTarget instanceof Node &&\n                element.contains(event.relatedTarget))) {\n            return;\n        }\n        this._setClasses(element);\n        this._emitOrigin(elementInfo.subject, null);\n    }\n    _emitOrigin(subject, origin) {\n        this._ngZone.run(() => subject.next(origin));\n    }\n    _registerGlobalListeners(elementInfo) {\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        const rootNode = elementInfo.rootNode;\n        const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n        if (!rootNodeFocusListeners) {\n            this._ngZone.runOutsideAngular(() => {\n                rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n            });\n        }\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount === 1) {\n            // Note: we listen to events in the capture phase so we\n            // can detect them even if the user stops propagation.\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                window.addEventListener('focus', this._windowFocusListener);\n            });\n            // The InputModalityDetector is also just a collection of global listeners.\n            this._inputModalityDetector.modalityDetected\n                .pipe(takeUntil(this._stopInputModalityDetector))\n                .subscribe(modality => {\n                this._setOrigin(modality, true /* isFromInteraction */);\n            });\n        }\n    }\n    _removeGlobalListeners(elementInfo) {\n        const rootNode = elementInfo.rootNode;\n        if (this._rootNodeFocusListenerCount.has(rootNode)) {\n            const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n            if (rootNodeFocusListeners > 1) {\n                this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n            }\n            else {\n                rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                this._rootNodeFocusListenerCount.delete(rootNode);\n            }\n        }\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            const window = this._getWindow();\n            window.removeEventListener('focus', this._windowFocusListener);\n            // Equivalently, stop our InputModalityDetector subscription.\n            this._stopInputModalityDetector.next();\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        }\n    }\n    /** Updates all the state on an element once its focus origin has changed. */\n    _originChanged(element, origin, elementInfo) {\n        this._setClasses(element, origin);\n        this._emitOrigin(elementInfo.subject, origin);\n        this._lastFocusOrigin = origin;\n    }\n    /**\n     * Collects the `MonitoredElementInfo` of a particular element and\n     * all of its ancestors that have enabled `checkChildren`.\n     * @param element Element from which to start the search.\n     */\n    _getClosestElementsInfo(element) {\n        const results = [];\n        this._elementInfo.forEach((info, currentElement) => {\n            if (currentElement === element || (info.checkChildren && currentElement.contains(element))) {\n                results.push([currentElement, info]);\n            }\n        });\n        return results;\n    }\n}\nFocusMonitor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FocusMonitor, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: InputModalityDetector }, { token: DOCUMENT, optional: true }, { token: FOCUS_MONITOR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nFocusMonitor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FocusMonitor, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FocusMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: i1.Platform }, { type: InputModalityDetector }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nclass CdkMonitorFocus {\n    constructor(_elementRef, _focusMonitor) {\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this.cdkFocusChange = new EventEmitter();\n    }\n    ngAfterViewInit() {\n        const element = this._elementRef.nativeElement;\n        this._monitorSubscription = this._focusMonitor\n            .monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe(origin => this.cdkFocusChange.emit(origin));\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        if (this._monitorSubscription) {\n            this._monitorSubscription.unsubscribe();\n        }\n    }\n}\nCdkMonitorFocus.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkMonitorFocus, deps: [{ token: i0.ElementRef }, { token: FocusMonitor }], target: i0.ɵɵFactoryTarget.Directive });\nCdkMonitorFocus.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkMonitorFocus, selector: \"[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]\", outputs: { cdkFocusChange: \"cdkFocusChange\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkMonitorFocus, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: FocusMonitor }]; }, propDecorators: { cdkFocusChange: [{\n                type: Output\n            }] } });\n\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\nclass HighContrastModeDetector {\n    constructor(_platform, document) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    /** Gets the current high-contrast-mode for the page. */\n    getHighContrastMode() {\n        if (!this._platform.isBrowser) {\n            return 0 /* NONE */;\n        }\n        // Create a test element with an arbitrary background-color that is neither black nor\n        // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n        // appending the test element to the DOM does not affect layout by absolutely positioning it\n        const testElement = this._document.createElement('div');\n        testElement.style.backgroundColor = 'rgb(1,2,3)';\n        testElement.style.position = 'absolute';\n        this._document.body.appendChild(testElement);\n        // Get the computed style for the background color, collapsing spaces to normalize between\n        // browsers. Once we get this color, we no longer need the test element. Access the `window`\n        // via the document so we can fake it in tests. Note that we have extra null checks, because\n        // this logic will likely run during app bootstrap and throwing can break the entire app.\n        const documentWindow = this._document.defaultView || window;\n        const computedStyle = documentWindow && documentWindow.getComputedStyle\n            ? documentWindow.getComputedStyle(testElement)\n            : null;\n        const computedColor = ((computedStyle && computedStyle.backgroundColor) || '').replace(/ /g, '');\n        testElement.remove();\n        switch (computedColor) {\n            case 'rgb(0,0,0)':\n                return 2 /* WHITE_ON_BLACK */;\n            case 'rgb(255,255,255)':\n                return 1 /* BLACK_ON_WHITE */;\n        }\n        return 0 /* NONE */;\n    }\n    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n    _applyBodyHighContrastModeCssClasses() {\n        if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n            const bodyClasses = this._document.body.classList;\n            // IE11 doesn't support `classList` operations with multiple arguments\n            bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n            bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\n            bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\n            this._hasCheckedHighContrastMode = true;\n            const mode = this.getHighContrastMode();\n            if (mode === 1 /* BLACK_ON_WHITE */) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n                bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\n            }\n            else if (mode === 2 /* WHITE_ON_BLACK */) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n                bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\n            }\n        }\n    }\n}\nHighContrastModeDetector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: HighContrastModeDetector, deps: [{ token: i1.Platform }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nHighContrastModeDetector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: HighContrastModeDetector, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: HighContrastModeDetector, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.Platform }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass A11yModule {\n    constructor(highContrastModeDetector) {\n        highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n    }\n}\nA11yModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: A11yModule, deps: [{ token: HighContrastModeDetector }], target: i0.ɵɵFactoryTarget.NgModule });\nA11yModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: A11yModule, declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus], imports: [ObserversModule], exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus] });\nA11yModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: A11yModule, imports: [[ObserversModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: A11yModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ObserversModule],\n                    declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                    exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                }]\n        }], ctorParameters: function () { return [{ type: HighContrastModeDetector }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS, INPUT_MODALITY_DETECTOR_OPTIONS, InputModalityDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader };\n","import * as i0 from '@angular/core';\nimport { Version, InjectionToken, NgModule, Optional, Inject, inject, LOCALE_ID, Injectable, Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, EventEmitter, Output } from '@angular/core';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { VERSION as VERSION$1 } from '@angular/cdk';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { _isTestEnvironment, normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i1 from '@angular/cdk/a11y';\nimport { isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport { Subject, Observable } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Current version of Angular Material. */\nconst VERSION = new Version('13.3.5');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nclass AnimationCurves {\n}\nAnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\nAnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\nAnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\nAnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n/** @docs-private */\nclass AnimationDurations {\n}\nAnimationDurations.COMPLEX = '375ms';\nAnimationDurations.ENTERING = '225ms';\nAnimationDurations.EXITING = '195ms';\n\n/** @docs-private */\nfunction MATERIAL_SANITY_CHECKS_FACTORY() {\n    return true;\n}\n/** Injection token that configures whether the Material sanity checks are enabled. */\nconst MATERIAL_SANITY_CHECKS = new InjectionToken('mat-sanity-checks', {\n    providedIn: 'root',\n    factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\nclass MatCommonModule {\n    constructor(highContrastModeDetector, _sanityChecks, _document) {\n        this._sanityChecks = _sanityChecks;\n        this._document = _document;\n        /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n        this._hasDoneGlobalChecks = false;\n        // While A11yModule also does this, we repeat it here to avoid importing A11yModule\n        // in MatCommonModule.\n        highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n        if (!this._hasDoneGlobalChecks) {\n            this._hasDoneGlobalChecks = true;\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                if (this._checkIsEnabled('doctype')) {\n                    _checkDoctypeIsDefined(this._document);\n                }\n                if (this._checkIsEnabled('theme')) {\n                    _checkThemeIsPresent(this._document);\n                }\n                if (this._checkIsEnabled('version')) {\n                    _checkCdkVersionMatch();\n                }\n            }\n        }\n    }\n    /** Gets whether a specific sanity check is enabled. */\n    _checkIsEnabled(name) {\n        if (_isTestEnvironment()) {\n            return false;\n        }\n        if (typeof this._sanityChecks === 'boolean') {\n            return this._sanityChecks;\n        }\n        return !!this._sanityChecks[name];\n    }\n}\nMatCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCommonModule, deps: [{ token: i1.HighContrastModeDetector }, { token: MATERIAL_SANITY_CHECKS, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.NgModule });\nMatCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCommonModule, imports: [BidiModule], exports: [BidiModule] });\nMatCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCommonModule, imports: [[BidiModule], BidiModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCommonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule],\n                    exports: [BidiModule],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i1.HighContrastModeDetector }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MATERIAL_SANITY_CHECKS]\n                    }] }, { type: Document, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n/** Checks that the page has a doctype. */\nfunction _checkDoctypeIsDefined(doc) {\n    if (!doc.doctype) {\n        console.warn('Current document does not have a doctype. This may cause ' +\n            'some Angular Material components not to behave as expected.');\n    }\n}\n/** Checks that a theme has been included. */\nfunction _checkThemeIsPresent(doc) {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!doc.body || typeof getComputedStyle !== 'function') {\n        return;\n    }\n    const testElement = doc.createElement('div');\n    testElement.classList.add('mat-theme-loaded-marker');\n    doc.body.appendChild(testElement);\n    const computedStyle = getComputedStyle(testElement);\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n        console.warn('Could not find Angular Material core theme. Most Material ' +\n            'components may not work as expected. For more info refer ' +\n            'to the theming guide: https://material.angular.io/guide/theming');\n    }\n    testElement.remove();\n}\n/** Checks whether the Material version matches the CDK version. */\nfunction _checkCdkVersionMatch() {\n    if (VERSION.full !== VERSION$1.full) {\n        console.warn('The Angular Material version (' +\n            VERSION.full +\n            ') does not match ' +\n            'the Angular CDK version (' +\n            VERSION$1.full +\n            ').\\n' +\n            'Please ensure the versions of these two packages exactly match.');\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction mixinDisabled(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._disabled = false;\n        }\n        get disabled() {\n            return this._disabled;\n        }\n        set disabled(value) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction mixinColor(base, defaultColor) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this.defaultColor = defaultColor;\n            // Set the default color that can be specified from the mixin.\n            this.color = defaultColor;\n        }\n        get color() {\n            return this._color;\n        }\n        set color(value) {\n            const colorPalette = value || this.defaultColor;\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n                }\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n                }\n                this._color = colorPalette;\n            }\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction mixinDisableRipple(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._disableRipple = false;\n        }\n        /** Whether the ripple effect is disabled or not. */\n        get disableRipple() {\n            return this._disableRipple;\n        }\n        set disableRipple(value) {\n            this._disableRipple = coerceBooleanProperty(value);\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction mixinTabIndex(base, defaultTabIndex = 0) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._tabIndex = defaultTabIndex;\n            this.defaultTabIndex = defaultTabIndex;\n        }\n        get tabIndex() {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n        set tabIndex(value) {\n            // If the specified tabIndex value is null or undefined, fall back to the default value.\n            this._tabIndex = value != null ? coerceNumberProperty(value) : this.defaultTabIndex;\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction mixinErrorState(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            // This class member exists as an interop with `MatFormFieldControl` which expects\n            // a public `stateChanges` observable to emit whenever the form field should be updated.\n            // The description is not specifically mentioning the error state, as classes using this\n            // mixin can/should emit an event in other cases too.\n            /** Emits whenever the component state changes. */\n            this.stateChanges = new Subject();\n            /** Whether the component is in an error state. */\n            this.errorState = false;\n        }\n        /** Updates the error state based on the provided error state matcher. */\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control : null;\n            const newState = matcher.isErrorState(control, parent);\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nfunction mixinInitialized(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            /** Whether this directive has been marked as initialized. */\n            this._isInitialized = false;\n            /**\n             * List of subscribers that subscribed before the directive was initialized. Should be notified\n             * during _markInitialized. Set to null after pending subscribers are notified, and should\n             * not expect to be populated after.\n             */\n            this._pendingSubscribers = [];\n            /**\n             * Observable stream that emits when the directive initializes. If already initialized, the\n             * subscriber is stored to be notified once _markInitialized is called.\n             */\n            this.initialized = new Observable(subscriber => {\n                // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n                // when _markInitialized is called.\n                if (this._isInitialized) {\n                    this._notifySubscriber(subscriber);\n                }\n                else {\n                    this._pendingSubscribers.push(subscriber);\n                }\n            });\n        }\n        /**\n         * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n         * of ngOnInit.\n         * @docs-private\n         */\n        _markInitialized() {\n            if (this._isInitialized && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('This directive has already been marked as initialized and ' +\n                    'should not be called twice.');\n            }\n            this._isInitialized = true;\n            this._pendingSubscribers.forEach(this._notifySubscriber);\n            this._pendingSubscribers = null;\n        }\n        /** Emits and completes the subscriber stream (should only emit once). */\n        _notifySubscriber(subscriber) {\n            subscriber.next();\n            subscriber.complete();\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** InjectionToken for datepicker that can be used to override default locale code. */\nconst MAT_DATE_LOCALE = new InjectionToken('MAT_DATE_LOCALE', {\n    providedIn: 'root',\n    factory: MAT_DATE_LOCALE_FACTORY,\n});\n/** @docs-private */\nfunction MAT_DATE_LOCALE_FACTORY() {\n    return inject(LOCALE_ID);\n}\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nclass DateAdapter {\n    constructor() {\n        this._localeChanges = new Subject();\n        /** A stream that emits when the locale changes. */\n        this.localeChanges = this._localeChanges;\n    }\n    /**\n     * Given a potential date object, returns that same date object if it is\n     * a valid date, or `null` if it's not a valid date.\n     * @param obj The object to check.\n     * @returns A date or `null`.\n     */\n    getValidDateOrNull(obj) {\n        return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;\n    }\n    /**\n     * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n     * string). The default implementation does not allow any deserialization, it simply checks that\n     * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n     * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n     * support passing values from your backend directly to these properties by overriding this method\n     * to also deserialize the format used by your backend.\n     * @param value The value to be deserialized into a date object.\n     * @returns The deserialized date object, either a valid date, null if the value can be\n     *     deserialized into a null date (e.g. the empty string), or an invalid date.\n     */\n    deserialize(value) {\n        if (value == null || (this.isDateInstance(value) && this.isValid(value))) {\n            return value;\n        }\n        return this.invalid();\n    }\n    /**\n     * Sets the locale used for all dates.\n     * @param locale The new locale.\n     */\n    setLocale(locale) {\n        this.locale = locale;\n        this._localeChanges.next();\n    }\n    /**\n     * Compares two dates.\n     * @param first The first date to compare.\n     * @param second The second date to compare.\n     * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n     *     a number greater than 0 if the first date is later.\n     */\n    compareDate(first, second) {\n        return (this.getYear(first) - this.getYear(second) ||\n            this.getMonth(first) - this.getMonth(second) ||\n            this.getDate(first) - this.getDate(second));\n    }\n    /**\n     * Checks if two dates are equal.\n     * @param first The first date to check.\n     * @param second The second date to check.\n     * @returns Whether the two dates are equal.\n     *     Null dates are considered equal to other null dates.\n     */\n    sameDate(first, second) {\n        if (first && second) {\n            let firstValid = this.isValid(first);\n            let secondValid = this.isValid(second);\n            if (firstValid && secondValid) {\n                return !this.compareDate(first, second);\n            }\n            return firstValid == secondValid;\n        }\n        return first == second;\n    }\n    /**\n     * Clamp the given date between min and max dates.\n     * @param date The date to clamp.\n     * @param min The minimum value to allow. If null or omitted no min is enforced.\n     * @param max The maximum value to allow. If null or omitted no max is enforced.\n     * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n     *     otherwise `date`.\n     */\n    clampDate(date, min, max) {\n        if (min && this.compareDate(date, min) < 0) {\n            return min;\n        }\n        if (max && this.compareDate(date, max) > 0) {\n            return max;\n        }\n        return date;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_DATE_FORMATS = new InjectionToken('mat-date-formats');\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n    const valuesArray = Array(length);\n    for (let i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\nclass NativeDateAdapter extends DateAdapter {\n    constructor(matDateLocale, \n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    _platform) {\n        super();\n        /**\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 14.0.0\n         */\n        this.useUtcForDisplay = false;\n        super.setLocale(matDateLocale);\n    }\n    getYear(date) {\n        return date.getFullYear();\n    }\n    getMonth(date) {\n        return date.getMonth();\n    }\n    getDate(date) {\n        return date.getDate();\n    }\n    getDayOfWeek(date) {\n        return date.getDay();\n    }\n    getMonthNames(style) {\n        const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\n        return range(12, i => this._format(dtf, new Date(2017, i, 1)));\n    }\n    getDateNames() {\n        const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\n        return range(31, i => this._format(dtf, new Date(2017, 0, i + 1)));\n    }\n    getDayOfWeekNames(style) {\n        const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\n        return range(7, i => this._format(dtf, new Date(2017, 0, i + 1)));\n    }\n    getYearName(date) {\n        const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\n        return this._format(dtf, date);\n    }\n    getFirstDayOfWeek() {\n        // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n        return 0;\n    }\n    getNumDaysInMonth(date) {\n        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n    }\n    clone(date) {\n        return new Date(date.getTime());\n    }\n    createDate(year, month, date) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            // Check for invalid month and date (except upper bound on date which we have to check after\n            // creating the Date).\n            if (month < 0 || month > 11) {\n                throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n            }\n            if (date < 1) {\n                throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n            }\n        }\n        let result = this._createDateWithOverflow(year, month, date);\n        // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n        if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n        }\n        return result;\n    }\n    today() {\n        return new Date();\n    }\n    parse(value) {\n        // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n        // parameters.\n        if (typeof value == 'number') {\n            return new Date(value);\n        }\n        return value ? new Date(Date.parse(value)) : null;\n    }\n    format(date, displayFormat) {\n        if (!this.isValid(date)) {\n            throw Error('NativeDateAdapter: Cannot format invalid date.');\n        }\n        const dtf = new Intl.DateTimeFormat(this.locale, Object.assign(Object.assign({}, displayFormat), { timeZone: 'utc' }));\n        return this._format(dtf, date);\n    }\n    addCalendarYears(date, years) {\n        return this.addCalendarMonths(date, years * 12);\n    }\n    addCalendarMonths(date, months) {\n        let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n        // It's possible to wind up in the wrong month if the original month has more days than the new\n        // month. In this case we want to go to the last day of the desired month.\n        // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n        // guarantee this.\n        if (this.getMonth(newDate) != (((this.getMonth(date) + months) % 12) + 12) % 12) {\n            newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n        }\n        return newDate;\n    }\n    addCalendarDays(date, days) {\n        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n    }\n    toIso8601(date) {\n        return [\n            date.getUTCFullYear(),\n            this._2digit(date.getUTCMonth() + 1),\n            this._2digit(date.getUTCDate()),\n        ].join('-');\n    }\n    /**\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n     * invalid date for all other values.\n     */\n    deserialize(value) {\n        if (typeof value === 'string') {\n            if (!value) {\n                return null;\n            }\n            // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n            // string is the right format first.\n            if (ISO_8601_REGEX.test(value)) {\n                let date = new Date(value);\n                if (this.isValid(date)) {\n                    return date;\n                }\n            }\n        }\n        return super.deserialize(value);\n    }\n    isDateInstance(obj) {\n        return obj instanceof Date;\n    }\n    isValid(date) {\n        return !isNaN(date.getTime());\n    }\n    invalid() {\n        return new Date(NaN);\n    }\n    /** Creates a date but allows the month and date to overflow. */\n    _createDateWithOverflow(year, month, date) {\n        // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n        // To work around this we use `setFullYear` and `setHours` instead.\n        const d = new Date();\n        d.setFullYear(year, month, date);\n        d.setHours(0, 0, 0, 0);\n        return d;\n    }\n    /**\n     * Pads a number to make it two digits.\n     * @param n The number to pad.\n     * @returns The padded number.\n     */\n    _2digit(n) {\n        return ('00' + n).slice(-2);\n    }\n    /**\n     * When converting Date object to string, javascript built-in functions may return wrong\n     * results because it applies its internal DST rules. The DST rules around the world change\n     * very frequently, and the current valid rule is not always valid in previous years though.\n     * We work around this problem building a new Date object which has its internal UTC\n     * representation with the local date and time.\n     * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n     *    timeZone set to 'utc' to work fine.\n     * @param date Date from which we want to get the string representation according to dtf\n     * @returns A Date object with its UTC representation based on the passed in date info\n     */\n    _format(dtf, date) {\n        // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n        // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n        const d = new Date();\n        d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n        d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n        return dtf.format(d);\n    }\n}\nNativeDateAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: NativeDateAdapter, deps: [{ token: MAT_DATE_LOCALE, optional: true }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nNativeDateAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: NativeDateAdapter });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: NativeDateAdapter, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DATE_LOCALE]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_NATIVE_DATE_FORMATS = {\n    parse: {\n        dateInput: null,\n    },\n    display: {\n        dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },\n        monthYearLabel: { year: 'numeric', month: 'short' },\n        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\n        monthYearA11yLabel: { year: 'numeric', month: 'long' },\n    },\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass NativeDateModule {\n}\nNativeDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: NativeDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNativeDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: NativeDateModule });\nNativeDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: NativeDateModule, providers: [{ provide: DateAdapter, useClass: NativeDateAdapter }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: NativeDateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [{ provide: DateAdapter, useClass: NativeDateAdapter }],\n                }]\n        }] });\nclass MatNativeDateModule {\n}\nMatNativeDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatNativeDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatNativeDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatNativeDateModule, imports: [NativeDateModule] });\nMatNativeDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatNativeDateModule, providers: [{ provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS }], imports: [[NativeDateModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatNativeDateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [NativeDateModule],\n                    providers: [{ provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS }],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Error state matcher that matches when a control is invalid and dirty. */\nclass ShowOnDirtyErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\nShowOnDirtyErrorStateMatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nShowOnDirtyErrorStateMatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, decorators: [{\n            type: Injectable\n        }] });\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nclass ErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\nErrorStateMatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nErrorStateMatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ErrorStateMatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ErrorStateMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nclass MatLine {\n}\nMatLine.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatLine, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatLine.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatLine, selector: \"[mat-line], [matLine]\", host: { classAttribute: \"mat-line\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatLine, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-line], [matLine]',\n                    host: { 'class': 'mat-line' },\n                }]\n        }] });\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nfunction setLines(lines, element, prefix = 'mat') {\n    // Note: doesn't need to unsubscribe, because `changes`\n    // gets completed by Angular when the view is destroyed.\n    lines.changes.pipe(startWith(lines)).subscribe(({ length }) => {\n        setClass(element, `${prefix}-2-line`, false);\n        setClass(element, `${prefix}-3-line`, false);\n        setClass(element, `${prefix}-multi-line`, false);\n        if (length === 2 || length === 3) {\n            setClass(element, `${prefix}-${length}-line`, true);\n        }\n        else if (length > 3) {\n            setClass(element, `${prefix}-multi-line`, true);\n        }\n    });\n}\n/** Adds or removes a class from an element. */\nfunction setClass(element, className, isAdd) {\n    element.nativeElement.classList.toggle(className, isAdd);\n}\nclass MatLineModule {\n}\nMatLineModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatLineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatLineModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatLineModule, declarations: [MatLine], imports: [MatCommonModule], exports: [MatLine, MatCommonModule] });\nMatLineModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatLineModule, imports: [[MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatLineModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatLine, MatCommonModule],\n                    declarations: [MatLine],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to a previously launched ripple element.\n */\nclass RippleRef {\n    constructor(_renderer, \n    /** Reference to the ripple HTML element. */\n    element, \n    /** Ripple configuration used for the ripple. */\n    config) {\n        this._renderer = _renderer;\n        this.element = element;\n        this.config = config;\n        /** Current state of the ripple. */\n        this.state = 3 /* HIDDEN */;\n    }\n    /** Fades out the ripple element. */\n    fadeOut() {\n        this._renderer.fadeOutRipple(this);\n    }\n}\n\n// TODO: import these values from `@material/ripple` eventually.\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nconst defaultRippleAnimationConfig = {\n    enterDuration: 225,\n    exitDuration: 150,\n};\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({ passive: true });\n/** Events that signal that the pointer is down. */\nconst pointerDownEvents = ['mousedown', 'touchstart'];\n/** Events that signal that the pointer is up. */\nconst pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nclass RippleRenderer {\n    constructor(_target, _ngZone, elementOrElementRef, platform) {\n        this._target = _target;\n        this._ngZone = _ngZone;\n        /** Whether the pointer is currently down or not. */\n        this._isPointerDown = false;\n        /** Set of currently active ripple references. */\n        this._activeRipples = new Set();\n        /** Whether pointer-up event listeners have been registered. */\n        this._pointerUpEventsRegistered = false;\n        // Only do anything if we're on the browser.\n        if (platform.isBrowser) {\n            this._containerElement = coerceElement(elementOrElementRef);\n        }\n    }\n    /**\n     * Fades in a ripple at the given coordinates.\n     * @param x Coordinate within the element, along the X axis at which to start the ripple.\n     * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n     * @param config Extra ripple options.\n     */\n    fadeInRipple(x, y, config = {}) {\n        const containerRect = (this._containerRect =\n            this._containerRect || this._containerElement.getBoundingClientRect());\n        const animationConfig = Object.assign(Object.assign({}, defaultRippleAnimationConfig), config.animation);\n        if (config.centered) {\n            x = containerRect.left + containerRect.width / 2;\n            y = containerRect.top + containerRect.height / 2;\n        }\n        const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n        const offsetX = x - containerRect.left;\n        const offsetY = y - containerRect.top;\n        const duration = animationConfig.enterDuration;\n        const ripple = document.createElement('div');\n        ripple.classList.add('mat-ripple-element');\n        ripple.style.left = `${offsetX - radius}px`;\n        ripple.style.top = `${offsetY - radius}px`;\n        ripple.style.height = `${radius * 2}px`;\n        ripple.style.width = `${radius * 2}px`;\n        // If a custom color has been specified, set it as inline style. If no color is\n        // set, the default color will be applied through the ripple theme styles.\n        if (config.color != null) {\n            ripple.style.backgroundColor = config.color;\n        }\n        ripple.style.transitionDuration = `${duration}ms`;\n        this._containerElement.appendChild(ripple);\n        // By default the browser does not recalculate the styles of dynamically created\n        // ripple elements. This is critical because then the `scale` would not animate properly.\n        enforceStyleRecalculation(ripple);\n        ripple.style.transform = 'scale(1)';\n        // Exposed reference to the ripple that will be returned.\n        const rippleRef = new RippleRef(this, ripple, config);\n        rippleRef.state = 0 /* FADING_IN */;\n        // Add the ripple reference to the list of all active ripples.\n        this._activeRipples.add(rippleRef);\n        if (!config.persistent) {\n            this._mostRecentTransientRipple = rippleRef;\n        }\n        // Wait for the ripple element to be completely faded in.\n        // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n        this._runTimeoutOutsideZone(() => {\n            const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n            rippleRef.state = 1 /* VISIBLE */;\n            // When the timer runs out while the user has kept their pointer down, we want to\n            // keep only the persistent ripples and the latest transient ripple. We do this,\n            // because we don't want stacked transient ripples to appear after their enter\n            // animation has finished.\n            if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n                rippleRef.fadeOut();\n            }\n        }, duration);\n        return rippleRef;\n    }\n    /** Fades out a ripple reference. */\n    fadeOutRipple(rippleRef) {\n        const wasActive = this._activeRipples.delete(rippleRef);\n        if (rippleRef === this._mostRecentTransientRipple) {\n            this._mostRecentTransientRipple = null;\n        }\n        // Clear out the cached bounding rect if we have no more ripples.\n        if (!this._activeRipples.size) {\n            this._containerRect = null;\n        }\n        // For ripples that are not active anymore, don't re-run the fade-out animation.\n        if (!wasActive) {\n            return;\n        }\n        const rippleEl = rippleRef.element;\n        const animationConfig = Object.assign(Object.assign({}, defaultRippleAnimationConfig), rippleRef.config.animation);\n        rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n        rippleEl.style.opacity = '0';\n        rippleRef.state = 2 /* FADING_OUT */;\n        // Once the ripple faded out, the ripple can be safely removed from the DOM.\n        this._runTimeoutOutsideZone(() => {\n            rippleRef.state = 3 /* HIDDEN */;\n            rippleEl.remove();\n        }, animationConfig.exitDuration);\n    }\n    /** Fades out all currently active ripples. */\n    fadeOutAll() {\n        this._activeRipples.forEach(ripple => ripple.fadeOut());\n    }\n    /** Fades out all currently active non-persistent ripples. */\n    fadeOutAllNonPersistent() {\n        this._activeRipples.forEach(ripple => {\n            if (!ripple.config.persistent) {\n                ripple.fadeOut();\n            }\n        });\n    }\n    /** Sets up the trigger event listeners */\n    setupTriggerEvents(elementOrElementRef) {\n        const element = coerceElement(elementOrElementRef);\n        if (!element || element === this._triggerElement) {\n            return;\n        }\n        // Remove all previously registered event listeners from the trigger element.\n        this._removeTriggerEvents();\n        this._triggerElement = element;\n        this._registerEvents(pointerDownEvents);\n    }\n    /**\n     * Handles all registered events.\n     * @docs-private\n     */\n    handleEvent(event) {\n        if (event.type === 'mousedown') {\n            this._onMousedown(event);\n        }\n        else if (event.type === 'touchstart') {\n            this._onTouchStart(event);\n        }\n        else {\n            this._onPointerUp();\n        }\n        // If pointer-up events haven't been registered yet, do so now.\n        // We do this on-demand in order to reduce the total number of event listeners\n        // registered by the ripples, which speeds up the rendering time for large UIs.\n        if (!this._pointerUpEventsRegistered) {\n            this._registerEvents(pointerUpEvents);\n            this._pointerUpEventsRegistered = true;\n        }\n    }\n    /** Function being called whenever the trigger is being pressed using mouse. */\n    _onMousedown(event) {\n        // Screen readers will fire fake mouse events for space/enter. Skip launching a\n        // ripple in this case for consistency with the non-screen-reader experience.\n        const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n        const isSyntheticEvent = this._lastTouchStartEvent &&\n            Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n        if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n            this._isPointerDown = true;\n            this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n        }\n    }\n    /** Function being called whenever the trigger is being pressed using touch. */\n    _onTouchStart(event) {\n        if (!this._target.rippleDisabled && !isFakeTouchstartFromScreenReader(event)) {\n            // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n            // events will launch a second ripple if we don't ignore mouse events for a specific\n            // time after a touchstart event.\n            this._lastTouchStartEvent = Date.now();\n            this._isPointerDown = true;\n            // Use `changedTouches` so we skip any touches where the user put\n            // their finger down, but used another finger to tap the element again.\n            const touches = event.changedTouches;\n            for (let i = 0; i < touches.length; i++) {\n                this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n            }\n        }\n    }\n    /** Function being called whenever the trigger is being released. */\n    _onPointerUp() {\n        if (!this._isPointerDown) {\n            return;\n        }\n        this._isPointerDown = false;\n        // Fade-out all ripples that are visible and not persistent.\n        this._activeRipples.forEach(ripple => {\n            // By default, only ripples that are completely visible will fade out on pointer release.\n            // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n            const isVisible = ripple.state === 1 /* VISIBLE */ ||\n                (ripple.config.terminateOnPointerUp && ripple.state === 0 /* FADING_IN */);\n            if (!ripple.config.persistent && isVisible) {\n                ripple.fadeOut();\n            }\n        });\n    }\n    /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n    _runTimeoutOutsideZone(fn, delay = 0) {\n        this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n    }\n    /** Registers event listeners for a given list of events. */\n    _registerEvents(eventTypes) {\n        this._ngZone.runOutsideAngular(() => {\n            eventTypes.forEach(type => {\n                this._triggerElement.addEventListener(type, this, passiveEventOptions);\n            });\n        });\n    }\n    /** Removes previously registered event listeners from the trigger element. */\n    _removeTriggerEvents() {\n        if (this._triggerElement) {\n            pointerDownEvents.forEach(type => {\n                this._triggerElement.removeEventListener(type, this, passiveEventOptions);\n            });\n            if (this._pointerUpEventsRegistered) {\n                pointerUpEvents.forEach(type => {\n                    this._triggerElement.removeEventListener(type, this, passiveEventOptions);\n                });\n            }\n        }\n    }\n}\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element) {\n    // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n    // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x, y, rect) {\n    const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n    const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n    return Math.sqrt(distX * distX + distY * distY);\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nconst MAT_RIPPLE_GLOBAL_OPTIONS = new InjectionToken('mat-ripple-global-options');\nclass MatRipple {\n    constructor(_elementRef, ngZone, platform, globalOptions, _animationMode) {\n        this._elementRef = _elementRef;\n        this._animationMode = _animationMode;\n        /**\n         * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n         * will be the distance from the center of the ripple to the furthest corner of the host element's\n         * bounding rectangle.\n         */\n        this.radius = 0;\n        this._disabled = false;\n        /** Whether ripple directive is initialized and the input bindings are set. */\n        this._isInitialized = false;\n        this._globalOptions = globalOptions || {};\n        this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n    }\n    /**\n     * Whether click events will not trigger the ripple. Ripples can be still launched manually\n     * by using the `launch()` method.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        if (value) {\n            this.fadeOutAllNonPersistent();\n        }\n        this._disabled = value;\n        this._setupTriggerEventsIfEnabled();\n    }\n    /**\n     * The element that triggers the ripple when click events are received.\n     * Defaults to the directive's host element.\n     */\n    get trigger() {\n        return this._trigger || this._elementRef.nativeElement;\n    }\n    set trigger(trigger) {\n        this._trigger = trigger;\n        this._setupTriggerEventsIfEnabled();\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n        this._setupTriggerEventsIfEnabled();\n    }\n    ngOnDestroy() {\n        this._rippleRenderer._removeTriggerEvents();\n    }\n    /** Fades out all currently showing ripple elements. */\n    fadeOutAll() {\n        this._rippleRenderer.fadeOutAll();\n    }\n    /** Fades out all currently showing non-persistent ripple elements. */\n    fadeOutAllNonPersistent() {\n        this._rippleRenderer.fadeOutAllNonPersistent();\n    }\n    /**\n     * Ripple configuration from the directive's input values.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    get rippleConfig() {\n        return {\n            centered: this.centered,\n            radius: this.radius,\n            color: this.color,\n            animation: Object.assign(Object.assign(Object.assign({}, this._globalOptions.animation), (this._animationMode === 'NoopAnimations' ? { enterDuration: 0, exitDuration: 0 } : {})), this.animation),\n            terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n        };\n    }\n    /**\n     * Whether ripples on pointer-down are disabled or not.\n     * @docs-private Implemented as part of RippleTarget\n     */\n    get rippleDisabled() {\n        return this.disabled || !!this._globalOptions.disabled;\n    }\n    /** Sets up the trigger event listeners if ripples are enabled. */\n    _setupTriggerEventsIfEnabled() {\n        if (!this.disabled && this._isInitialized) {\n            this._rippleRenderer.setupTriggerEvents(this.trigger);\n        }\n    }\n    /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n    launch(configOrX, y = 0, config) {\n        if (typeof configOrX === 'number') {\n            return this._rippleRenderer.fadeInRipple(configOrX, y, Object.assign(Object.assign({}, this.rippleConfig), config));\n        }\n        else {\n            return this._rippleRenderer.fadeInRipple(0, 0, Object.assign(Object.assign({}, this.rippleConfig), configOrX));\n        }\n    }\n}\nMatRipple.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRipple, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i1$1.Platform }, { token: MAT_RIPPLE_GLOBAL_OPTIONS, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatRipple.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: { color: [\"matRippleColor\", \"color\"], unbounded: [\"matRippleUnbounded\", \"unbounded\"], centered: [\"matRippleCentered\", \"centered\"], radius: [\"matRippleRadius\", \"radius\"], animation: [\"matRippleAnimation\", \"animation\"], disabled: [\"matRippleDisabled\", \"disabled\"], trigger: [\"matRippleTrigger\", \"trigger\"] }, host: { properties: { \"class.mat-ripple-unbounded\": \"unbounded\" }, classAttribute: \"mat-ripple\" }, exportAs: [\"matRipple\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRipple, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-ripple], [matRipple]',\n                    exportAs: 'matRipple',\n                    host: {\n                        'class': 'mat-ripple',\n                        '[class.mat-ripple-unbounded]': 'unbounded',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1$1.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { color: [{\n                type: Input,\n                args: ['matRippleColor']\n            }], unbounded: [{\n                type: Input,\n                args: ['matRippleUnbounded']\n            }], centered: [{\n                type: Input,\n                args: ['matRippleCentered']\n            }], radius: [{\n                type: Input,\n                args: ['matRippleRadius']\n            }], animation: [{\n                type: Input,\n                args: ['matRippleAnimation']\n            }], disabled: [{\n                type: Input,\n                args: ['matRippleDisabled']\n            }], trigger: [{\n                type: Input,\n                args: ['matRippleTrigger']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatRippleModule {\n}\nMatRippleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRippleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatRippleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRippleModule, declarations: [MatRipple], imports: [MatCommonModule], exports: [MatRipple, MatCommonModule] });\nMatRippleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRippleModule, imports: [[MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRippleModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatRipple, MatCommonModule],\n                    declarations: [MatRipple],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\nclass MatPseudoCheckbox {\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n        /** Display state of the checkbox. */\n        this.state = 'unchecked';\n        /** Whether the checkbox is disabled. */\n        this.disabled = false;\n    }\n}\nMatPseudoCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPseudoCheckbox, deps: [{ token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatPseudoCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatPseudoCheckbox, selector: \"mat-pseudo-checkbox\", inputs: { state: \"state\", disabled: \"disabled\" }, host: { properties: { \"class.mat-pseudo-checkbox-indeterminate\": \"state === \\\"indeterminate\\\"\", \"class.mat-pseudo-checkbox-checked\": \"state === \\\"checked\\\"\", \"class.mat-pseudo-checkbox-disabled\": \"disabled\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\" }, classAttribute: \"mat-pseudo-checkbox\" }, ngImport: i0, template: '', isInline: true, styles: [\".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPseudoCheckbox, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, selector: 'mat-pseudo-checkbox', template: '', host: {\n                        'class': 'mat-pseudo-checkbox',\n                        '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n                        '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n                        '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    }, styles: [\".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { state: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatPseudoCheckboxModule {\n}\nMatPseudoCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPseudoCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatPseudoCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPseudoCheckboxModule, declarations: [MatPseudoCheckbox], imports: [MatCommonModule], exports: [MatPseudoCheckbox] });\nMatPseudoCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPseudoCheckboxModule, imports: [[MatCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPseudoCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatPseudoCheckbox],\n                    declarations: [MatPseudoCheckbox],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide the parent component to options.\n */\nconst MAT_OPTION_PARENT_COMPONENT = new InjectionToken('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Notes on the accessibility pattern used for `mat-optgroup`.\n// The option group has two different \"modes\": regular and inert. The regular mode uses the\n// recommended a11y pattern which has `role=\"group\"` on the group element with `aria-labelledby`\n// pointing to the label. This works for `mat-select`, but it seems to hit a bug for autocomplete\n// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if\n// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),\n// VoiceOver on Safari won't read it out.\n// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are\n// removed from the group, and we get the screen reader to read out the group label by mirroring it\n// inside an invisible element in the option. This is sub-optimal, because the screen reader will\n// repeat the group label on each navigation, whereas the default pattern only reads the group when\n// the user enters a new group. The following alternate approaches were considered:\n// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control\n//    when the text will be read out so sometimes it comes in too late or never if the user\n//    navigates quickly.\n// 2. `<mat-option aria-describedby=\"groupLabel\"` - This works on Safari, but VoiceOver in Chrome\n//    won't read out the description at all.\n// 3. `<mat-option aria-labelledby=\"optionLabel groupLabel\"` - This works on Chrome, but Safari\n//     doesn't read out the text at all. Furthermore, on\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nconst _MatOptgroupMixinBase = mixinDisabled(class {\n});\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\nclass _MatOptgroupBase extends _MatOptgroupMixinBase {\n    constructor(parent) {\n        var _a;\n        super();\n        /** Unique id for the underlying label. */\n        this._labelId = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n        this._inert = (_a = parent === null || parent === void 0 ? void 0 : parent.inertGroups) !== null && _a !== void 0 ? _a : false;\n    }\n}\n_MatOptgroupBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatOptgroupBase, deps: [{ token: MAT_OPTION_PARENT_COMPONENT, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatOptgroupBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatOptgroupBase, inputs: { label: \"label\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatOptgroupBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_OPTION_PARENT_COMPONENT]\n                    }, {\n                        type: Optional\n                    }] }];\n    }, propDecorators: { label: [{\n                type: Input\n            }] } });\n/**\n * Injection token that can be used to reference instances of `MatOptgroup`. It serves as\n * alternative token to the actual `MatOptgroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_OPTGROUP = new InjectionToken('MatOptgroup');\n/**\n * Component that is used to group instances of `mat-option`.\n */\nclass MatOptgroup extends _MatOptgroupBase {\n}\nMatOptgroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatOptgroup, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatOptgroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatOptgroup, selector: \"mat-optgroup\", inputs: { disabled: \"disabled\" }, host: { properties: { \"attr.role\": \"_inert ? null : \\\"group\\\"\", \"attr.aria-disabled\": \"_inert ? null : disabled.toString()\", \"attr.aria-labelledby\": \"_inert ? null : _labelId\", \"class.mat-optgroup-disabled\": \"disabled\" }, classAttribute: \"mat-optgroup\" }, providers: [{ provide: MAT_OPTGROUP, useExisting: MatOptgroup }], exportAs: [\"matOptgroup\"], usesInheritance: true, ngImport: i0, template: \"<span class=\\\"mat-optgroup-label\\\" aria-hidden=\\\"true\\\" [id]=\\\"_labelId\\\">{{ label }} <ng-content></ng-content></span>\\n<ng-content select=\\\"mat-option, ng-container\\\"></ng-content>\\n\", styles: [\".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatOptgroup, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-optgroup', exportAs: 'matOptgroup', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disabled'], host: {\n                        'class': 'mat-optgroup',\n                        '[attr.role]': '_inert ? null : \"group\"',\n                        '[attr.aria-disabled]': '_inert ? null : disabled.toString()',\n                        '[attr.aria-labelledby]': '_inert ? null : _labelId',\n                        '[class.mat-optgroup-disabled]': 'disabled',\n                    }, providers: [{ provide: MAT_OPTGROUP, useExisting: MatOptgroup }], template: \"<span class=\\\"mat-optgroup-label\\\" aria-hidden=\\\"true\\\" [id]=\\\"_labelId\\\">{{ label }} <ng-content></ng-content></span>\\n<ng-content select=\\\"mat-option, ng-container\\\"></ng-content>\\n\", styles: [\".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\\n\"] }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/** Event object emitted by MatOption when selected or deselected. */\nclass MatOptionSelectionChange {\n    constructor(\n    /** Reference to the option that emitted the event. */\n    source, \n    /** Whether the change in the option's value was a result of a user action. */\n    isUserInput = false) {\n        this.source = source;\n        this.isUserInput = isUserInput;\n    }\n}\nclass _MatOptionBase {\n    constructor(_element, _changeDetectorRef, _parent, group) {\n        this._element = _element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parent = _parent;\n        this.group = group;\n        this._selected = false;\n        this._active = false;\n        this._disabled = false;\n        this._mostRecentViewValue = '';\n        /** The unique ID of the option. */\n        this.id = `mat-option-${_uniqueIdCounter++}`;\n        /** Event emitted when the option is selected or deselected. */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onSelectionChange = new EventEmitter();\n        /** Emits when the state of the option changes and any parents have to be notified. */\n        this._stateChanges = new Subject();\n    }\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this._parent && this._parent.multiple;\n    }\n    /** Whether or not the option is currently selected. */\n    get selected() {\n        return this._selected;\n    }\n    /** Whether the option is disabled. */\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /** Whether ripples for the option are disabled. */\n    get disableRipple() {\n        return !!(this._parent && this._parent.disableRipple);\n    }\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active() {\n        return this._active;\n    }\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue() {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this._getHostElement().textContent || '').trim();\n    }\n    /** Selects the option. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n    /** Deselects the option. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n    /** Sets focus onto this option. */\n    focus(_origin, options) {\n        // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n        // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n        const element = this._getHostElement();\n        if (typeof element.focus === 'function') {\n            element.focus(options);\n        }\n    }\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles() {\n        if (!this._active) {\n            this._active = true;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles() {\n        if (this._active) {\n            this._active = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        return this.viewValue;\n    }\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event) {\n        if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n            this._selectViaInteraction();\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction() {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent(true);\n        }\n    }\n    /**\n     * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n     * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n     * attributes adds a significant amount of noise to screen-reader users without providing useful\n     * information.\n     */\n    _getAriaSelected() {\n        return this.selected || (this.multiple ? false : null);\n    }\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Gets the host DOM element. */\n    _getHostElement() {\n        return this._element.nativeElement;\n    }\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n            if (viewValue !== this._mostRecentViewValue) {\n                this._mostRecentViewValue = viewValue;\n                this._stateChanges.next();\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /** Emits the selection change event. */\n    _emitSelectionChangeEvent(isUserInput = false) {\n        this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n    }\n}\n_MatOptionBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatOptionBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatOptionBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatOptionBase, inputs: { value: \"value\", id: \"id\", disabled: \"disabled\" }, outputs: { onSelectionChange: \"onSelectionChange\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatOptionBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: undefined }, { type: _MatOptgroupBase }]; }, propDecorators: { value: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], onSelectionChange: [{\n                type: Output\n            }] } });\n/**\n * Single option inside of a `<mat-select>` element.\n */\nclass MatOption extends _MatOptionBase {\n    constructor(element, changeDetectorRef, parent, group) {\n        super(element, changeDetectorRef, parent, group);\n    }\n}\nMatOption.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatOption, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: MAT_OPTION_PARENT_COMPONENT, optional: true }, { token: MAT_OPTGROUP, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatOption.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatOption, selector: \"mat-option\", host: { attributes: { \"role\": \"option\" }, listeners: { \"click\": \"_selectViaInteraction()\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.tabindex\": \"_getTabIndex()\", \"class.mat-selected\": \"selected\", \"class.mat-option-multiple\": \"multiple\", \"class.mat-active\": \"active\", \"id\": \"id\", \"attr.aria-selected\": \"_getAriaSelected()\", \"attr.aria-disabled\": \"disabled.toString()\", \"class.mat-option-disabled\": \"disabled\" }, classAttribute: \"mat-option mat-focus-indicator\" }, exportAs: [\"matOption\"], usesInheritance: true, ngImport: i0, template: \"<mat-pseudo-checkbox *ngIf=\\\"multiple\\\" class=\\\"mat-option-pseudo-checkbox\\\"\\n    [state]=\\\"selected ? 'checked' : 'unchecked'\\\" [disabled]=\\\"disabled\\\"></mat-pseudo-checkbox>\\n\\n<span class=\\\"mat-option-text\\\"><ng-content></ng-content></span>\\n\\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\\n<span class=\\\"cdk-visually-hidden\\\" *ngIf=\\\"group && group._inert\\\">({{ group.label }})</span>\\n\\n<div class=\\\"mat-option-ripple\\\" mat-ripple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"\\n     [matRippleDisabled]=\\\"disabled || disableRipple\\\">\\n</div>\\n\", styles: [\".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}.cdk-high-contrast-active .mat-option{margin:0 1px}.cdk-high-contrast-active .mat-option.mat-active{border:solid 1px currentColor;margin:0}.cdk-high-contrast-active .mat-option[aria-disabled=true]{opacity:.5}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\\n\"], components: [{ type: MatPseudoCheckbox, selector: \"mat-pseudo-checkbox\", inputs: [\"state\", \"disabled\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatOption, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-option', exportAs: 'matOption', host: {\n                        'role': 'option',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[class.mat-selected]': 'selected',\n                        '[class.mat-option-multiple]': 'multiple',\n                        '[class.mat-active]': 'active',\n                        '[id]': 'id',\n                        '[attr.aria-selected]': '_getAriaSelected()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[class.mat-option-disabled]': 'disabled',\n                        '(click)': '_selectViaInteraction()',\n                        '(keydown)': '_handleKeydown($event)',\n                        'class': 'mat-option mat-focus-indicator',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<mat-pseudo-checkbox *ngIf=\\\"multiple\\\" class=\\\"mat-option-pseudo-checkbox\\\"\\n    [state]=\\\"selected ? 'checked' : 'unchecked'\\\" [disabled]=\\\"disabled\\\"></mat-pseudo-checkbox>\\n\\n<span class=\\\"mat-option-text\\\"><ng-content></ng-content></span>\\n\\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\\n<span class=\\\"cdk-visually-hidden\\\" *ngIf=\\\"group && group._inert\\\">({{ group.label }})</span>\\n\\n<div class=\\\"mat-option-ripple\\\" mat-ripple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"\\n     [matRippleDisabled]=\\\"disabled || disableRipple\\\">\\n</div>\\n\", styles: [\".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}.cdk-high-contrast-active .mat-option{margin:0 1px}.cdk-high-contrast-active .mat-option.mat-active{border:solid 1px currentColor;margin:0}.cdk-high-contrast-active .mat-option[aria-disabled=true]{opacity:.5}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_OPTION_PARENT_COMPONENT]\n                    }] }, { type: MatOptgroup, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_OPTGROUP]\n                    }] }];\n    } });\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nfunction _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {\n    if (optionGroups.length) {\n        let optionsArray = options.toArray();\n        let groups = optionGroups.toArray();\n        let groupCounter = 0;\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n        return groupCounter;\n    }\n    return 0;\n}\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Offset of the option from the top of the panel.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nfunction _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {\n    if (optionOffset < currentScrollPosition) {\n        return optionOffset;\n    }\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n    return currentScrollPosition;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatOptionModule {\n}\nMatOptionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatOptionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatOptionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatOptionModule, declarations: [MatOption, MatOptgroup], imports: [MatRippleModule, CommonModule, MatCommonModule, MatPseudoCheckboxModule], exports: [MatOption, MatOptgroup] });\nMatOptionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatOptionModule, imports: [[MatRippleModule, CommonModule, MatCommonModule, MatPseudoCheckboxModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatOptionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatRippleModule, CommonModule, MatCommonModule, MatPseudoCheckboxModule],\n                    exports: [MatOption, MatOptgroup],\n                    declarations: [MatOption, MatOptgroup],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AnimationCurves, AnimationDurations, DateAdapter, ErrorStateMatcher, MATERIAL_SANITY_CHECKS, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MAT_DATE_LOCALE_FACTORY, MAT_NATIVE_DATE_FORMATS, MAT_OPTGROUP, MAT_OPTION_PARENT_COMPONENT, MAT_RIPPLE_GLOBAL_OPTIONS, MatCommonModule, MatLine, MatLineModule, MatNativeDateModule, MatOptgroup, MatOption, MatOptionModule, MatOptionSelectionChange, MatPseudoCheckbox, MatPseudoCheckboxModule, MatRipple, MatRippleModule, NativeDateAdapter, NativeDateModule, RippleRef, RippleRenderer, ShowOnDirtyErrorStateMatcher, VERSION, _MatOptgroupBase, _MatOptionBase, _countGroupLabelsBeforeOption, _getOptionScrollPosition, defaultRippleAnimationConfig, mixinColor, mixinDisableRipple, mixinDisabled, mixinErrorState, mixinInitialized, mixinTabIndex, setLines };\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, ViewChild, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinColor, mixinDisabled, mixinDisableRipple, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/a11y';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n    'mat-button',\n    'mat-flat-button',\n    'mat-icon-button',\n    'mat-raised-button',\n    'mat-stroked-button',\n    'mat-mini-fab',\n    'mat-fab',\n];\n// Boilerplate for applying mixins to MatButton.\nconst _MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n})));\n/**\n * Material design button.\n */\nclass MatButton extends _MatButtonBase {\n    constructor(elementRef, _focusMonitor, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._animationMode = _animationMode;\n        /** Whether the button is round. */\n        this.isRoundButton = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n        /** Whether the button is icon button. */\n        this.isIconButton = this._hasHostAttributes('mat-icon-button');\n        // For each of the variant selectors that is present in the button's host\n        // attributes, add the correct corresponding class.\n        for (const attr of BUTTON_HOST_ATTRIBUTES) {\n            if (this._hasHostAttributes(attr)) {\n                this._getHostElement().classList.add(attr);\n            }\n        }\n        // Add a class that applies to all buttons. This makes it easier to target if somebody\n        // wants to target all Material buttons. We do it here rather than `host` to ensure that\n        // the class is applied to derived classes.\n        elementRef.nativeElement.classList.add('mat-button-base');\n        if (this.isRoundButton) {\n            this.color = DEFAULT_ROUND_BUTTON_COLOR;\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Focuses the button. */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n    }\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Gets whether the button has one of the given attributes. */\n    _hasHostAttributes(...attributes) {\n        return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n    }\n}\nMatButton.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButton, deps: [{ token: i0.ElementRef }, { token: i1.FocusMonitor }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatButton.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],\\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\\n             button[mat-flat-button]\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\" }, host: { properties: { \"attr.disabled\": \"disabled || null\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"class.mat-button-disabled\": \"disabled\" }, classAttribute: \"mat-focus-indicator\" }, viewQueries: [{ propertyName: \"ripple\", first: true, predicate: MatRipple, descendants: true }], exportAs: [\"matButton\"], usesInheritance: true, ngImport: i0, template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span>\\n<span matRipple class=\\\"mat-button-ripple\\\"\\n      [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\"\\n      [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n      [matRippleCentered]=\\\"isIconButton\\\"\\n      [matRippleTrigger]=\\\"_getHostElement()\\\"></span>\\n<span class=\\\"mat-button-focus-overlay\\\"></span>\\n\", styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button.mat-button-disabled,.mat-icon-button.mat-button-disabled,.mat-stroked-button.mat-button-disabled,.mat-flat-button.mat-button-disabled{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button.mat-button-disabled{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab.mat-button-disabled{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab.mat-button-disabled{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:inline-flex;justify-content:center;align-items:center;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}.cdk-high-contrast-active .mat-button-base.cdk-keyboard-focused,.cdk-high-contrast-active .mat-button-base.cdk-program-focused{outline:solid 3px}\\n\"], directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButton, decorators: [{\n            type: Component,\n            args: [{ selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`, exportAs: 'matButton', host: {\n                        '[attr.disabled]': 'disabled || null',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        // Add a class for disabled button styling instead of the using attribute\n                        // selector or pseudo-selector.  This allows users to create focusabled\n                        // disabled buttons without recreating the styles.\n                        '[class.mat-button-disabled]': 'disabled',\n                        'class': 'mat-focus-indicator',\n                    }, inputs: ['disabled', 'disableRipple', 'color'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span>\\n<span matRipple class=\\\"mat-button-ripple\\\"\\n      [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\"\\n      [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n      [matRippleCentered]=\\\"isIconButton\\\"\\n      [matRippleTrigger]=\\\"_getHostElement()\\\"></span>\\n<span class=\\\"mat-button-focus-overlay\\\"></span>\\n\", styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button.mat-button-disabled,.mat-icon-button.mat-button-disabled,.mat-stroked-button.mat-button-disabled,.mat-flat-button.mat-button-disabled{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button.mat-button-disabled{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab.mat-button-disabled{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab.mat-button-disabled{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:inline-flex;justify-content:center;align-items:center;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}.cdk-high-contrast-active .mat-button-base.cdk-keyboard-focused,.cdk-high-contrast-active .mat-button-base.cdk-program-focused{outline:solid 3px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { ripple: [{\n                type: ViewChild,\n                args: [MatRipple]\n            }] } });\n/**\n * Material design anchor button.\n */\nclass MatAnchor extends MatButton {\n    constructor(focusMonitor, elementRef, animationMode, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(elementRef, focusMonitor, animationMode);\n        this._ngZone = _ngZone;\n        this._haltDisabledEvents = (event) => {\n            // A disabled button shouldn't apply any actions\n            if (this.disabled) {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n            }\n        };\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        /** @breaking-change 14.0.0 _ngZone will be required. */\n        if (this._ngZone) {\n            this._ngZone.runOutsideAngular(() => {\n                this._elementRef.nativeElement.addEventListener('click', this._haltDisabledEvents);\n            });\n        }\n        else {\n            this._elementRef.nativeElement.addEventListener('click', this._haltDisabledEvents);\n        }\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._elementRef.nativeElement.removeEventListener('click', this._haltDisabledEvents);\n    }\n}\nMatAnchor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAnchor, deps: [{ token: i1.FocusMonitor }, { token: i0.ElementRef }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatAnchor.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatAnchor, selector: \"a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\" }, host: { properties: { \"attr.tabindex\": \"disabled ? -1 : tabIndex\", \"attr.disabled\": \"disabled || null\", \"attr.aria-disabled\": \"disabled.toString()\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"class.mat-button-disabled\": \"disabled\" }, classAttribute: \"mat-focus-indicator\" }, exportAs: [\"matButton\", \"matAnchor\"], usesInheritance: true, ngImport: i0, template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span>\\n<span matRipple class=\\\"mat-button-ripple\\\"\\n      [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\"\\n      [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n      [matRippleCentered]=\\\"isIconButton\\\"\\n      [matRippleTrigger]=\\\"_getHostElement()\\\"></span>\\n<span class=\\\"mat-button-focus-overlay\\\"></span>\\n\", styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button.mat-button-disabled,.mat-icon-button.mat-button-disabled,.mat-stroked-button.mat-button-disabled,.mat-flat-button.mat-button-disabled{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button.mat-button-disabled{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab.mat-button-disabled{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab.mat-button-disabled{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:inline-flex;justify-content:center;align-items:center;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}.cdk-high-contrast-active .mat-button-base.cdk-keyboard-focused,.cdk-high-contrast-active .mat-button-base.cdk-program-focused{outline:solid 3px}\\n\"], directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAnchor, decorators: [{\n            type: Component,\n            args: [{ selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`, exportAs: 'matButton, matAnchor', host: {\n                        // Note that we ignore the user-specified tabindex when it's disabled for\n                        // consistency with the `mat-button` applied on native buttons where even\n                        // though they have an index, they're not tabbable.\n                        '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n                        '[attr.disabled]': 'disabled || null',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[class.mat-button-disabled]': 'disabled',\n                        'class': 'mat-focus-indicator',\n                    }, inputs: ['disabled', 'disableRipple', 'color'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span>\\n<span matRipple class=\\\"mat-button-ripple\\\"\\n      [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\"\\n      [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n      [matRippleCentered]=\\\"isIconButton\\\"\\n      [matRippleTrigger]=\\\"_getHostElement()\\\"></span>\\n<span class=\\\"mat-button-focus-overlay\\\"></span>\\n\", styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button.mat-button-disabled,.mat-icon-button.mat-button-disabled,.mat-stroked-button.mat-button-disabled,.mat-flat-button.mat-button-disabled{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button.mat-button-disabled{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab.mat-button-disabled{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab.mat-button-disabled{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:inline-flex;justify-content:center;align-items:center;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}.cdk-high-contrast-active .mat-button-base.cdk-keyboard-focused,.cdk-high-contrast-active .mat-button-base.cdk-program-focused{outline:solid 3px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i1.FocusMonitor }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { tabIndex: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonModule {\n}\nMatButtonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatButtonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButtonModule, declarations: [MatButton, MatAnchor], imports: [MatRippleModule, MatCommonModule], exports: [MatButton, MatAnchor, MatCommonModule] });\nMatButtonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButtonModule, imports: [[MatRippleModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButtonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatRippleModule, MatCommonModule],\n                    exports: [MatButton, MatAnchor, MatCommonModule],\n                    declarations: [MatButton, MatAnchor],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatAnchor, MatButton, MatButtonModule };\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\nexport const animationFrame = animationFrameScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AnimationFrameScheduler extends AsyncScheduler {\n    flush(action) {\n        this.active = true;\n        this.scheduled = undefined;\n        const { actions } = this;\n        let error;\n        let index = -1;\n        let count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nexport class AnimationFrameAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(() => scheduler.flush(null)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        if (scheduler.actions.length === 0) {\n            cancelAnimationFrame(id);\n            scheduler.scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n","let nextHandle = 1;\nconst RESOLVED = (() => Promise.resolve())();\nconst activeHandles = {};\nfunction findAndClearHandle(handle) {\n    if (handle in activeHandles) {\n        delete activeHandles[handle];\n        return true;\n    }\n    return false;\n}\nexport const Immediate = {\n    setImmediate(cb) {\n        const handle = nextHandle++;\n        activeHandles[handle] = true;\n        RESOLVED.then(() => findAndClearHandle(handle) && cb());\n        return handle;\n    },\n    clearImmediate(handle) {\n        findAndClearHandle(handle);\n    },\n};\nexport const TestTools = {\n    pending() {\n        return Object.keys(activeHandles).length;\n    }\n};\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\nexport const asapScheduler = new AsapScheduler(AsapAction);\nexport const asap = asapScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AsapScheduler extends AsyncScheduler {\n    flush(action) {\n        this.active = true;\n        this.scheduled = undefined;\n        const { actions } = this;\n        let error;\n        let index = -1;\n        let count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nexport class AsapAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        if (scheduler.actions.length === 0) {\n            Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n","import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nclass AuditOperator {\n    constructor(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    }\n}\nclass AuditSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, durationSelector) {\n        super(destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            let duration;\n            try {\n                const { durationSelector } = this;\n                duration = durationSelector(value);\n            }\n            catch (err) {\n                return this.destination.error(err);\n            }\n            const innerSubscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n            if (!innerSubscription || innerSubscription.closed) {\n                this.clearThrottle();\n            }\n            else {\n                this.add(this.throttled = innerSubscription);\n            }\n        }\n    }\n    clearThrottle() {\n        const { value, hasValue, throttled } = this;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = undefined;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = undefined;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    }\n    notifyNext() {\n        this.clearThrottle();\n    }\n    notifyComplete() {\n        this.clearThrottle();\n    }\n}\n","import { async } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nexport function auditTime(duration, scheduler = async) {\n    return audit(() => timer(duration, scheduler));\n}\n","import { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, supportsScrollBehavior } from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the virtual scrolling strategy. */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() {\n        /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() {\n        /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n        return this._itemSize;\n    }\n    set itemSize(value) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n        return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n        return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nCdkFixedSizeVirtualScroll.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkFixedSizeVirtualScroll, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, providers: [\n        {\n            provide: VIRTUAL_SCROLL_STRATEGY,\n            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n        },\n    ], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    providers: [\n                        {\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                        },\n                    ],\n                }]\n        }], propDecorators: { itemSize: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0\n                ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n                : this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while ((element = element.parentElement));\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollDispatcher, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll')\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkScrollable.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollable, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => (this._viewportSize = null));\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top ||\n            document.body.scrollTop ||\n            window.scrollY ||\n            documentElement.scrollTop ||\n            0;\n        const left = -documentRect.left ||\n            document.body.scrollLeft ||\n            window.scrollX ||\n            documentElement.scrollLeft ||\n            0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser\n            ? { width: window.innerWidth, height: window.innerHeight }\n            : { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ViewportRuler, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nViewportRuler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ViewportRuler, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ViewportRuler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        this._appendOnly = false;\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n    }\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n    get appendOnly() {\n        return this._appendOnly;\n    }\n    set appendOnly(value) {\n        this._appendOnly = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next((this._renderedRange = range));\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        // in appendOnly, we always start from the top\n        offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        return from\n            ? super.measureScrollOffset(from)\n            : super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize =\n            this.orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkVirtualScrollViewport, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: VIRTUAL_SCROLL_STRATEGY, optional: true }, { token: i2.Directionality, optional: true }, { token: ScrollDispatcher }, { token: ViewportRuler }], target: i0.ɵɵFactoryTarget.Component });\nCdkVirtualScrollViewport.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkVirtualScrollViewport, selector: \"cdk-virtual-scroll-viewport\", inputs: { orientation: \"orientation\", appendOnly: \"appendOnly\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, host: { properties: { \"class.cdk-virtual-scroll-orientation-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.cdk-virtual-scroll-orientation-vertical\": \"orientation !== \\\"horizontal\\\"\" }, classAttribute: \"cdk-virtual-scroll-viewport\" }, providers: [\n        {\n            provide: CdkScrollable,\n            useExisting: CdkVirtualScrollViewport,\n        },\n    ], viewQueries: [{ propertyName: \"_contentWrapper\", first: true, predicate: [\"contentWrapper\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkVirtualScrollViewport, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-virtual-scroll-viewport', host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: CdkVirtualScrollViewport,\n                        },\n                    ], template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [VIRTUAL_SCROLL_STRATEGY]\n                    }] }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: ScrollDispatcher }, { type: ViewportRuler }];\n    }, propDecorators: { orientation: [{\n                type: Input\n            }], appendOnly: [{\n                type: Input\n            }], scrolledIndexChange: [{\n                type: Output\n            }], _contentWrapper: [{\n                type: ViewChild,\n                args: ['contentWrapper', { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges.pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            if (this.viewChange.observers.length) {\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n            }\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn\n            ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n            : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode\n            ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n            : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false,\n            },\n            index,\n        };\n    }\n}\nCdkVirtualForOf.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkVirtualForOf, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: _VIEW_REPEATER_STRATEGY }, { token: CdkVirtualScrollViewport, skipSelf: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nCdkVirtualForOf.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkVirtualForOf, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkVirtualForOf, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i2$1._RecycleViewRepeaterStrategy, decorators: [{\n                        type: Inject,\n                        args: [_VIEW_REPEATER_STRATEGY]\n                    }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                        type: SkipSelf\n                    }] }, { type: i0.NgZone }];\n    }, propDecorators: { cdkVirtualForOf: [{\n                type: Input\n            }], cdkVirtualForTrackBy: [{\n                type: Input\n            }], cdkVirtualForTemplate: [{\n                type: Input\n            }], cdkVirtualForTemplateCacheSize: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkScrollableModule {\n}\nCdkScrollableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdkScrollableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollableModule, declarations: [CdkScrollable], exports: [CdkScrollable] });\nCdkScrollableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollableModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkScrollable],\n                    declarations: [CdkScrollable],\n                }]\n        }] });\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n}\nScrollingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nScrollingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollingModule, declarations: [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport], imports: [BidiModule, CdkScrollableModule], exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport] });\nScrollingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollingModule, imports: [[BidiModule, CdkScrollableModule], BidiModule, CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, CdkScrollableModule],\n                    exports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                    ],\n                    declarations: [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n","import * as i0 from '@angular/core';\nimport { ElementRef, Injector, Directive, EventEmitter, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host != null) {\n            this._attachedHost = null;\n            host.detach();\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwNoPortalAttachedError();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwUnknownPortalTypeError();\n        }\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param outletElement Element into which the content is projected.\n     * @param _componentFactoryResolver Used to resolve the component factory.\n     *   Only required when attaching component portals.\n     * @param _appRef Reference to the application. Only used in component portals when there\n     *   is no `ViewContainerRef` available.\n     * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n     *   have one. Only used for component portals.\n     * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n     *   become a required parameter.\n     */\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = (portal.componentFactoryResolver || this._componentFactoryResolver);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !resolver) {\n            throw Error('Cannot attach component portal to outlet without a ComponentFactoryResolver.');\n        }\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n                throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n            }\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector || Injector.NULL);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                // Verify that the ApplicationRef has registered views before trying to detach a host view.\n                // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n                if (this._appRef.viewCount > 0) {\n                    this._appRef.detachView(componentRef.hostView);\n                }\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        this._attachedPortal = portal;\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn(() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        });\n        this._attachedPortal = portal;\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        this.outletElement.remove();\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkPortal, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkPortal.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkPortal, selector: \"[cdkPortal]\", exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkPortal, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortal]',\n                    exportAs: 'cdkPortal',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; } });\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TemplatePortalDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nTemplatePortalDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: TemplatePortalDirective, selector: \"[cdk-portal], [portal]\", providers: [\n        {\n            provide: CdkPortal,\n            useExisting: TemplatePortalDirective,\n        },\n    ], exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TemplatePortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-portal], [portal]',\n                    exportAs: 'cdkPortal',\n                    providers: [\n                        {\n                            provide: CdkPortal,\n                            useExisting: TemplatePortalDirective,\n                        },\n                    ],\n                }]\n        }] });\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal || null;\n    }\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE\n            ? nativeElement\n            : nativeElement.parentNode);\n    }\n}\nCdkPortalOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkPortalOutlet, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nCdkPortalOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkPortalOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalOutlet]',\n                    exportAs: 'cdkPortalOutlet',\n                    inputs: ['portal: cdkPortalOutlet'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    }, propDecorators: { attached: [{\n                type: Output\n            }] } });\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalHostDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nPortalHostDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: PortalHostDirective, selector: \"[cdkPortalHost], [portalHost]\", inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, providers: [\n        {\n            provide: CdkPortalOutlet,\n            useExisting: PortalHostDirective,\n        },\n    ], exportAs: [\"cdkPortalHost\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalHostDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalHost',\n                    inputs: ['portal: cdkPortalHost'],\n                    providers: [\n                        {\n                            provide: CdkPortalOutlet,\n                            useExisting: PortalHostDirective,\n                        },\n                    ],\n                }]\n        }] });\nclass PortalModule {\n}\nPortalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPortalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalModule, declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] });\nPortalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                    declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ElementRef, Optional, ApplicationRef, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _isTestEnvironment, _getEventTarget } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        var _a;\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        (_a = this._host) === null || _a === void 0 ? void 0 : _a.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        var _a;\n        (_a = this._containerElement) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: OverlayContainer }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }];\n    } });\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                    }] }, { type: i5.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, declarations: [CdkConnectedOverlay, CdkOverlayOrigin], imports: [BidiModule, PortalModule, ScrollingModule], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import * as i4 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Attribute, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, ViewChild, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, merge, fromEvent } from 'rxjs';\nimport { startWith, takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId$2 = 0;\n/**\n * Injection token that can be used to reference instances of `MatError`. It serves as\n * alternative token to the actual `MatError` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_ERROR = new InjectionToken('MatError');\n/** Single error message to be shown underneath the form field. */\nclass MatError {\n    constructor(ariaLive, elementRef) {\n        this.id = `mat-error-${nextUniqueId$2++}`;\n        // If no aria-live value is set add 'polite' as a default. This is preferred over setting\n        // role='alert' so that screen readers do not interrupt the current task to read this aloud.\n        if (!ariaLive) {\n            elementRef.nativeElement.setAttribute('aria-live', 'polite');\n        }\n    }\n}\nMatError.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatError, deps: [{ token: 'aria-live', attribute: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nMatError.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatError, selector: \"mat-error\", inputs: { id: \"id\" }, host: { attributes: { \"aria-atomic\": \"true\" }, properties: { \"attr.id\": \"id\" }, classAttribute: \"mat-error\" }, providers: [{ provide: MAT_ERROR, useExisting: MatError }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatError, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-error',\n                    host: {\n                        'class': 'mat-error',\n                        '[attr.id]': 'id',\n                        'aria-atomic': 'true',\n                    },\n                    providers: [{ provide: MAT_ERROR, useExisting: MatError }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['aria-live']\n                    }] }, { type: i0.ElementRef }];\n    }, propDecorators: { id: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nconst matFormFieldAnimations = {\n    /** Animation that transitions the form field's error and hint messages. */\n    transitionMessages: trigger('transitionMessages', [\n        // TODO(mmalerba): Use angular animations for label animation as well.\n        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n        transition('void => enter', [\n            style({ opacity: 0, transform: 'translateY(-5px)' }),\n            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nclass MatFormFieldControl {\n}\nMatFormFieldControl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFormFieldControl, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatFormFieldControl.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatFormFieldControl, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFormFieldControl, decorators: [{\n            type: Directive\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatFormFieldPlaceholderConflictError() {\n    return Error('Placeholder attribute and child element were both specified.');\n}\n/** @docs-private */\nfunction getMatFormFieldDuplicatedHintError(align) {\n    return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/** @docs-private */\nfunction getMatFormFieldMissingControlError() {\n    return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `MatHint`. It serves as\n * alternative token to the actual `MatHint` class which could cause unnecessary\n * retention of the class and its directive metadata.\n *\n * *Note*: This is not part of the public API as the MDC-based form-field will not\n * need a lightweight token for `MatHint` and we want to reduce breaking changes.\n */\nconst _MAT_HINT = new InjectionToken('MatHint');\n/** Hint text to be shown underneath the form field control. */\nclass MatHint {\n    constructor() {\n        /** Whether to align the hint label at the start or end of the line. */\n        this.align = 'start';\n        /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n        this.id = `mat-hint-${nextUniqueId$1++}`;\n    }\n}\nMatHint.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatHint, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatHint.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatHint, selector: \"mat-hint\", inputs: { align: \"align\", id: \"id\" }, host: { properties: { \"class.mat-form-field-hint-end\": \"align === \\\"end\\\"\", \"attr.id\": \"id\", \"attr.align\": \"null\" }, classAttribute: \"mat-hint\" }, providers: [{ provide: _MAT_HINT, useExisting: MatHint }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatHint, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-hint',\n                    host: {\n                        'class': 'mat-hint',\n                        '[class.mat-form-field-hint-end]': 'align === \"end\"',\n                        '[attr.id]': 'id',\n                        // Remove align attribute to prevent it from interfering with layout.\n                        '[attr.align]': 'null',\n                    },\n                    providers: [{ provide: _MAT_HINT, useExisting: MatHint }],\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The floating label for a `mat-form-field`. */\nclass MatLabel {\n}\nMatLabel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatLabel, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatLabel.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatLabel, selector: \"mat-label\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatLabel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-label',\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\nclass MatPlaceholder {\n}\nMatPlaceholder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPlaceholder, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatPlaceholder.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatPlaceholder, selector: \"mat-placeholder\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-placeholder',\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatPrefix`. It serves as\n * alternative token to the actual `MatPrefix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_PREFIX = new InjectionToken('MatPrefix');\n/** Prefix to be placed in front of the form field. */\nclass MatPrefix {\n}\nMatPrefix.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPrefix, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatPrefix.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatPrefix, selector: \"[matPrefix]\", providers: [{ provide: MAT_PREFIX, useExisting: MatPrefix }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPrefix, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matPrefix]',\n                    providers: [{ provide: MAT_PREFIX, useExisting: MatPrefix }],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatSuffix`. It serves as\n * alternative token to the actual `MatSuffix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SUFFIX = new InjectionToken('MatSuffix');\n/** Suffix to be placed at the end of the form field. */\nclass MatSuffix {\n}\nMatSuffix.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSuffix, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSuffix.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSuffix, selector: \"[matSuffix]\", providers: [{ provide: MAT_SUFFIX, useExisting: MatSuffix }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSuffix, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matSuffix]',\n                    providers: [{ provide: MAT_SUFFIX, useExisting: MatSuffix }],\n                }]\n        }] });\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nconst _MatFormFieldBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}, 'primary');\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nconst MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\nconst MAT_FORM_FIELD = new InjectionToken('MatFormField');\n/** Container for form controls that applies Material Design styling and behavior. */\nclass MatFormField extends _MatFormFieldBase {\n    constructor(elementRef, _changeDetectorRef, _dir, _defaults, _platform, _ngZone, _animationMode) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._defaults = _defaults;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        /**\n         * Whether the outline gap needs to be calculated\n         * immediately on the next change detection run.\n         */\n        this._outlineGapCalculationNeededImmediately = false;\n        /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n        this._outlineGapCalculationNeededOnStable = false;\n        this._destroyed = new Subject();\n        /** Override for the logic that disables the label animation in certain cases. */\n        this._showAlwaysAnimate = false;\n        /** State of the mat-hint and mat-error animations. */\n        this._subscriptAnimationState = '';\n        this._hintLabel = '';\n        // Unique id for the hint label.\n        this._hintLabelId = `mat-hint-${nextUniqueId++}`;\n        // Unique id for the label element.\n        this._labelId = `mat-form-field-label-${nextUniqueId++}`;\n        this.floatLabel = this._getDefaultFloatLabelState();\n        this._animationsEnabled = _animationMode !== 'NoopAnimations';\n        // Set the default through here so we invoke the setter on the first run.\n        this.appearance = _defaults && _defaults.appearance ? _defaults.appearance : 'legacy';\n        this._hideRequiredMarker =\n            _defaults && _defaults.hideRequiredMarker != null ? _defaults.hideRequiredMarker : false;\n    }\n    /** The form-field appearance style. */\n    get appearance() {\n        return this._appearance;\n    }\n    set appearance(value) {\n        const oldValue = this._appearance;\n        this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n        if (this._appearance === 'outline' && oldValue !== value) {\n            this._outlineGapCalculationNeededOnStable = true;\n        }\n    }\n    /** Whether the required marker should be hidden. */\n    get hideRequiredMarker() {\n        return this._hideRequiredMarker;\n    }\n    set hideRequiredMarker(value) {\n        this._hideRequiredMarker = coerceBooleanProperty(value);\n    }\n    /** Whether the floating label should always float or not. */\n    _shouldAlwaysFloat() {\n        return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n    }\n    /** Whether the label can float or not. */\n    _canLabelFloat() {\n        return this.floatLabel !== 'never';\n    }\n    /** Text for the form field hint. */\n    get hintLabel() {\n        return this._hintLabel;\n    }\n    set hintLabel(value) {\n        this._hintLabel = value;\n        this._processHints();\n    }\n    /**\n     * Whether the label should always float, never float or float as the user types.\n     *\n     * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n     * way to make the floating label emulate the behavior of a standard input placeholder. However\n     * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n     * appearances the `never` option has been disabled in favor of just using the placeholder.\n     */\n    get floatLabel() {\n        return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n    }\n    set floatLabel(value) {\n        if (value !== this._floatLabel) {\n            this._floatLabel = value || this._getDefaultFloatLabelState();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    get _control() {\n        // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.\n        //  We should clean this up once Ivy is the default renderer.\n        return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n    }\n    set _control(value) {\n        this._explicitFormFieldControl = value;\n    }\n    /**\n     * Gets the id of the label element. If no label is present, returns `null`.\n     */\n    getLabelId() {\n        return this._hasFloatingLabel() ? this._labelId : null;\n    }\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin() {\n        return this._connectionContainerRef || this._elementRef;\n    }\n    ngAfterContentInit() {\n        this._validateControlChild();\n        const control = this._control;\n        if (control.controlType) {\n            this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n        }\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        control.stateChanges.pipe(startWith(null)).subscribe(() => {\n            this._validatePlaceholders();\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        });\n        // Run change detection if the value changes.\n        if (control.ngControl && control.ngControl.valueChanges) {\n            control.ngControl.valueChanges\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => this._changeDetectorRef.markForCheck());\n        }\n        // Note that we have to run outside of the `NgZone` explicitly,\n        // in order to avoid throwing users into an infinite loop\n        // if `zone-patch-rxjs` is included.\n        this._ngZone.runOutsideAngular(() => {\n            this._ngZone.onStable.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                if (this._outlineGapCalculationNeededOnStable) {\n                    this.updateOutlineGap();\n                }\n            });\n        });\n        // Run change detection and update the outline if the suffix or prefix changes.\n        merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n            this._outlineGapCalculationNeededOnStable = true;\n            this._changeDetectorRef.markForCheck();\n        });\n        // Re-validate when the number of hints changes.\n        this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n            this._processHints();\n            this._changeDetectorRef.markForCheck();\n        });\n        // Update the aria-described by when the number of errors changes.\n        this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (this._dir) {\n            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                if (typeof requestAnimationFrame === 'function') {\n                    this._ngZone.runOutsideAngular(() => {\n                        requestAnimationFrame(() => this.updateOutlineGap());\n                    });\n                }\n                else {\n                    this.updateOutlineGap();\n                }\n            });\n        }\n    }\n    ngAfterContentChecked() {\n        this._validateControlChild();\n        if (this._outlineGapCalculationNeededImmediately) {\n            this.updateOutlineGap();\n        }\n    }\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._subscriptAnimationState = 'enter';\n        this._changeDetectorRef.detectChanges();\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop) {\n        const ngControl = this._control ? this._control.ngControl : null;\n        return ngControl && ngControl[prop];\n    }\n    _hasPlaceholder() {\n        return !!((this._control && this._control.placeholder) || this._placeholderChild);\n    }\n    _hasLabel() {\n        return !!(this._labelChildNonStatic || this._labelChildStatic);\n    }\n    _shouldLabelFloat() {\n        return (this._canLabelFloat() &&\n            ((this._control && this._control.shouldLabelFloat) || this._shouldAlwaysFloat()));\n    }\n    _hideControlPlaceholder() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return ((this.appearance === 'legacy' && !this._hasLabel()) ||\n            (this._hasLabel() && !this._shouldLabelFloat()));\n    }\n    _hasFloatingLabel() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this._hasLabel() || (this.appearance === 'legacy' && this._hasPlaceholder());\n    }\n    /** Determines whether to display hints or errors. */\n    _getDisplayedMessages() {\n        return this._errorChildren && this._errorChildren.length > 0 && this._control.errorState\n            ? 'error'\n            : 'hint';\n    }\n    /** Animates the placeholder up and locks it in position. */\n    _animateAndLockLabel() {\n        if (this._hasFloatingLabel() && this._canLabelFloat()) {\n            // If animations are disabled, we shouldn't go in here,\n            // because the `transitionend` will never fire.\n            if (this._animationsEnabled && this._label) {\n                this._showAlwaysAnimate = true;\n                fromEvent(this._label.nativeElement, 'transitionend')\n                    .pipe(take(1))\n                    .subscribe(() => {\n                    this._showAlwaysAnimate = false;\n                });\n            }\n            this.floatLabel = 'always';\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     */\n    _validatePlaceholders() {\n        if (this._control.placeholder &&\n            this._placeholderChild &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatFormFieldPlaceholderConflictError();\n        }\n    }\n    /** Does any extra processing that is required when handling the hints. */\n    _processHints() {\n        this._validateHints();\n        this._syncDescribedByIds();\n    }\n    /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     */\n    _validateHints() {\n        if (this._hintChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            let startHint;\n            let endHint;\n            this._hintChildren.forEach((hint) => {\n                if (hint.align === 'start') {\n                    if (startHint || this.hintLabel) {\n                        throw getMatFormFieldDuplicatedHintError('start');\n                    }\n                    startHint = hint;\n                }\n                else if (hint.align === 'end') {\n                    if (endHint) {\n                        throw getMatFormFieldDuplicatedHintError('end');\n                    }\n                    endHint = hint;\n                }\n            });\n        }\n    }\n    /** Gets the default float label state. */\n    _getDefaultFloatLabelState() {\n        return (this._defaults && this._defaults.floatLabel) || 'auto';\n    }\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     */\n    _syncDescribedByIds() {\n        if (this._control) {\n            let ids = [];\n            // TODO(wagnermaciel): Remove the type check when we find the root cause of this bug.\n            if (this._control.userAriaDescribedBy &&\n                typeof this._control.userAriaDescribedBy === 'string') {\n                ids.push(...this._control.userAriaDescribedBy.split(' '));\n            }\n            if (this._getDisplayedMessages() === 'hint') {\n                const startHint = this._hintChildren\n                    ? this._hintChildren.find(hint => hint.align === 'start')\n                    : null;\n                const endHint = this._hintChildren\n                    ? this._hintChildren.find(hint => hint.align === 'end')\n                    : null;\n                if (startHint) {\n                    ids.push(startHint.id);\n                }\n                else if (this._hintLabel) {\n                    ids.push(this._hintLabelId);\n                }\n                if (endHint) {\n                    ids.push(endHint.id);\n                }\n            }\n            else if (this._errorChildren) {\n                ids.push(...this._errorChildren.map(error => error.id));\n            }\n            this._control.setDescribedByIds(ids);\n        }\n    }\n    /** Throws an error if the form field's control is missing. */\n    _validateControlChild() {\n        if (!this._control && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatFormFieldMissingControlError();\n        }\n    }\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     */\n    updateOutlineGap() {\n        const labelEl = this._label ? this._label.nativeElement : null;\n        const container = this._connectionContainerRef.nativeElement;\n        const outlineStartSelector = '.mat-form-field-outline-start';\n        const outlineGapSelector = '.mat-form-field-outline-gap';\n        // getBoundingClientRect isn't available on the server.\n        if (this.appearance !== 'outline' || !this._platform.isBrowser) {\n            return;\n        }\n        // If there is no content, set the gap elements to zero.\n        if (!labelEl || !labelEl.children.length || !labelEl.textContent.trim()) {\n            const gapElements = container.querySelectorAll(`${outlineStartSelector}, ${outlineGapSelector}`);\n            for (let i = 0; i < gapElements.length; i++) {\n                gapElements[i].style.width = '0';\n            }\n            return;\n        }\n        // If the element is not present in the DOM, the outline gap will need to be calculated\n        // the next time it is checked and in the DOM.\n        if (!this._isAttachedToDOM()) {\n            this._outlineGapCalculationNeededImmediately = true;\n            return;\n        }\n        let startWidth = 0;\n        let gapWidth = 0;\n        const startEls = container.querySelectorAll(outlineStartSelector);\n        const gapEls = container.querySelectorAll(outlineGapSelector);\n        if (this._label && this._label.nativeElement.children.length) {\n            const containerRect = container.getBoundingClientRect();\n            // If the container's width and height are zero, it means that the element is\n            // invisible and we can't calculate the outline gap. Mark the element as needing\n            // to be checked the next time the zone stabilizes. We can't do this immediately\n            // on the next change detection, because even if the element becomes visible,\n            // the `ClientRect` won't be reclaculated immediately. We reset the\n            // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n            if (containerRect.width === 0 && containerRect.height === 0) {\n                this._outlineGapCalculationNeededOnStable = true;\n                this._outlineGapCalculationNeededImmediately = false;\n                return;\n            }\n            const containerStart = this._getStartEnd(containerRect);\n            const labelChildren = labelEl.children;\n            const labelStart = this._getStartEnd(labelChildren[0].getBoundingClientRect());\n            let labelWidth = 0;\n            for (let i = 0; i < labelChildren.length; i++) {\n                labelWidth += labelChildren[i].offsetWidth;\n            }\n            startWidth = Math.abs(labelStart - containerStart) - outlineGapPadding;\n            gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n        }\n        for (let i = 0; i < startEls.length; i++) {\n            startEls[i].style.width = `${startWidth}px`;\n        }\n        for (let i = 0; i < gapEls.length; i++) {\n            gapEls[i].style.width = `${gapWidth}px`;\n        }\n        this._outlineGapCalculationNeededOnStable = this._outlineGapCalculationNeededImmediately =\n            false;\n    }\n    /** Gets the start end of the rect considering the current directionality. */\n    _getStartEnd(rect) {\n        return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n    }\n    /** Checks whether the form field is attached to the DOM. */\n    _isAttachedToDOM() {\n        const element = this._elementRef.nativeElement;\n        if (element.getRootNode) {\n            const rootNode = element.getRootNode();\n            // If the element is inside the DOM the root node will be either the document\n            // or the closest shadow root, otherwise it'll be the element itself.\n            return rootNode && rootNode !== element;\n        }\n        // Otherwise fall back to checking if it's in the document. This doesn't account for\n        // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n        return document.documentElement.contains(element);\n    }\n}\nMatFormField.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFormField, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Directionality, optional: true }, { token: MAT_FORM_FIELD_DEFAULT_OPTIONS, optional: true }, { token: i2.Platform }, { token: i0.NgZone }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatFormField.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatFormField, selector: \"mat-form-field\", inputs: { color: \"color\", appearance: \"appearance\", hideRequiredMarker: \"hideRequiredMarker\", hintLabel: \"hintLabel\", floatLabel: \"floatLabel\" }, host: { properties: { \"class.mat-form-field-appearance-standard\": \"appearance == \\\"standard\\\"\", \"class.mat-form-field-appearance-fill\": \"appearance == \\\"fill\\\"\", \"class.mat-form-field-appearance-outline\": \"appearance == \\\"outline\\\"\", \"class.mat-form-field-appearance-legacy\": \"appearance == \\\"legacy\\\"\", \"class.mat-form-field-invalid\": \"_control.errorState\", \"class.mat-form-field-can-float\": \"_canLabelFloat()\", \"class.mat-form-field-should-float\": \"_shouldLabelFloat()\", \"class.mat-form-field-has-label\": \"_hasFloatingLabel()\", \"class.mat-form-field-hide-placeholder\": \"_hideControlPlaceholder()\", \"class.mat-form-field-disabled\": \"_control.disabled\", \"class.mat-form-field-autofilled\": \"_control.autofilled\", \"class.mat-focused\": \"_control.focused\", \"class.ng-untouched\": \"_shouldForward(\\\"untouched\\\")\", \"class.ng-touched\": \"_shouldForward(\\\"touched\\\")\", \"class.ng-pristine\": \"_shouldForward(\\\"pristine\\\")\", \"class.ng-dirty\": \"_shouldForward(\\\"dirty\\\")\", \"class.ng-valid\": \"_shouldForward(\\\"valid\\\")\", \"class.ng-invalid\": \"_shouldForward(\\\"invalid\\\")\", \"class.ng-pending\": \"_shouldForward(\\\"pending\\\")\", \"class._mat-animation-noopable\": \"!_animationsEnabled\" }, classAttribute: \"mat-form-field\" }, providers: [{ provide: MAT_FORM_FIELD, useExisting: MatFormField }], queries: [{ propertyName: \"_controlNonStatic\", first: true, predicate: MatFormFieldControl, descendants: true }, { propertyName: \"_controlStatic\", first: true, predicate: MatFormFieldControl, descendants: true, static: true }, { propertyName: \"_labelChildNonStatic\", first: true, predicate: MatLabel, descendants: true }, { propertyName: \"_labelChildStatic\", first: true, predicate: MatLabel, descendants: true, static: true }, { propertyName: \"_placeholderChild\", first: true, predicate: MatPlaceholder, descendants: true }, { propertyName: \"_errorChildren\", predicate: MAT_ERROR, descendants: true }, { propertyName: \"_hintChildren\", predicate: _MAT_HINT, descendants: true }, { propertyName: \"_prefixChildren\", predicate: MAT_PREFIX, descendants: true }, { propertyName: \"_suffixChildren\", predicate: MAT_SUFFIX, descendants: true }], viewQueries: [{ propertyName: \"_connectionContainerRef\", first: true, predicate: [\"connectionContainer\"], descendants: true, static: true }, { propertyName: \"_inputContainerRef\", first: true, predicate: [\"inputContainer\"], descendants: true }, { propertyName: \"_label\", first: true, predicate: [\"label\"], descendants: true }], exportAs: [\"matFormField\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-form-field-wrapper\\\">\\n  <div class=\\\"mat-form-field-flex\\\" #connectionContainer\\n       (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\">\\n\\n    <!-- Outline used for outline appearance. -->\\n    <ng-container *ngIf=\\\"appearance == 'outline'\\\">\\n      <div class=\\\"mat-form-field-outline\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n      <div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n    </ng-container>\\n\\n    <div\\n      class=\\\"mat-form-field-prefix\\\"\\n      *ngIf=\\\"_prefixChildren.length\\\"\\n      (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n      [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\">\\n      <ng-content select=\\\"[matPrefix]\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-infix\\\" #inputContainer>\\n      <ng-content></ng-content>\\n\\n      <span class=\\\"mat-form-field-label-wrapper\\\">\\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\\n             read if it comes before the control in the DOM. -->\\n        <label class=\\\"mat-form-field-label\\\"\\n               (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n               [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\"\\n               [id]=\\\"_labelId\\\"\\n               [attr.for]=\\\"_control.id\\\"\\n               [attr.aria-owns]=\\\"_control.id\\\"\\n               [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-accent]=\\\"color == 'accent'\\\"\\n               [class.mat-warn]=\\\"color == 'warn'\\\"\\n               #label\\n               *ngIf=\\\"_hasFloatingLabel()\\\"\\n               [ngSwitch]=\\\"_hasLabel()\\\">\\n\\n          <!-- @breaking-change 8.0.0 remove in favor of mat-label element an placeholder attr. -->\\n          <ng-container *ngSwitchCase=\\\"false\\\">\\n            <ng-content select=\\\"mat-placeholder\\\"></ng-content>\\n            <span>{{_control.placeholder}}</span>\\n          </ng-container>\\n\\n          <ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n\\n          <!-- @breaking-change 8.0.0 remove `mat-placeholder-required` class -->\\n          <span\\n            class=\\\"mat-placeholder-required mat-form-field-required-marker\\\"\\n            aria-hidden=\\\"true\\\"\\n            *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&#32;*</span>\\n        </label>\\n      </span>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\">\\n      <ng-content select=\\\"[matSuffix]\\\"></ng-content>\\n    </div>\\n  </div>\\n\\n  <!-- Underline used for legacy, standard, and box appearances. -->\\n  <div class=\\\"mat-form-field-underline\\\"\\n       *ngIf=\\\"appearance != 'outline'\\\">\\n    <span class=\\\"mat-form-field-ripple\\\"\\n          [class.mat-accent]=\\\"color == 'accent'\\\"\\n          [class.mat-warn]=\\\"color == 'warn'\\\"></span>\\n  </div>\\n\\n  <div class=\\\"mat-form-field-subscript-wrapper\\\"\\n       [ngSwitch]=\\\"_getDisplayedMessages()\\\">\\n    <div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <ng-content select=\\\"mat-error\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\"\\n      [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <!-- TODO(mmalerba): use an actual <mat-hint> once all selectors are switched to mat-* -->\\n      <div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div>\\n      <ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content>\\n      <div class=\\\"mat-form-field-hint-spacer\\\"></div>\\n      <ng-content select=\\\"mat-hint[align='end']\\\"></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.cdk-high-contrast-active .mat-form-field-disabled .mat-form-field-label{color:GrayText}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:none;transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field-hint-end{order:1}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.cdk-high-contrast-active .mat-form-field-appearance-fill.mat-form-field-disabled .mat-form-field-flex{outline-color:GrayText}.cdk-high-contrast-active .mat-form-field-appearance-fill.mat-focused .mat-form-field-flex{outline:dashed 3px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit;box-sizing:content-box}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element:not([type=password])::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date],.mat-input-element[type=datetime],.mat-input-element[type=datetime-local],.mat-input-element[type=month],.mat-input-element[type=week],.mat-input-element[type=time]{line-height:1}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder{-webkit-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-input-element::placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{opacity:0}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px)}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px;border-top-color:GrayText}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.cdk-high-contrast-active .mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick{border:3px dashed}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.cdk-high-contrast-active .mat-form-field-appearance-outline.mat-form-field-disabled .mat-form-field-outline{color:GrayText}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: [\"cdkObserveContentDisabled\", \"debounce\"], outputs: [\"cdkObserveContent\"], exportAs: [\"cdkObserveContent\"] }, { type: i3.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i3.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }], animations: [matFormFieldAnimations.transitionMessages], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFormField, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-form-field', exportAs: 'matFormField', animations: [matFormFieldAnimations.transitionMessages], host: {\n                        'class': 'mat-form-field',\n                        '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n                        '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n                        '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n                        '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n                        '[class.mat-form-field-invalid]': '_control.errorState',\n                        '[class.mat-form-field-can-float]': '_canLabelFloat()',\n                        '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n                        '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n                        '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n                        '[class.mat-form-field-disabled]': '_control.disabled',\n                        '[class.mat-form-field-autofilled]': '_control.autofilled',\n                        '[class.mat-focused]': '_control.focused',\n                        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n                        '[class.ng-touched]': '_shouldForward(\"touched\")',\n                        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n                        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n                        '[class.ng-valid]': '_shouldForward(\"valid\")',\n                        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n                        '[class.ng-pending]': '_shouldForward(\"pending\")',\n                        '[class._mat-animation-noopable]': '!_animationsEnabled',\n                    }, inputs: ['color'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [{ provide: MAT_FORM_FIELD, useExisting: MatFormField }], template: \"<div class=\\\"mat-form-field-wrapper\\\">\\n  <div class=\\\"mat-form-field-flex\\\" #connectionContainer\\n       (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\">\\n\\n    <!-- Outline used for outline appearance. -->\\n    <ng-container *ngIf=\\\"appearance == 'outline'\\\">\\n      <div class=\\\"mat-form-field-outline\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n      <div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n    </ng-container>\\n\\n    <div\\n      class=\\\"mat-form-field-prefix\\\"\\n      *ngIf=\\\"_prefixChildren.length\\\"\\n      (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n      [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\">\\n      <ng-content select=\\\"[matPrefix]\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-infix\\\" #inputContainer>\\n      <ng-content></ng-content>\\n\\n      <span class=\\\"mat-form-field-label-wrapper\\\">\\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\\n             read if it comes before the control in the DOM. -->\\n        <label class=\\\"mat-form-field-label\\\"\\n               (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n               [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\"\\n               [id]=\\\"_labelId\\\"\\n               [attr.for]=\\\"_control.id\\\"\\n               [attr.aria-owns]=\\\"_control.id\\\"\\n               [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-accent]=\\\"color == 'accent'\\\"\\n               [class.mat-warn]=\\\"color == 'warn'\\\"\\n               #label\\n               *ngIf=\\\"_hasFloatingLabel()\\\"\\n               [ngSwitch]=\\\"_hasLabel()\\\">\\n\\n          <!-- @breaking-change 8.0.0 remove in favor of mat-label element an placeholder attr. -->\\n          <ng-container *ngSwitchCase=\\\"false\\\">\\n            <ng-content select=\\\"mat-placeholder\\\"></ng-content>\\n            <span>{{_control.placeholder}}</span>\\n          </ng-container>\\n\\n          <ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n\\n          <!-- @breaking-change 8.0.0 remove `mat-placeholder-required` class -->\\n          <span\\n            class=\\\"mat-placeholder-required mat-form-field-required-marker\\\"\\n            aria-hidden=\\\"true\\\"\\n            *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&#32;*</span>\\n        </label>\\n      </span>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\">\\n      <ng-content select=\\\"[matSuffix]\\\"></ng-content>\\n    </div>\\n  </div>\\n\\n  <!-- Underline used for legacy, standard, and box appearances. -->\\n  <div class=\\\"mat-form-field-underline\\\"\\n       *ngIf=\\\"appearance != 'outline'\\\">\\n    <span class=\\\"mat-form-field-ripple\\\"\\n          [class.mat-accent]=\\\"color == 'accent'\\\"\\n          [class.mat-warn]=\\\"color == 'warn'\\\"></span>\\n  </div>\\n\\n  <div class=\\\"mat-form-field-subscript-wrapper\\\"\\n       [ngSwitch]=\\\"_getDisplayedMessages()\\\">\\n    <div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <ng-content select=\\\"mat-error\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\"\\n      [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <!-- TODO(mmalerba): use an actual <mat-hint> once all selectors are switched to mat-* -->\\n      <div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div>\\n      <ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content>\\n      <div class=\\\"mat-form-field-hint-spacer\\\"></div>\\n      <ng-content select=\\\"mat-hint[align='end']\\\"></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.cdk-high-contrast-active .mat-form-field-disabled .mat-form-field-label{color:GrayText}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:none;transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field-hint-end{order:1}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.cdk-high-contrast-active .mat-form-field-appearance-fill.mat-form-field-disabled .mat-form-field-flex{outline-color:GrayText}.cdk-high-contrast-active .mat-form-field-appearance-fill.mat-focused .mat-form-field-flex{outline:dashed 3px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit;box-sizing:content-box}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element:not([type=password])::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date],.mat-input-element[type=datetime],.mat-input-element[type=datetime-local],.mat-input-element[type=month],.mat-input-element[type=week],.mat-input-element[type=time]{line-height:1}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder{-webkit-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-input-element::placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{opacity:0}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px)}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px;border-top-color:GrayText}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.cdk-high-contrast-active .mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick{border:3px dashed}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.cdk-high-contrast-active .mat-form-field-appearance-outline.mat-form-field-disabled .mat-form-field-outline{color:GrayText}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD_DEFAULT_OPTIONS]\n                    }] }, { type: i2.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { appearance: [{\n                type: Input\n            }], hideRequiredMarker: [{\n                type: Input\n            }], hintLabel: [{\n                type: Input\n            }], floatLabel: [{\n                type: Input\n            }], _connectionContainerRef: [{\n                type: ViewChild,\n                args: ['connectionContainer', { static: true }]\n            }], _inputContainerRef: [{\n                type: ViewChild,\n                args: ['inputContainer']\n            }], _label: [{\n                type: ViewChild,\n                args: ['label']\n            }], _controlNonStatic: [{\n                type: ContentChild,\n                args: [MatFormFieldControl]\n            }], _controlStatic: [{\n                type: ContentChild,\n                args: [MatFormFieldControl, { static: true }]\n            }], _labelChildNonStatic: [{\n                type: ContentChild,\n                args: [MatLabel]\n            }], _labelChildStatic: [{\n                type: ContentChild,\n                args: [MatLabel, { static: true }]\n            }], _placeholderChild: [{\n                type: ContentChild,\n                args: [MatPlaceholder]\n            }], _errorChildren: [{\n                type: ContentChildren,\n                args: [MAT_ERROR, { descendants: true }]\n            }], _hintChildren: [{\n                type: ContentChildren,\n                args: [_MAT_HINT, { descendants: true }]\n            }], _prefixChildren: [{\n                type: ContentChildren,\n                args: [MAT_PREFIX, { descendants: true }]\n            }], _suffixChildren: [{\n                type: ContentChildren,\n                args: [MAT_SUFFIX, { descendants: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatFormFieldModule {\n}\nMatFormFieldModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFormFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatFormFieldModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFormFieldModule, declarations: [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix], imports: [CommonModule, MatCommonModule, ObserversModule], exports: [MatCommonModule,\n        MatError,\n        MatFormField,\n        MatHint,\n        MatLabel,\n        MatPlaceholder,\n        MatPrefix,\n        MatSuffix] });\nMatFormFieldModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFormFieldModule, imports: [[CommonModule, MatCommonModule, ObserversModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatFormFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix],\n                    imports: [CommonModule, MatCommonModule, ObserversModule],\n                    exports: [\n                        MatCommonModule,\n                        MatError,\n                        MatFormField,\n                        MatHint,\n                        MatLabel,\n                        MatPlaceholder,\n                        MatPrefix,\n                        MatSuffix,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_ERROR, MAT_FORM_FIELD, MAT_FORM_FIELD_DEFAULT_OPTIONS, MAT_PREFIX, MAT_SUFFIX, MatError, MatFormField, MatFormFieldControl, MatFormFieldModule, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix, _MAT_HINT, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, getMatFormFieldPlaceholderConflictError, matFormFieldAnimations };\n","import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            },\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n}\nAutofillMonitor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: AutofillMonitor, deps: [{ token: i1.Platform }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nAutofillMonitor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: AutofillMonitor, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: AutofillMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }]; } });\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkAutofill, deps: [{ token: i0.ElementRef }, { token: AutofillMonitor }], target: i0.ɵɵFactoryTarget.Directive });\nCdkAutofill.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkAutofill, selector: \"[cdkAutofill]\", outputs: { cdkAutofill: \"cdkAutofill\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkAutofill, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAutofill]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: AutofillMonitor }]; }, propDecorators: { cdkAutofill: [{\n                type: Output\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._isViewInited = false;\n        /** Handles `focus` and `blur` events. */\n        this._handleFocusEvent = (event) => {\n            this._hasFocus = event.type === 'focus';\n        };\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n        return this._minRows;\n    }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n        return this._maxRows;\n    }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() {\n        return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        if (value) {\n            this._textareaElement.setAttribute('placeholder', value);\n        }\n        else {\n            this._textareaElement.removeAttribute('placeholder');\n        }\n        this._cacheTextareaPlaceholderHeight();\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n                this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n                this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        textareaClone.remove();\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox\n            ? 'cdk-textarea-autosize-measuring-firefox'\n            : 'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTextareaAutosize, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTextareaAutosize.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTextareaAutosize, selector: \"textarea[cdkTextareaAutosize]\", inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"], placeholder: \"placeholder\" }, host: { attributes: { \"rows\": \"1\" }, listeners: { \"input\": \"_noopInputHandler()\" }, classAttribute: \"cdk-textarea-autosize\" }, exportAs: [\"cdkTextareaAutosize\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTextareaAutosize, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    }, propDecorators: { minRows: [{\n                type: Input,\n                args: ['cdkAutosizeMinRows']\n            }], maxRows: [{\n                type: Input,\n                args: ['cdkAutosizeMaxRows']\n            }], enabled: [{\n                type: Input,\n                args: ['cdkTextareaAutosize']\n            }], placeholder: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TextFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTextFieldModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TextFieldModule, declarations: [CdkAutofill, CdkTextareaAutosize], exports: [CdkAutofill, CdkTextareaAutosize] });\nTextFieldModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TextFieldModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TextFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdkAutofill, CdkTextareaAutosize],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Optional, Self, Inject, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState, MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\nimport * as i5 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport * as i4 from '@angular/cdk/text-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit',\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nconst _MatInputBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n});\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputBase {\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week',\n        ].filter(t => getSupportedInputTypes().has(t));\n        this._iOSKeyupListener = (event) => {\n            const el = event.target;\n            // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n            // indicate different things. If the value is 0, it means that the caret is at the start\n            // of the input, whereas a value of `null` means that the input doesn't support\n            // manipulating the selection range. Inputs that don't support setting the selection range\n            // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n            // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n            if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                // `1, 1` fixes it for the first time that you type text and\n                // then hold delete. Toggling to `1, 1` and then back to\n                // `0, 0` seems to completely fix it.\n                el.setSelectionRange(1, 1);\n                el.setSelectionRange(0, 0);\n            }\n        };\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', this._iOSKeyupListener);\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!_formField;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple\n                ? 'mat-native-select-multiple'\n                : 'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        var _a, _b, _c, _d;\n        return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Input type of the element. */\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._inputValueAccessor.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        this._readonly = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n        if (this._platform.IOS) {\n            this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        var _a, _b;\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder\n                ? element.setAttribute('placeholder', placeholder)\n                : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._isNeverEmpty() &&\n            !this._elementRef.nativeElement.value &&\n            !this._isBadInput() &&\n            !this.autofilled);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return (this.focused ||\n                selectElement.multiple ||\n                !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n        const element = this._elementRef.nativeElement;\n        return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n}\nMatInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInput, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }, { token: MAT_INPUT_VALUE_ACCESSOR, optional: true, self: true }, { token: i4.AutofillMonitor }, { token: i0.NgZone }, { token: MAT_FORM_FIELD, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", inputs: { disabled: \"disabled\", id: \"id\", placeholder: \"placeholder\", name: \"name\", required: \"required\", type: \"type\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], value: \"value\", readonly: \"readonly\" }, host: { listeners: { \"focus\": \"_focusChanged(true)\", \"blur\": \"_focusChanged(false)\", \"input\": \"_onInput()\" }, properties: { \"class.mat-input-server\": \"_isServer\", \"attr.id\": \"id\", \"attr.data-placeholder\": \"placeholder\", \"disabled\": \"disabled\", \"required\": \"required\", \"attr.name\": \"name || null\", \"attr.readonly\": \"readonly && !_isNativeSelect || null\", \"class.mat-native-select-inline\": \"_isInlineSelect()\", \"attr.aria-invalid\": \"(empty && required) ? null : errorState\", \"attr.aria-required\": \"required\" }, classAttribute: \"mat-input-element mat-form-field-autofill-control\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatInput }], exportAs: [\"matInput\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        /**\n                         * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                         */\n                        'class': 'mat-input-element mat-form-field-autofill-control',\n                        '[class.mat-input-server]': '_isServer',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        // At the time of writing, we have a lot of customer tests that look up the input based on its\n                        // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                        // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                        '[attr.data-placeholder]': 'placeholder',\n                        '[disabled]': 'disabled',\n                        '[required]': 'required',\n                        '[attr.name]': 'name || null',\n                        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                        '[class.mat-native-select-inline]': '_isInlineSelect()',\n                        // Only mark the input as invalid for assistive technology if it has a value since the\n                        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                        '[attr.aria-required]': 'required',\n                        '(focus)': '_focusChanged(true)',\n                        '(blur)': '_focusChanged(false)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i2.NgControl, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }] }, { type: i2.NgForm, decorators: [{\n                        type: Optional\n                    }] }, { type: i2.FormGroupDirective, decorators: [{\n                        type: Optional\n                    }] }, { type: i3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }, {\n                        type: Inject,\n                        args: [MAT_INPUT_VALUE_ACCESSOR]\n                    }] }, { type: i4.AutofillMonitor }, { type: i0.NgZone }, { type: i5.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD]\n                    }] }];\n    }, propDecorators: { disabled: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], errorStateMatcher: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInputModule, declarations: [MatInput], imports: [TextFieldModule, MatFormFieldModule, MatCommonModule], exports: [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule,\n        MatInput] });\nMatInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInputModule, providers: [ErrorStateMatcher], imports: [[TextFieldModule, MatFormFieldModule, MatCommonModule], TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MatInput],\n                    imports: [TextFieldModule, MatFormFieldModule, MatCommonModule],\n                    exports: [\n                        TextFieldModule,\n                        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                        // be used together with `MatFormField`.\n                        MatFormFieldModule,\n                        MatInput,\n                    ],\n                    providers: [ErrorStateMatcher],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };\n","import * as i8 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i9 from '@angular/cdk/overlay';\nimport { Overlay, FlexibleConnectedPositionStrategy, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport * as i7 from '@angular/cdk/portal';\nimport { ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, Injectable, Optional, SkipSelf, InjectionToken, Inject, ViewChild, forwardRef, Directive, Attribute, ContentChild, InjectFlags, Self, TemplateRef, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/material/core';\nimport { DateAdapter, MAT_DATE_FORMATS, mixinColor, mixinErrorState, MatCommonModule } from '@angular/material/core';\nimport { Subject, Subscription, merge, of } from 'rxjs';\nimport { ESCAPE, hasModifierKey, SPACE, ENTER, PAGE_DOWN, PAGE_UP, END, HOME, DOWN_ARROW, UP_ARROW, RIGHT_ARROW, LEFT_ARROW, BACKSPACE } from '@angular/cdk/keycodes';\nimport { take, startWith, filter } from 'rxjs/operators';\nimport * as i2 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { trigger, transition, animate, keyframes, style, state } from '@angular/animations';\nimport * as i2$2 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators, NgControl } from '@angular/forms';\nimport * as i2$1 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl } from '@angular/material/form-field';\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction createMissingDateImplError(provider) {\n    return Error(`MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n        `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n        `custom implementation.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nclass MatCalendarCell {\n    constructor(value, displayValue, ariaLabel, enabled, cssClasses = {}, compareValue = value, rawValue) {\n        this.value = value;\n        this.displayValue = displayValue;\n        this.ariaLabel = ariaLabel;\n        this.enabled = enabled;\n        this.cssClasses = cssClasses;\n        this.compareValue = compareValue;\n        this.rawValue = rawValue;\n    }\n}\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\nclass MatCalendarBody {\n    constructor(_elementRef, _ngZone) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /** The number of columns in the table. */\n        this.numCols = 7;\n        /** The cell number of the active cell in the table. */\n        this.activeCell = 0;\n        /** Whether a range is being selected. */\n        this.isRange = false;\n        /**\n         * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n         * maintained even as the table resizes.\n         */\n        this.cellAspectRatio = 1;\n        /** Start of the preview range. */\n        this.previewStart = null;\n        /** End of the preview range. */\n        this.previewEnd = null;\n        /** Emits when a new value is selected. */\n        this.selectedValueChange = new EventEmitter();\n        /** Emits when the preview has changed as a result of a user action. */\n        this.previewChange = new EventEmitter();\n        /**\n         * Event handler for when the user enters an element\n         * inside the calendar body (e.g. by hovering in or focus).\n         */\n        this._enterHandler = (event) => {\n            if (this._skipNextFocus && event.type === 'focus') {\n                this._skipNextFocus = false;\n                return;\n            }\n            // We only need to hit the zone when we're selecting a range.\n            if (event.target && this.isRange) {\n                const cell = this._getCellFromElement(event.target);\n                if (cell) {\n                    this._ngZone.run(() => this.previewChange.emit({ value: cell.enabled ? cell : null, event }));\n                }\n            }\n        };\n        /**\n         * Event handler for when the user's pointer leaves an element\n         * inside the calendar body (e.g. by hovering out or blurring).\n         */\n        this._leaveHandler = (event) => {\n            // We only need to hit the zone when we're selecting a range.\n            if (this.previewEnd !== null && this.isRange) {\n                // Only reset the preview end value when leaving cells. This looks better, because\n                // we have a gap between the cells and the rows and we don't want to remove the\n                // range just for it to show up again when the user moves a few pixels to the side.\n                if (event.target && this._getCellFromElement(event.target)) {\n                    this._ngZone.run(() => this.previewChange.emit({ value: null, event }));\n                }\n            }\n        };\n        _ngZone.runOutsideAngular(() => {\n            const element = _elementRef.nativeElement;\n            element.addEventListener('mouseenter', this._enterHandler, true);\n            element.addEventListener('focus', this._enterHandler, true);\n            element.addEventListener('mouseleave', this._leaveHandler, true);\n            element.addEventListener('blur', this._leaveHandler, true);\n        });\n    }\n    /** Called when a cell is clicked. */\n    _cellClicked(cell, event) {\n        if (cell.enabled) {\n            this.selectedValueChange.emit({ value: cell.value, event });\n        }\n    }\n    /** Returns whether a cell should be marked as selected. */\n    _isSelected(value) {\n        return this.startValue === value || this.endValue === value;\n    }\n    ngOnChanges(changes) {\n        const columnChanges = changes['numCols'];\n        const { rows, numCols } = this;\n        if (changes['rows'] || columnChanges) {\n            this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n        if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n            this._cellPadding = `${(50 * this.cellAspectRatio) / numCols}%`;\n        }\n        if (columnChanges || !this._cellWidth) {\n            this._cellWidth = `${100 / numCols}%`;\n        }\n    }\n    ngOnDestroy() {\n        const element = this._elementRef.nativeElement;\n        element.removeEventListener('mouseenter', this._enterHandler, true);\n        element.removeEventListener('focus', this._enterHandler, true);\n        element.removeEventListener('mouseleave', this._leaveHandler, true);\n        element.removeEventListener('blur', this._leaveHandler, true);\n    }\n    /** Returns whether a cell is active. */\n    _isActiveCell(rowIndex, colIndex) {\n        let cellNumber = rowIndex * this.numCols + colIndex;\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this._firstRowOffset;\n        }\n        return cellNumber == this.activeCell;\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     *\n     * Adding a 0ms setTimeout seems to fix Voiceover losing focus when pressing PageUp/PageDown\n     * (issue #24330).\n     *\n     * Determined a 0ms by gradually increasing duration from 0 and testing two use cases with screen\n     * reader enabled:\n     *\n     * 1. Pressing PageUp/PageDown repeatedly with pausing between each key press.\n     * 2. Pressing and holding the PageDown key with repeated keys enabled.\n     *\n     * Test 1 worked roughly 95-99% of the time with 0ms and got a little bit better as the duration\n     * increased. Test 2 got slightly better until the duration was long enough to interfere with\n     * repeated keys. If the repeated key speed was faster than the timeout duration, then pressing\n     * and holding pagedown caused the entire page to scroll.\n     *\n     * Since repeated key speed can verify across machines, determined that any duration could\n     * potentially interfere with repeated keys. 0ms would be best because it almost entirely\n     * eliminates the focus being lost in Voiceover (#24330) without causing unintended side effects.\n     * Adding delay also complicates writing tests.\n     */\n    _focusActiveCell(movePreview = true) {\n        this._ngZone.runOutsideAngular(() => {\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                setTimeout(() => {\n                    const activeCell = this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n                    if (activeCell) {\n                        if (!movePreview) {\n                            this._skipNextFocus = true;\n                        }\n                        activeCell.focus();\n                    }\n                });\n            });\n        });\n    }\n    /** Gets whether a value is the start of the main range. */\n    _isRangeStart(value) {\n        return isStart(value, this.startValue, this.endValue);\n    }\n    /** Gets whether a value is the end of the main range. */\n    _isRangeEnd(value) {\n        return isEnd(value, this.startValue, this.endValue);\n    }\n    /** Gets whether a value is within the currently-selected range. */\n    _isInRange(value) {\n        return isInRange(value, this.startValue, this.endValue, this.isRange);\n    }\n    /** Gets whether a value is the start of the comparison range. */\n    _isComparisonStart(value) {\n        return isStart(value, this.comparisonStart, this.comparisonEnd);\n    }\n    /** Whether the cell is a start bridge cell between the main and comparison ranges. */\n    _isComparisonBridgeStart(value, rowIndex, colIndex) {\n        if (!this._isComparisonStart(value) || this._isRangeStart(value) || !this._isInRange(value)) {\n            return false;\n        }\n        let previousCell = this.rows[rowIndex][colIndex - 1];\n        if (!previousCell) {\n            const previousRow = this.rows[rowIndex - 1];\n            previousCell = previousRow && previousRow[previousRow.length - 1];\n        }\n        return previousCell && !this._isRangeEnd(previousCell.compareValue);\n    }\n    /** Whether the cell is an end bridge cell between the main and comparison ranges. */\n    _isComparisonBridgeEnd(value, rowIndex, colIndex) {\n        if (!this._isComparisonEnd(value) || this._isRangeEnd(value) || !this._isInRange(value)) {\n            return false;\n        }\n        let nextCell = this.rows[rowIndex][colIndex + 1];\n        if (!nextCell) {\n            const nextRow = this.rows[rowIndex + 1];\n            nextCell = nextRow && nextRow[0];\n        }\n        return nextCell && !this._isRangeStart(nextCell.compareValue);\n    }\n    /** Gets whether a value is the end of the comparison range. */\n    _isComparisonEnd(value) {\n        return isEnd(value, this.comparisonStart, this.comparisonEnd);\n    }\n    /** Gets whether a value is within the current comparison range. */\n    _isInComparisonRange(value) {\n        return isInRange(value, this.comparisonStart, this.comparisonEnd, this.isRange);\n    }\n    /**\n     * Gets whether a value is the same as the start and end of the comparison range.\n     * For context, the functions that we use to determine whether something is the start/end of\n     * a range don't allow for the start and end to be on the same day, because we'd have to use\n     * much more specific CSS selectors to style them correctly in all scenarios. This is fine for\n     * the regular range, because when it happens, the selected styles take over and still show where\n     * the range would've been, however we don't have these selected styles for a comparison range.\n     * This function is used to apply a class that serves the same purpose as the one for selected\n     * dates, but it only applies in the context of a comparison range.\n     */\n    _isComparisonIdentical(value) {\n        // Note that we don't need to null check the start/end\n        // here, because the `value` will always be defined.\n        return this.comparisonStart === this.comparisonEnd && value === this.comparisonStart;\n    }\n    /** Gets whether a value is the start of the preview range. */\n    _isPreviewStart(value) {\n        return isStart(value, this.previewStart, this.previewEnd);\n    }\n    /** Gets whether a value is the end of the preview range. */\n    _isPreviewEnd(value) {\n        return isEnd(value, this.previewStart, this.previewEnd);\n    }\n    /** Gets whether a value is inside the preview range. */\n    _isInPreview(value) {\n        return isInRange(value, this.previewStart, this.previewEnd, this.isRange);\n    }\n    /** Finds the MatCalendarCell that corresponds to a DOM node. */\n    _getCellFromElement(element) {\n        let cell;\n        if (isTableCell(element)) {\n            cell = element;\n        }\n        else if (isTableCell(element.parentNode)) {\n            cell = element.parentNode;\n        }\n        if (cell) {\n            const row = cell.getAttribute('data-mat-row');\n            const col = cell.getAttribute('data-mat-col');\n            if (row && col) {\n                return this.rows[parseInt(row)][parseInt(col)];\n            }\n        }\n        return null;\n    }\n}\nMatCalendarBody.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCalendarBody, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nMatCalendarBody.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCalendarBody, selector: \"[mat-calendar-body]\", inputs: { label: \"label\", rows: \"rows\", todayValue: \"todayValue\", startValue: \"startValue\", endValue: \"endValue\", labelMinRequiredCells: \"labelMinRequiredCells\", numCols: \"numCols\", activeCell: \"activeCell\", isRange: \"isRange\", cellAspectRatio: \"cellAspectRatio\", comparisonStart: \"comparisonStart\", comparisonEnd: \"comparisonEnd\", previewStart: \"previewStart\", previewEnd: \"previewEnd\" }, outputs: { selectedValueChange: \"selectedValueChange\", previewChange: \"previewChange\" }, host: { classAttribute: \"mat-calendar-body\" }, exportAs: [\"matCalendarBody\"], usesOnChanges: true, ngImport: i0, template: \"<!--\\n  If there's not enough space in the first row, create a separate label row. We mark this row as\\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\\n-->\\n<tr *ngIf=\\\"_firstRowOffset < labelMinRequiredCells\\\" aria-hidden=\\\"true\\\">\\n  <td class=\\\"mat-calendar-body-label\\\"\\n      [attr.colspan]=\\\"numCols\\\"\\n      [style.paddingTop]=\\\"_cellPadding\\\"\\n      [style.paddingBottom]=\\\"_cellPadding\\\">\\n    {{label}}\\n  </td>\\n</tr>\\n\\n<!-- Create the first row separately so we can include a special spacer cell. -->\\n<tr *ngFor=\\\"let row of rows; let rowIndex = index\\\" role=\\\"row\\\">\\n  <!--\\n    This cell is purely decorative, but we can't put `aria-hidden` or `role=\\\"presentation\\\"` on it,\\n    because it throws off the week days for the rest of the row on NVDA. The aspect ratio of the\\n    table cells is maintained by setting the top and bottom padding as a percentage of the width\\n    (a variant of the trick described here: https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\\n  -->\\n  <td *ngIf=\\\"rowIndex === 0 && _firstRowOffset\\\"\\n      class=\\\"mat-calendar-body-label\\\"\\n      [attr.colspan]=\\\"_firstRowOffset\\\"\\n      [style.paddingTop]=\\\"_cellPadding\\\"\\n      [style.paddingBottom]=\\\"_cellPadding\\\">\\n    {{_firstRowOffset >= labelMinRequiredCells ? label : ''}}\\n  </td>\\n  <!--\\n    Each gridcell in the calendar contains a button, which signals to assistive technology that the\\n    cell is interactable, as well as the selection state via `aria-pressed`. See #23476 for\\n    background.\\n  -->\\n  <td\\n    *ngFor=\\\"let item of row; let colIndex = index\\\"\\n    role=\\\"gridcell\\\"\\n    class=\\\"mat-calendar-body-cell-container\\\"\\n    [style.width]=\\\"_cellWidth\\\"\\n    [style.paddingTop]=\\\"_cellPadding\\\"\\n    [style.paddingBottom]=\\\"_cellPadding\\\"\\n    [attr.data-mat-row]=\\\"rowIndex\\\"\\n    [attr.data-mat-col]=\\\"colIndex\\\"\\n  >\\n    <button\\n        type=\\\"button\\\"\\n        class=\\\"mat-calendar-body-cell\\\"\\n        [ngClass]=\\\"item.cssClasses\\\"\\n        [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\"\\n        [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\"\\n        [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\"\\n        [class.mat-calendar-body-range-start]=\\\"_isRangeStart(item.compareValue)\\\"\\n        [class.mat-calendar-body-range-end]=\\\"_isRangeEnd(item.compareValue)\\\"\\n        [class.mat-calendar-body-in-range]=\\\"_isInRange(item.compareValue)\\\"\\n        [class.mat-calendar-body-comparison-bridge-start]=\\\"_isComparisonBridgeStart(item.compareValue, rowIndex, colIndex)\\\"\\n        [class.mat-calendar-body-comparison-bridge-end]=\\\"_isComparisonBridgeEnd(item.compareValue, rowIndex, colIndex)\\\"\\n        [class.mat-calendar-body-comparison-start]=\\\"_isComparisonStart(item.compareValue)\\\"\\n        [class.mat-calendar-body-comparison-end]=\\\"_isComparisonEnd(item.compareValue)\\\"\\n        [class.mat-calendar-body-in-comparison-range]=\\\"_isInComparisonRange(item.compareValue)\\\"\\n        [class.mat-calendar-body-preview-start]=\\\"_isPreviewStart(item.compareValue)\\\"\\n        [class.mat-calendar-body-preview-end]=\\\"_isPreviewEnd(item.compareValue)\\\"\\n        [class.mat-calendar-body-in-preview]=\\\"_isInPreview(item.compareValue)\\\"\\n        [attr.aria-label]=\\\"item.ariaLabel\\\"\\n        [attr.aria-disabled]=\\\"!item.enabled || null\\\"\\n        [attr.aria-pressed]=\\\"_isSelected(item.compareValue)\\\"\\n        [attr.aria-current]=\\\"todayValue === item.compareValue ? 'date' : null\\\"\\n        (click)=\\\"_cellClicked(item, $event)\\\">\\n        <div class=\\\"mat-calendar-body-cell-content mat-focus-indicator\\\"\\n          [class.mat-calendar-body-selected]=\\\"_isSelected(item.compareValue)\\\"\\n          [class.mat-calendar-body-comparison-identical]=\\\"_isComparisonIdentical(item.compareValue)\\\"\\n          [class.mat-calendar-body-today]=\\\"todayValue === item.compareValue\\\">\\n          {{item.displayValue}}\\n        </div>\\n        <div class=\\\"mat-calendar-body-cell-preview\\\" aria-hidden=\\\"true\\\"></div>\\n    </button>\\n  </td>\\n</tr>\\n\", styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.7142857143%;padding-right:4.7142857143%}.mat-calendar-body-cell-container{position:relative;height:0;line-height:0}.mat-calendar-body-cell{-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;position:absolute;top:0;left:0;width:100%;height:100%;background:none;text-align:center;outline:none;font-family:inherit;margin:0}.mat-calendar-body-cell::-moz-focus-inner{border:0}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-cell-preview{content:\\\"\\\";position:absolute;top:5%;left:0;z-index:0;box-sizing:border-box;height:90%;width:100%}.mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-start::after,.mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,.mat-calendar-body-comparison-start::after,.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:5%;width:95%;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,[dir=rtl] .mat-calendar-body-comparison-start::after,[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:0;border-radius:0;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,.mat-calendar-body-comparison-end::after,.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}[dir=rtl] .mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,[dir=rtl] .mat-calendar-body-comparison-end::after,[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{left:5%;border-radius:0;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-comparison-bridge-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-bridge-end.mat-calendar-body-range-start::after{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end.mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-end.mat-calendar-body-range-start::after{width:90%}.mat-calendar-body-in-preview .mat-calendar-body-cell-preview{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:0;border-right:dashed 1px}.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:0;border-left:dashed 1px}.mat-calendar-body-disabled{cursor:default}.cdk-high-contrast-active .mat-calendar-body-disabled{opacity:.5}.mat-calendar-body-cell-content{top:5%;left:5%;z-index:1;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}.mat-calendar-body-cell-content.mat-focus-indicator{position:absolute}.cdk-high-contrast-active .mat-calendar-body-cell-content{border:none}.cdk-high-contrast-active .mat-datepicker-popup:not(:empty),.cdk-high-contrast-active .mat-calendar-body-cell:not(.mat-calendar-body-in-range) .mat-calendar-body-selected{outline:solid 1px}.cdk-high-contrast-active .mat-calendar-body-today{outline:dotted 1px}.cdk-high-contrast-active .cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content,.cdk-high-contrast-active .cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content{outline:dotted 2px}.cdk-high-contrast-active .cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content.mat-calendar-body-selected,.cdk-high-contrast-active .cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content.mat-calendar-body-selected{outline:solid 3px}.cdk-high-contrast-active .mat-calendar-body-cell::before,.cdk-high-contrast-active .mat-calendar-body-cell::after,.cdk-high-contrast-active .mat-calendar-body-selected{background:none}.cdk-high-contrast-active .mat-calendar-body-in-range::before,.cdk-high-contrast-active .mat-calendar-body-comparison-bridge-start::before,.cdk-high-contrast-active .mat-calendar-body-comparison-bridge-end::before{border-top:solid 1px;border-bottom:solid 1px}.cdk-high-contrast-active .mat-calendar-body-range-start::before{border-left:solid 1px}[dir=rtl] .cdk-high-contrast-active .mat-calendar-body-range-start::before{border-left:0;border-right:solid 1px}.cdk-high-contrast-active .mat-calendar-body-range-end::before{border-right:solid 1px}[dir=rtl] .cdk-high-contrast-active .mat-calendar-body-range-end::before{border-right:0;border-left:solid 1px}.cdk-high-contrast-active .mat-calendar-body-in-comparison-range::before{border-top:dashed 1px;border-bottom:dashed 1px}.cdk-high-contrast-active .mat-calendar-body-comparison-start::before{border-left:dashed 1px}[dir=rtl] .cdk-high-contrast-active .mat-calendar-body-comparison-start::before{border-left:0;border-right:dashed 1px}.cdk-high-contrast-active .mat-calendar-body-comparison-end::before{border-right:dashed 1px}[dir=rtl] .cdk-high-contrast-active .mat-calendar-body-comparison-end::before{border-right:0;border-left:dashed 1px}[dir=rtl] .mat-calendar-body-label{text-align:right}\\n\"], directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCalendarBody, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-calendar-body]', host: {\n                        'class': 'mat-calendar-body',\n                    }, exportAs: 'matCalendarBody', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<!--\\n  If there's not enough space in the first row, create a separate label row. We mark this row as\\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\\n-->\\n<tr *ngIf=\\\"_firstRowOffset < labelMinRequiredCells\\\" aria-hidden=\\\"true\\\">\\n  <td class=\\\"mat-calendar-body-label\\\"\\n      [attr.colspan]=\\\"numCols\\\"\\n      [style.paddingTop]=\\\"_cellPadding\\\"\\n      [style.paddingBottom]=\\\"_cellPadding\\\">\\n    {{label}}\\n  </td>\\n</tr>\\n\\n<!-- Create the first row separately so we can include a special spacer cell. -->\\n<tr *ngFor=\\\"let row of rows; let rowIndex = index\\\" role=\\\"row\\\">\\n  <!--\\n    This cell is purely decorative, but we can't put `aria-hidden` or `role=\\\"presentation\\\"` on it,\\n    because it throws off the week days for the rest of the row on NVDA. The aspect ratio of the\\n    table cells is maintained by setting the top and bottom padding as a percentage of the width\\n    (a variant of the trick described here: https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\\n  -->\\n  <td *ngIf=\\\"rowIndex === 0 && _firstRowOffset\\\"\\n      class=\\\"mat-calendar-body-label\\\"\\n      [attr.colspan]=\\\"_firstRowOffset\\\"\\n      [style.paddingTop]=\\\"_cellPadding\\\"\\n      [style.paddingBottom]=\\\"_cellPadding\\\">\\n    {{_firstRowOffset >= labelMinRequiredCells ? label : ''}}\\n  </td>\\n  <!--\\n    Each gridcell in the calendar contains a button, which signals to assistive technology that the\\n    cell is interactable, as well as the selection state via `aria-pressed`. See #23476 for\\n    background.\\n  -->\\n  <td\\n    *ngFor=\\\"let item of row; let colIndex = index\\\"\\n    role=\\\"gridcell\\\"\\n    class=\\\"mat-calendar-body-cell-container\\\"\\n    [style.width]=\\\"_cellWidth\\\"\\n    [style.paddingTop]=\\\"_cellPadding\\\"\\n    [style.paddingBottom]=\\\"_cellPadding\\\"\\n    [attr.data-mat-row]=\\\"rowIndex\\\"\\n    [attr.data-mat-col]=\\\"colIndex\\\"\\n  >\\n    <button\\n        type=\\\"button\\\"\\n        class=\\\"mat-calendar-body-cell\\\"\\n        [ngClass]=\\\"item.cssClasses\\\"\\n        [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\"\\n        [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\"\\n        [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\"\\n        [class.mat-calendar-body-range-start]=\\\"_isRangeStart(item.compareValue)\\\"\\n        [class.mat-calendar-body-range-end]=\\\"_isRangeEnd(item.compareValue)\\\"\\n        [class.mat-calendar-body-in-range]=\\\"_isInRange(item.compareValue)\\\"\\n        [class.mat-calendar-body-comparison-bridge-start]=\\\"_isComparisonBridgeStart(item.compareValue, rowIndex, colIndex)\\\"\\n        [class.mat-calendar-body-comparison-bridge-end]=\\\"_isComparisonBridgeEnd(item.compareValue, rowIndex, colIndex)\\\"\\n        [class.mat-calendar-body-comparison-start]=\\\"_isComparisonStart(item.compareValue)\\\"\\n        [class.mat-calendar-body-comparison-end]=\\\"_isComparisonEnd(item.compareValue)\\\"\\n        [class.mat-calendar-body-in-comparison-range]=\\\"_isInComparisonRange(item.compareValue)\\\"\\n        [class.mat-calendar-body-preview-start]=\\\"_isPreviewStart(item.compareValue)\\\"\\n        [class.mat-calendar-body-preview-end]=\\\"_isPreviewEnd(item.compareValue)\\\"\\n        [class.mat-calendar-body-in-preview]=\\\"_isInPreview(item.compareValue)\\\"\\n        [attr.aria-label]=\\\"item.ariaLabel\\\"\\n        [attr.aria-disabled]=\\\"!item.enabled || null\\\"\\n        [attr.aria-pressed]=\\\"_isSelected(item.compareValue)\\\"\\n        [attr.aria-current]=\\\"todayValue === item.compareValue ? 'date' : null\\\"\\n        (click)=\\\"_cellClicked(item, $event)\\\">\\n        <div class=\\\"mat-calendar-body-cell-content mat-focus-indicator\\\"\\n          [class.mat-calendar-body-selected]=\\\"_isSelected(item.compareValue)\\\"\\n          [class.mat-calendar-body-comparison-identical]=\\\"_isComparisonIdentical(item.compareValue)\\\"\\n          [class.mat-calendar-body-today]=\\\"todayValue === item.compareValue\\\">\\n          {{item.displayValue}}\\n        </div>\\n        <div class=\\\"mat-calendar-body-cell-preview\\\" aria-hidden=\\\"true\\\"></div>\\n    </button>\\n  </td>\\n</tr>\\n\", styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.7142857143%;padding-right:4.7142857143%}.mat-calendar-body-cell-container{position:relative;height:0;line-height:0}.mat-calendar-body-cell{-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;position:absolute;top:0;left:0;width:100%;height:100%;background:none;text-align:center;outline:none;font-family:inherit;margin:0}.mat-calendar-body-cell::-moz-focus-inner{border:0}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-cell-preview{content:\\\"\\\";position:absolute;top:5%;left:0;z-index:0;box-sizing:border-box;height:90%;width:100%}.mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-start::after,.mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,.mat-calendar-body-comparison-start::after,.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:5%;width:95%;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,[dir=rtl] .mat-calendar-body-comparison-start::after,[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:0;border-radius:0;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,.mat-calendar-body-comparison-end::after,.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}[dir=rtl] .mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,[dir=rtl] .mat-calendar-body-comparison-end::after,[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{left:5%;border-radius:0;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-comparison-bridge-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-bridge-end.mat-calendar-body-range-start::after{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end.mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-end.mat-calendar-body-range-start::after{width:90%}.mat-calendar-body-in-preview .mat-calendar-body-cell-preview{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:0;border-right:dashed 1px}.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:0;border-left:dashed 1px}.mat-calendar-body-disabled{cursor:default}.cdk-high-contrast-active .mat-calendar-body-disabled{opacity:.5}.mat-calendar-body-cell-content{top:5%;left:5%;z-index:1;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}.mat-calendar-body-cell-content.mat-focus-indicator{position:absolute}.cdk-high-contrast-active .mat-calendar-body-cell-content{border:none}.cdk-high-contrast-active .mat-datepicker-popup:not(:empty),.cdk-high-contrast-active .mat-calendar-body-cell:not(.mat-calendar-body-in-range) .mat-calendar-body-selected{outline:solid 1px}.cdk-high-contrast-active .mat-calendar-body-today{outline:dotted 1px}.cdk-high-contrast-active .cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content,.cdk-high-contrast-active .cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content{outline:dotted 2px}.cdk-high-contrast-active .cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content.mat-calendar-body-selected,.cdk-high-contrast-active .cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content.mat-calendar-body-selected{outline:solid 3px}.cdk-high-contrast-active .mat-calendar-body-cell::before,.cdk-high-contrast-active .mat-calendar-body-cell::after,.cdk-high-contrast-active .mat-calendar-body-selected{background:none}.cdk-high-contrast-active .mat-calendar-body-in-range::before,.cdk-high-contrast-active .mat-calendar-body-comparison-bridge-start::before,.cdk-high-contrast-active .mat-calendar-body-comparison-bridge-end::before{border-top:solid 1px;border-bottom:solid 1px}.cdk-high-contrast-active .mat-calendar-body-range-start::before{border-left:solid 1px}[dir=rtl] .cdk-high-contrast-active .mat-calendar-body-range-start::before{border-left:0;border-right:solid 1px}.cdk-high-contrast-active .mat-calendar-body-range-end::before{border-right:solid 1px}[dir=rtl] .cdk-high-contrast-active .mat-calendar-body-range-end::before{border-right:0;border-left:solid 1px}.cdk-high-contrast-active .mat-calendar-body-in-comparison-range::before{border-top:dashed 1px;border-bottom:dashed 1px}.cdk-high-contrast-active .mat-calendar-body-comparison-start::before{border-left:dashed 1px}[dir=rtl] .cdk-high-contrast-active .mat-calendar-body-comparison-start::before{border-left:0;border-right:dashed 1px}.cdk-high-contrast-active .mat-calendar-body-comparison-end::before{border-right:dashed 1px}[dir=rtl] .cdk-high-contrast-active .mat-calendar-body-comparison-end::before{border-right:0;border-left:dashed 1px}[dir=rtl] .mat-calendar-body-label{text-align:right}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { label: [{\n                type: Input\n            }], rows: [{\n                type: Input\n            }], todayValue: [{\n                type: Input\n            }], startValue: [{\n                type: Input\n            }], endValue: [{\n                type: Input\n            }], labelMinRequiredCells: [{\n                type: Input\n            }], numCols: [{\n                type: Input\n            }], activeCell: [{\n                type: Input\n            }], isRange: [{\n                type: Input\n            }], cellAspectRatio: [{\n                type: Input\n            }], comparisonStart: [{\n                type: Input\n            }], comparisonEnd: [{\n                type: Input\n            }], previewStart: [{\n                type: Input\n            }], previewEnd: [{\n                type: Input\n            }], selectedValueChange: [{\n                type: Output\n            }], previewChange: [{\n                type: Output\n            }] } });\n/** Checks whether a node is a table cell element. */\nfunction isTableCell(node) {\n    return node.nodeName === 'TD';\n}\n/** Checks whether a value is the start of a range. */\nfunction isStart(value, start, end) {\n    return end !== null && start !== end && value < end && value === start;\n}\n/** Checks whether a value is the end of a range. */\nfunction isEnd(value, start, end) {\n    return start !== null && start !== end && value >= start && value === end;\n}\n/** Checks whether a value is inside of a range. */\nfunction isInRange(value, start, end, rangeEnabled) {\n    return (rangeEnabled &&\n        start !== null &&\n        end !== null &&\n        start !== end &&\n        value >= start &&\n        value <= end);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** A class representing a range of dates. */\nclass DateRange {\n    constructor(\n    /** The start date of the range. */\n    start, \n    /** The end date of the range. */\n    end) {\n        this.start = start;\n        this.end = end;\n    }\n}\n/**\n * A selection model containing a date selection.\n * @docs-private\n */\nclass MatDateSelectionModel {\n    constructor(\n    /** The current selection. */\n    selection, _adapter) {\n        this.selection = selection;\n        this._adapter = _adapter;\n        this._selectionChanged = new Subject();\n        /** Emits when the selection has changed. */\n        this.selectionChanged = this._selectionChanged;\n        this.selection = selection;\n    }\n    /**\n     * Updates the current selection in the model.\n     * @param value New selection that should be assigned.\n     * @param source Object that triggered the selection change.\n     */\n    updateSelection(value, source) {\n        const oldValue = this.selection;\n        this.selection = value;\n        this._selectionChanged.next({ selection: value, source, oldValue });\n    }\n    ngOnDestroy() {\n        this._selectionChanged.complete();\n    }\n    _isValidDateInstance(date) {\n        return this._adapter.isDateInstance(date) && this._adapter.isValid(date);\n    }\n}\nMatDateSelectionModel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDateSelectionModel, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Injectable });\nMatDateSelectionModel.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDateSelectionModel });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDateSelectionModel, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined }, { type: i1$1.DateAdapter }]; } });\n/**\n * A selection model that contains a single date.\n * @docs-private\n */\nclass MatSingleDateSelectionModel extends MatDateSelectionModel {\n    constructor(adapter) {\n        super(null, adapter);\n    }\n    /**\n     * Adds a date to the current selection. In the case of a single date selection, the added date\n     * simply overwrites the previous selection\n     */\n    add(date) {\n        super.updateSelection(date, this);\n    }\n    /** Checks whether the current selection is valid. */\n    isValid() {\n        return this.selection != null && this._isValidDateInstance(this.selection);\n    }\n    /**\n     * Checks whether the current selection is complete. In the case of a single date selection, this\n     * is true if the current selection is not null.\n     */\n    isComplete() {\n        return this.selection != null;\n    }\n    /** Clones the selection model. */\n    clone() {\n        const clone = new MatSingleDateSelectionModel(this._adapter);\n        clone.updateSelection(this.selection, this);\n        return clone;\n    }\n}\nMatSingleDateSelectionModel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSingleDateSelectionModel, deps: [{ token: i1$1.DateAdapter }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSingleDateSelectionModel.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSingleDateSelectionModel });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSingleDateSelectionModel, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.DateAdapter }]; } });\n/**\n * A selection model that contains a date range.\n * @docs-private\n */\nclass MatRangeDateSelectionModel extends MatDateSelectionModel {\n    constructor(adapter) {\n        super(new DateRange(null, null), adapter);\n    }\n    /**\n     * Adds a date to the current selection. In the case of a date range selection, the added date\n     * fills in the next `null` value in the range. If both the start and the end already have a date,\n     * the selection is reset so that the given date is the new `start` and the `end` is null.\n     */\n    add(date) {\n        let { start, end } = this.selection;\n        if (start == null) {\n            start = date;\n        }\n        else if (end == null) {\n            end = date;\n        }\n        else {\n            start = date;\n            end = null;\n        }\n        super.updateSelection(new DateRange(start, end), this);\n    }\n    /** Checks whether the current selection is valid. */\n    isValid() {\n        const { start, end } = this.selection;\n        // Empty ranges are valid.\n        if (start == null && end == null) {\n            return true;\n        }\n        // Complete ranges are only valid if both dates are valid and the start is before the end.\n        if (start != null && end != null) {\n            return (this._isValidDateInstance(start) &&\n                this._isValidDateInstance(end) &&\n                this._adapter.compareDate(start, end) <= 0);\n        }\n        // Partial ranges are valid if the start/end is valid.\n        return ((start == null || this._isValidDateInstance(start)) &&\n            (end == null || this._isValidDateInstance(end)));\n    }\n    /**\n     * Checks whether the current selection is complete. In the case of a date range selection, this\n     * is true if the current selection has a non-null `start` and `end`.\n     */\n    isComplete() {\n        return this.selection.start != null && this.selection.end != null;\n    }\n    /** Clones the selection model. */\n    clone() {\n        const clone = new MatRangeDateSelectionModel(this._adapter);\n        clone.updateSelection(this.selection, this);\n        return clone;\n    }\n}\nMatRangeDateSelectionModel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRangeDateSelectionModel, deps: [{ token: i1$1.DateAdapter }], target: i0.ɵɵFactoryTarget.Injectable });\nMatRangeDateSelectionModel.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRangeDateSelectionModel });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatRangeDateSelectionModel, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.DateAdapter }]; } });\n/** @docs-private */\nfunction MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY(parent, adapter) {\n    return parent || new MatSingleDateSelectionModel(adapter);\n}\n/**\n * Used to provide a single selection model to a component.\n * @docs-private\n */\nconst MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER = {\n    provide: MatDateSelectionModel,\n    deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n    useFactory: MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY,\n};\n/** @docs-private */\nfunction MAT_RANGE_DATE_SELECTION_MODEL_FACTORY(parent, adapter) {\n    return parent || new MatRangeDateSelectionModel(adapter);\n}\n/**\n * Used to provide a range selection model to a component.\n * @docs-private\n */\nconst MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER = {\n    provide: MatDateSelectionModel,\n    deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n    useFactory: MAT_RANGE_DATE_SELECTION_MODEL_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token used to customize the date range selection behavior. */\nconst MAT_DATE_RANGE_SELECTION_STRATEGY = new InjectionToken('MAT_DATE_RANGE_SELECTION_STRATEGY');\n/** Provides the default date range selection behavior. */\nclass DefaultMatCalendarRangeStrategy {\n    constructor(_dateAdapter) {\n        this._dateAdapter = _dateAdapter;\n    }\n    selectionFinished(date, currentRange) {\n        let { start, end } = currentRange;\n        if (start == null) {\n            start = date;\n        }\n        else if (end == null && date && this._dateAdapter.compareDate(date, start) >= 0) {\n            end = date;\n        }\n        else {\n            start = date;\n            end = null;\n        }\n        return new DateRange(start, end);\n    }\n    createPreview(activeDate, currentRange) {\n        let start = null;\n        let end = null;\n        if (currentRange.start && !currentRange.end && activeDate) {\n            start = currentRange.start;\n            end = activeDate;\n        }\n        return new DateRange(start, end);\n    }\n}\nDefaultMatCalendarRangeStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DefaultMatCalendarRangeStrategy, deps: [{ token: i1$1.DateAdapter }], target: i0.ɵɵFactoryTarget.Injectable });\nDefaultMatCalendarRangeStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DefaultMatCalendarRangeStrategy });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DefaultMatCalendarRangeStrategy, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.DateAdapter }]; } });\n/** @docs-private */\nfunction MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY(parent, adapter) {\n    return parent || new DefaultMatCalendarRangeStrategy(adapter);\n}\n/** @docs-private */\nconst MAT_CALENDAR_RANGE_STRATEGY_PROVIDER = {\n    provide: MAT_DATE_RANGE_SELECTION_STRATEGY,\n    deps: [[new Optional(), new SkipSelf(), MAT_DATE_RANGE_SELECTION_STRATEGY], DateAdapter],\n    useFactory: MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\nclass MatMonthView {\n    constructor(_changeDetectorRef, _dateFormats, _dateAdapter, _dir, _rangeStrategy) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateFormats = _dateFormats;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        this._rangeStrategy = _rangeStrategy;\n        this._rerenderSubscription = Subscription.EMPTY;\n        /** Emits when a new date is selected. */\n        this.selectedChange = new EventEmitter();\n        /** Emits when any date is selected. */\n        this._userSelection = new EventEmitter();\n        /** Emits when any date is activated. */\n        this.activeDateChange = new EventEmitter();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._dateAdapter) {\n                throw createMissingDateImplError('DateAdapter');\n            }\n            if (!this._dateFormats) {\n                throw createMissingDateImplError('MAT_DATE_FORMATS');\n            }\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    get activeDate() {\n        return this._activeDate;\n    }\n    set activeDate(value) {\n        const oldActiveDate = this._activeDate;\n        const validDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) ||\n            this._dateAdapter.today();\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n        if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this._init();\n        }\n    }\n    /** The currently selected date. */\n    get selected() {\n        return this._selected;\n    }\n    set selected(value) {\n        if (value instanceof DateRange) {\n            this._selected = value;\n        }\n        else {\n            this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n        this._setRanges(this._selected);\n    }\n    /** The minimum selectable date. */\n    get minDate() {\n        return this._minDate;\n    }\n    set minDate(value) {\n        this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /** The maximum selectable date. */\n    get maxDate() {\n        return this._maxDate;\n    }\n    set maxDate(value) {\n        this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    ngAfterContentInit() {\n        this._rerenderSubscription = this._dateAdapter.localeChanges\n            .pipe(startWith(null))\n            .subscribe(() => this._init());\n    }\n    ngOnChanges(changes) {\n        const comparisonChange = changes['comparisonStart'] || changes['comparisonEnd'];\n        if (comparisonChange && !comparisonChange.firstChange) {\n            this._setRanges(this.selected);\n        }\n    }\n    ngOnDestroy() {\n        this._rerenderSubscription.unsubscribe();\n    }\n    /** Handles when a new date is selected. */\n    _dateSelected(event) {\n        const date = event.value;\n        const selectedYear = this._dateAdapter.getYear(this.activeDate);\n        const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n        const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n        let rangeStartDate;\n        let rangeEndDate;\n        if (this._selected instanceof DateRange) {\n            rangeStartDate = this._getDateInCurrentMonth(this._selected.start);\n            rangeEndDate = this._getDateInCurrentMonth(this._selected.end);\n        }\n        else {\n            rangeStartDate = rangeEndDate = this._getDateInCurrentMonth(this._selected);\n        }\n        if (rangeStartDate !== date || rangeEndDate !== date) {\n            this.selectedChange.emit(selectedDate);\n        }\n        this._userSelection.emit({ value: selectedDate, event: event.event });\n        this._previewStart = this._previewEnd = null;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    _handleCalendarBodyKeydown(event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        const oldActiveDate = this._activeDate;\n        const isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n                    this._dateAdapter.getDate(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey\n                    ? this._dateAdapter.addCalendarYears(this._activeDate, -1)\n                    : this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey\n                    ? this._dateAdapter.addCalendarYears(this._activeDate, 1)\n                    : this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this._selectionKeyPressed = true;\n                if (this._canSelect(this._activeDate)) {\n                    // Prevent unexpected default actions such as form submission.\n                    // Note that we only prevent the default action here while the selection happens in\n                    // `keyup` below. We can't do the selection here, because it can cause the calendar to\n                    // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n                    // because it's too late (see #23305).\n                    event.preventDefault();\n                }\n                return;\n            case ESCAPE:\n                // Abort the current range selection if the user presses escape mid-selection.\n                if (this._previewEnd != null && !hasModifierKey(event)) {\n                    this._previewStart = this._previewEnd = null;\n                    this.selectedChange.emit(null);\n                    this._userSelection.emit({ value: null, event });\n                    event.preventDefault();\n                    event.stopPropagation(); // Prevents the overlay from closing.\n                }\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n    /** Handles keyup events on the calendar body when calendar is in month view. */\n    _handleCalendarBodyKeyup(event) {\n        if (event.keyCode === SPACE || event.keyCode === ENTER) {\n            if (this._selectionKeyPressed && this._canSelect(this._activeDate)) {\n                this._dateSelected({ value: this._dateAdapter.getDate(this._activeDate), event });\n            }\n            this._selectionKeyPressed = false;\n        }\n    }\n    /** Initializes this month view. */\n    _init() {\n        this._setRanges(this.selected);\n        this._todayDate = this._getCellCompareValue(this._dateAdapter.today());\n        this._monthLabel = this._dateFormats.display.monthLabel\n            ? this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthLabel)\n            : this._dateAdapter\n                .getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();\n        let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n        this._firstWeekOffset =\n            (DAYS_PER_WEEK +\n                this._dateAdapter.getDayOfWeek(firstOfMonth) -\n                this._dateAdapter.getFirstDayOfWeek()) %\n                DAYS_PER_WEEK;\n        this._initWeekdays();\n        this._createWeekCells();\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(movePreview) {\n        this._matCalendarBody._focusActiveCell(movePreview);\n    }\n    /** Called when the user has activated a new cell and the preview needs to be updated. */\n    _previewChanged({ event, value: cell }) {\n        if (this._rangeStrategy) {\n            // We can assume that this will be a range, because preview\n            // events aren't fired for single date selections.\n            const value = cell ? cell.rawValue : null;\n            const previewRange = this._rangeStrategy.createPreview(value, this.selected, event);\n            this._previewStart = this._getCellCompareValue(previewRange.start);\n            this._previewEnd = this._getCellCompareValue(previewRange.end);\n            // Note that here we need to use `detectChanges`, rather than `markForCheck`, because\n            // the way `_focusActiveCell` is set up at the moment makes it fire at the wrong time\n            // when navigating one month back using the keyboard which will cause this handler\n            // to throw a \"changed after checked\" error when updating the preview state.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /** Initializes the weekdays. */\n    _initWeekdays() {\n        const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n        const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n        const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        let weekdays = longWeekdays.map((long, i) => {\n            return { long, narrow: narrowWeekdays[i] };\n        });\n        this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n    }\n    /** Creates MatCalendarCells for the dates in this month. */\n    _createWeekCells() {\n        const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n        const dateNames = this._dateAdapter.getDateNames();\n        this._weeks = [[]];\n        for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell == DAYS_PER_WEEK) {\n                this._weeks.push([]);\n                cell = 0;\n            }\n            const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n            const enabled = this._shouldEnableDate(date);\n            const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n            const cellClasses = this.dateClass ? this.dateClass(date, 'month') : undefined;\n            this._weeks[this._weeks.length - 1].push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses, this._getCellCompareValue(date), date));\n        }\n    }\n    /** Date filter for the month */\n    _shouldEnableDate(date) {\n        return (!!date &&\n            (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0) &&\n            (!this.dateFilter || this.dateFilter(date)));\n    }\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    _getDateInCurrentMonth(date) {\n        return date && this._hasSameMonthAndYear(date, this.activeDate)\n            ? this._dateAdapter.getDate(date)\n            : null;\n    }\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    _hasSameMonthAndYear(d1, d2) {\n        return !!(d1 &&\n            d2 &&\n            this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n            this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n    }\n    /** Gets the value that will be used to one cell to another. */\n    _getCellCompareValue(date) {\n        if (date) {\n            // We use the time since the Unix epoch to compare dates in this view, rather than the\n            // cell values, because we need to support ranges that span across multiple months/years.\n            const year = this._dateAdapter.getYear(date);\n            const month = this._dateAdapter.getMonth(date);\n            const day = this._dateAdapter.getDate(date);\n            return new Date(year, month, day).getTime();\n        }\n        return null;\n    }\n    /** Determines whether the user has the RTL layout direction. */\n    _isRtl() {\n        return this._dir && this._dir.value === 'rtl';\n    }\n    /** Sets the current range based on a model value. */\n    _setRanges(selectedValue) {\n        if (selectedValue instanceof DateRange) {\n            this._rangeStart = this._getCellCompareValue(selectedValue.start);\n            this._rangeEnd = this._getCellCompareValue(selectedValue.end);\n            this._isRange = true;\n        }\n        else {\n            this._rangeStart = this._rangeEnd = this._getCellCompareValue(selectedValue);\n            this._isRange = false;\n        }\n        this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);\n        this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);\n    }\n    /** Gets whether a date can be selected in the month view. */\n    _canSelect(date) {\n        return !this.dateFilter || this.dateFilter(date);\n    }\n}\nMatMonthView.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMonthView, deps: [{ token: i0.ChangeDetectorRef }, { token: MAT_DATE_FORMATS, optional: true }, { token: i1$1.DateAdapter, optional: true }, { token: i2.Directionality, optional: true }, { token: MAT_DATE_RANGE_SELECTION_STRATEGY, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatMonthView.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatMonthView, selector: \"mat-month-view\", inputs: { activeDate: \"activeDate\", selected: \"selected\", minDate: \"minDate\", maxDate: \"maxDate\", dateFilter: \"dateFilter\", dateClass: \"dateClass\", comparisonStart: \"comparisonStart\", comparisonEnd: \"comparisonEnd\" }, outputs: { selectedChange: \"selectedChange\", _userSelection: \"_userSelection\", activeDateChange: \"activeDateChange\" }, viewQueries: [{ propertyName: \"_matCalendarBody\", first: true, predicate: MatCalendarBody, descendants: true }], exportAs: [\"matMonthView\"], usesOnChanges: true, ngImport: i0, template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"grid\\\">\\n  <thead class=\\\"mat-calendar-table-header\\\">\\n    <tr>\\n      <th scope=\\\"col\\\" *ngFor=\\\"let day of _weekdays\\\">\\n        <span class=\\\"cdk-visually-hidden\\\">{{day.long}}</span>\\n        <span aria-hidden=\\\"true\\\">{{day.narrow}}</span>\\n      </th>\\n    </tr>\\n    <tr><th aria-hidden=\\\"true\\\" class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [label]=\\\"_monthLabel\\\"\\n         [rows]=\\\"_weeks\\\"\\n         [todayValue]=\\\"_todayDate!\\\"\\n         [startValue]=\\\"_rangeStart!\\\"\\n         [endValue]=\\\"_rangeEnd!\\\"\\n         [comparisonStart]=\\\"_comparisonRangeStart\\\"\\n         [comparisonEnd]=\\\"_comparisonRangeEnd\\\"\\n         [previewStart]=\\\"_previewStart\\\"\\n         [previewEnd]=\\\"_previewEnd\\\"\\n         [isRange]=\\\"_isRange\\\"\\n         [labelMinRequiredCells]=\\\"3\\\"\\n         [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\"\\n         (selectedValueChange)=\\\"_dateSelected($event)\\\"\\n         (previewChange)=\\\"_previewChanged($event)\\\"\\n         (keyup)=\\\"_handleCalendarBodyKeyup($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\", components: [{ type: MatCalendarBody, selector: \"[mat-calendar-body]\", inputs: [\"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"labelMinRequiredCells\", \"numCols\", \"activeCell\", \"isRange\", \"cellAspectRatio\", \"comparisonStart\", \"comparisonEnd\", \"previewStart\", \"previewEnd\"], outputs: [\"selectedValueChange\", \"previewChange\"], exportAs: [\"matCalendarBody\"] }], directives: [{ type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMonthView, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-month-view', exportAs: 'matMonthView', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"grid\\\">\\n  <thead class=\\\"mat-calendar-table-header\\\">\\n    <tr>\\n      <th scope=\\\"col\\\" *ngFor=\\\"let day of _weekdays\\\">\\n        <span class=\\\"cdk-visually-hidden\\\">{{day.long}}</span>\\n        <span aria-hidden=\\\"true\\\">{{day.narrow}}</span>\\n      </th>\\n    </tr>\\n    <tr><th aria-hidden=\\\"true\\\" class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [label]=\\\"_monthLabel\\\"\\n         [rows]=\\\"_weeks\\\"\\n         [todayValue]=\\\"_todayDate!\\\"\\n         [startValue]=\\\"_rangeStart!\\\"\\n         [endValue]=\\\"_rangeEnd!\\\"\\n         [comparisonStart]=\\\"_comparisonRangeStart\\\"\\n         [comparisonEnd]=\\\"_comparisonRangeEnd\\\"\\n         [previewStart]=\\\"_previewStart\\\"\\n         [previewEnd]=\\\"_previewEnd\\\"\\n         [isRange]=\\\"_isRange\\\"\\n         [labelMinRequiredCells]=\\\"3\\\"\\n         [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\"\\n         (selectedValueChange)=\\\"_dateSelected($event)\\\"\\n         (previewChange)=\\\"_previewChanged($event)\\\"\\n         (keyup)=\\\"_handleCalendarBodyKeyup($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\" }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DATE_FORMATS]\n                    }] }, { type: i1$1.DateAdapter, decorators: [{\n                        type: Optional\n                    }] }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_DATE_RANGE_SELECTION_STRATEGY]\n                    }, {\n                        type: Optional\n                    }] }];\n    }, propDecorators: { activeDate: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], minDate: [{\n                type: Input\n            }], maxDate: [{\n                type: Input\n            }], dateFilter: [{\n                type: Input\n            }], dateClass: [{\n                type: Input\n            }], comparisonStart: [{\n                type: Input\n            }], comparisonEnd: [{\n                type: Input\n            }], selectedChange: [{\n                type: Output\n            }], _userSelection: [{\n                type: Output\n            }], activeDateChange: [{\n                type: Output\n            }], _matCalendarBody: [{\n                type: ViewChild,\n                args: [MatCalendarBody]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst yearsPerPage = 24;\nconst yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\nclass MatMultiYearView {\n    constructor(_changeDetectorRef, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        this._rerenderSubscription = Subscription.EMPTY;\n        /** Emits when a new year is selected. */\n        this.selectedChange = new EventEmitter();\n        /** Emits the selected year. This doesn't imply a change on the selected date */\n        this.yearSelected = new EventEmitter();\n        /** Emits when any date is activated. */\n        this.activeDateChange = new EventEmitter();\n        if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    get activeDate() {\n        return this._activeDate;\n    }\n    set activeDate(value) {\n        let oldActiveDate = this._activeDate;\n        const validDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) ||\n            this._dateAdapter.today();\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n        if (!isSameMultiYearView(this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n            this._init();\n        }\n    }\n    /** The currently selected date. */\n    get selected() {\n        return this._selected;\n    }\n    set selected(value) {\n        if (value instanceof DateRange) {\n            this._selected = value;\n        }\n        else {\n            this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n        this._setSelectedYear(value);\n    }\n    /** The minimum selectable date. */\n    get minDate() {\n        return this._minDate;\n    }\n    set minDate(value) {\n        this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /** The maximum selectable date. */\n    get maxDate() {\n        return this._maxDate;\n    }\n    set maxDate(value) {\n        this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    ngAfterContentInit() {\n        this._rerenderSubscription = this._dateAdapter.localeChanges\n            .pipe(startWith(null))\n            .subscribe(() => this._init());\n    }\n    ngOnDestroy() {\n        this._rerenderSubscription.unsubscribe();\n    }\n    /** Initializes this multi-year view. */\n    _init() {\n        this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n        // We want a range years such that we maximize the number of\n        // enabled dates visible at once. This prevents issues where the minimum year\n        // is the last item of a page OR the maximum year is the first item of a page.\n        // The offset from the active year to the \"slot\" for the starting year is the\n        // *actual* first rendered year in the multi-year view.\n        const activeYear = this._dateAdapter.getYear(this._activeDate);\n        const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n        this._years = [];\n        for (let i = 0, row = []; i < yearsPerPage; i++) {\n            row.push(minYearOfPage + i);\n            if (row.length == yearsPerRow) {\n                this._years.push(row.map(year => this._createCellForYear(year)));\n                row = [];\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Handles when a new year is selected. */\n    _yearSelected(event) {\n        const year = event.value;\n        this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n        let month = this._dateAdapter.getMonth(this.activeDate);\n        let daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    _handleCalendarBodyKeydown(event) {\n        const oldActiveDate = this._activeDate;\n        const isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage -\n                    getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate) -\n                    1);\n                break;\n            case PAGE_UP:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                // Note that we only prevent the default action here while the selection happens in\n                // `keyup` below. We can't do the selection here, because it can cause the calendar to\n                // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n                // because it's too late (see #23305).\n                this._selectionKeyPressed = true;\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n    /** Handles keyup events on the calendar body when calendar is in multi-year view. */\n    _handleCalendarBodyKeyup(event) {\n        if (event.keyCode === SPACE || event.keyCode === ENTER) {\n            if (this._selectionKeyPressed) {\n                this._yearSelected({ value: this._dateAdapter.getYear(this._activeDate), event });\n            }\n            this._selectionKeyPressed = false;\n        }\n    }\n    _getActiveCell() {\n        return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n    }\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell() {\n        this._matCalendarBody._focusActiveCell();\n    }\n    /** Creates an MatCalendarCell for the given year. */\n    _createCellForYear(year) {\n        const date = this._dateAdapter.createDate(year, 0, 1);\n        const yearName = this._dateAdapter.getYearName(date);\n        const cellClasses = this.dateClass ? this.dateClass(date, 'multi-year') : undefined;\n        return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year), cellClasses);\n    }\n    /** Whether the given year is enabled. */\n    _shouldEnableYear(year) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined ||\n            year === null ||\n            (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n        const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /** Determines whether the user has the RTL layout direction. */\n    _isRtl() {\n        return this._dir && this._dir.value === 'rtl';\n    }\n    /** Sets the currently-highlighted year based on a model value. */\n    _setSelectedYear(value) {\n        this._selectedYear = null;\n        if (value instanceof DateRange) {\n            const displayValue = value.start || value.end;\n            if (displayValue) {\n                this._selectedYear = this._dateAdapter.getYear(displayValue);\n            }\n        }\n        else if (value) {\n            this._selectedYear = this._dateAdapter.getYear(value);\n        }\n    }\n}\nMatMultiYearView.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMultiYearView, deps: [{ token: i0.ChangeDetectorRef }, { token: i1$1.DateAdapter, optional: true }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatMultiYearView.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatMultiYearView, selector: \"mat-multi-year-view\", inputs: { activeDate: \"activeDate\", selected: \"selected\", minDate: \"minDate\", maxDate: \"maxDate\", dateFilter: \"dateFilter\", dateClass: \"dateClass\" }, outputs: { selectedChange: \"selectedChange\", yearSelected: \"yearSelected\", activeDateChange: \"activeDateChange\" }, viewQueries: [{ propertyName: \"_matCalendarBody\", first: true, predicate: MatCalendarBody, descendants: true }], exportAs: [\"matMultiYearView\"], ngImport: i0, template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"grid\\\">\\n  <thead aria-hidden=\\\"true\\\" class=\\\"mat-calendar-table-header\\\">\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [rows]=\\\"_years\\\"\\n         [todayValue]=\\\"_todayYear\\\"\\n         [startValue]=\\\"_selectedYear!\\\"\\n         [endValue]=\\\"_selectedYear!\\\"\\n         [numCols]=\\\"4\\\"\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\n         [activeCell]=\\\"_getActiveCell()\\\"\\n         (selectedValueChange)=\\\"_yearSelected($event)\\\"\\n         (keyup)=\\\"_handleCalendarBodyKeyup($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\", components: [{ type: MatCalendarBody, selector: \"[mat-calendar-body]\", inputs: [\"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"labelMinRequiredCells\", \"numCols\", \"activeCell\", \"isRange\", \"cellAspectRatio\", \"comparisonStart\", \"comparisonEnd\", \"previewStart\", \"previewEnd\"], outputs: [\"selectedValueChange\", \"previewChange\"], exportAs: [\"matCalendarBody\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMultiYearView, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-multi-year-view', exportAs: 'matMultiYearView', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"grid\\\">\\n  <thead aria-hidden=\\\"true\\\" class=\\\"mat-calendar-table-header\\\">\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [rows]=\\\"_years\\\"\\n         [todayValue]=\\\"_todayYear\\\"\\n         [startValue]=\\\"_selectedYear!\\\"\\n         [endValue]=\\\"_selectedYear!\\\"\\n         [numCols]=\\\"4\\\"\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\n         [activeCell]=\\\"_getActiveCell()\\\"\\n         (selectedValueChange)=\\\"_yearSelected($event)\\\"\\n         (keyup)=\\\"_handleCalendarBodyKeyup($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\" }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: i1$1.DateAdapter, decorators: [{\n                        type: Optional\n                    }] }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { activeDate: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], minDate: [{\n                type: Input\n            }], maxDate: [{\n                type: Input\n            }], dateFilter: [{\n                type: Input\n            }], dateClass: [{\n                type: Input\n            }], selectedChange: [{\n                type: Output\n            }], yearSelected: [{\n                type: Output\n            }], activeDateChange: [{\n                type: Output\n            }], _matCalendarBody: [{\n                type: ViewChild,\n                args: [MatCalendarBody]\n            }] } });\nfunction isSameMultiYearView(dateAdapter, date1, date2, minDate, maxDate) {\n    const year1 = dateAdapter.getYear(date1);\n    const year2 = dateAdapter.getYear(date2);\n    const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n    return (Math.floor((year1 - startingYear) / yearsPerPage) ===\n        Math.floor((year2 - startingYear) / yearsPerPage));\n}\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nfunction getActiveOffset(dateAdapter, activeDate, minDate, maxDate) {\n    const activeYear = dateAdapter.getYear(activeDate);\n    return euclideanModulo(activeYear - getStartingYear(dateAdapter, minDate, maxDate), yearsPerPage);\n}\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear(dateAdapter, minDate, maxDate) {\n    let startingYear = 0;\n    if (maxDate) {\n        const maxYear = dateAdapter.getYear(maxDate);\n        startingYear = maxYear - yearsPerPage + 1;\n    }\n    else if (minDate) {\n        startingYear = dateAdapter.getYear(minDate);\n    }\n    return startingYear;\n}\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo(a, b) {\n    return ((a % b) + b) % b;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\nclass MatYearView {\n    constructor(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateFormats = _dateFormats;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        this._rerenderSubscription = Subscription.EMPTY;\n        /** Emits when a new month is selected. */\n        this.selectedChange = new EventEmitter();\n        /** Emits the selected month. This doesn't imply a change on the selected date */\n        this.monthSelected = new EventEmitter();\n        /** Emits when any date is activated. */\n        this.activeDateChange = new EventEmitter();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._dateAdapter) {\n                throw createMissingDateImplError('DateAdapter');\n            }\n            if (!this._dateFormats) {\n                throw createMissingDateImplError('MAT_DATE_FORMATS');\n            }\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    /** The date to display in this year view (everything other than the year is ignored). */\n    get activeDate() {\n        return this._activeDate;\n    }\n    set activeDate(value) {\n        let oldActiveDate = this._activeDate;\n        const validDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) ||\n            this._dateAdapter.today();\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n        if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n            this._init();\n        }\n    }\n    /** The currently selected date. */\n    get selected() {\n        return this._selected;\n    }\n    set selected(value) {\n        if (value instanceof DateRange) {\n            this._selected = value;\n        }\n        else {\n            this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n        this._setSelectedMonth(value);\n    }\n    /** The minimum selectable date. */\n    get minDate() {\n        return this._minDate;\n    }\n    set minDate(value) {\n        this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /** The maximum selectable date. */\n    get maxDate() {\n        return this._maxDate;\n    }\n    set maxDate(value) {\n        this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    ngAfterContentInit() {\n        this._rerenderSubscription = this._dateAdapter.localeChanges\n            .pipe(startWith(null))\n            .subscribe(() => this._init());\n    }\n    ngOnDestroy() {\n        this._rerenderSubscription.unsubscribe();\n    }\n    /** Handles when a new month is selected. */\n    _monthSelected(event) {\n        const month = event.value;\n        const normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n        this.monthSelected.emit(normalizedDate);\n        const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n        this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    _handleCalendarBodyKeydown(event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        const oldActiveDate = this._activeDate;\n        const isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                // Note that we only prevent the default action here while the selection happens in\n                // `keyup` below. We can't do the selection here, because it can cause the calendar to\n                // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n                // because it's too late (see #23305).\n                this._selectionKeyPressed = true;\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n    /** Handles keyup events on the calendar body when calendar is in year view. */\n    _handleCalendarBodyKeyup(event) {\n        if (event.keyCode === SPACE || event.keyCode === ENTER) {\n            if (this._selectionKeyPressed) {\n                this._monthSelected({ value: this._dateAdapter.getMonth(this._activeDate), event });\n            }\n            this._selectionKeyPressed = false;\n        }\n    }\n    /** Initializes this year view. */\n    _init() {\n        this._setSelectedMonth(this.selected);\n        this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n        this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n        let monthNames = this._dateAdapter.getMonthNames('short');\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        this._months = [\n            [0, 1, 2, 3],\n            [4, 5, 6, 7],\n            [8, 9, 10, 11],\n        ].map(row => row.map(month => this._createCellForMonth(month, monthNames[month])));\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell() {\n        this._matCalendarBody._focusActiveCell();\n    }\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    _getMonthInCurrentYear(date) {\n        return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate)\n            ? this._dateAdapter.getMonth(date)\n            : null;\n    }\n    /** Creates an MatCalendarCell for the given month. */\n    _createCellForMonth(month, monthName) {\n        const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n        const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.monthYearA11yLabel);\n        const cellClasses = this.dateClass ? this.dateClass(date, 'year') : undefined;\n        return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month), cellClasses);\n    }\n    /** Whether the given month is enabled. */\n    _shouldEnableMonth(month) {\n        const activeYear = this._dateAdapter.getYear(this.activeDate);\n        if (month === undefined ||\n            month === null ||\n            this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n        if (!this.dateFilter) {\n            return true;\n        }\n        const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    _isYearAndMonthAfterMaxDate(year, month) {\n        if (this.maxDate) {\n            const maxYear = this._dateAdapter.getYear(this.maxDate);\n            const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n        return false;\n    }\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    _isYearAndMonthBeforeMinDate(year, month) {\n        if (this.minDate) {\n            const minYear = this._dateAdapter.getYear(this.minDate);\n            const minMonth = this._dateAdapter.getMonth(this.minDate);\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n        return false;\n    }\n    /** Determines whether the user has the RTL layout direction. */\n    _isRtl() {\n        return this._dir && this._dir.value === 'rtl';\n    }\n    /** Sets the currently-selected month based on a model value. */\n    _setSelectedMonth(value) {\n        if (value instanceof DateRange) {\n            this._selectedMonth =\n                this._getMonthInCurrentYear(value.start) || this._getMonthInCurrentYear(value.end);\n        }\n        else {\n            this._selectedMonth = this._getMonthInCurrentYear(value);\n        }\n    }\n}\nMatYearView.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatYearView, deps: [{ token: i0.ChangeDetectorRef }, { token: MAT_DATE_FORMATS, optional: true }, { token: i1$1.DateAdapter, optional: true }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatYearView.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatYearView, selector: \"mat-year-view\", inputs: { activeDate: \"activeDate\", selected: \"selected\", minDate: \"minDate\", maxDate: \"maxDate\", dateFilter: \"dateFilter\", dateClass: \"dateClass\" }, outputs: { selectedChange: \"selectedChange\", monthSelected: \"monthSelected\", activeDateChange: \"activeDateChange\" }, viewQueries: [{ propertyName: \"_matCalendarBody\", first: true, predicate: MatCalendarBody, descendants: true }], exportAs: [\"matYearView\"], ngImport: i0, template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"grid\\\">\\n  <thead aria-hidden=\\\"true\\\" class=\\\"mat-calendar-table-header\\\">\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [label]=\\\"_yearLabel\\\"\\n         [rows]=\\\"_months\\\"\\n         [todayValue]=\\\"_todayMonth!\\\"\\n         [startValue]=\\\"_selectedMonth!\\\"\\n         [endValue]=\\\"_selectedMonth!\\\"\\n         [labelMinRequiredCells]=\\\"2\\\"\\n         [numCols]=\\\"4\\\"\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\n         [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\"\\n         (selectedValueChange)=\\\"_monthSelected($event)\\\"\\n         (keyup)=\\\"_handleCalendarBodyKeyup($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\", components: [{ type: MatCalendarBody, selector: \"[mat-calendar-body]\", inputs: [\"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"labelMinRequiredCells\", \"numCols\", \"activeCell\", \"isRange\", \"cellAspectRatio\", \"comparisonStart\", \"comparisonEnd\", \"previewStart\", \"previewEnd\"], outputs: [\"selectedValueChange\", \"previewChange\"], exportAs: [\"matCalendarBody\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatYearView, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-year-view', exportAs: 'matYearView', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"grid\\\">\\n  <thead aria-hidden=\\\"true\\\" class=\\\"mat-calendar-table-header\\\">\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [label]=\\\"_yearLabel\\\"\\n         [rows]=\\\"_months\\\"\\n         [todayValue]=\\\"_todayMonth!\\\"\\n         [startValue]=\\\"_selectedMonth!\\\"\\n         [endValue]=\\\"_selectedMonth!\\\"\\n         [labelMinRequiredCells]=\\\"2\\\"\\n         [numCols]=\\\"4\\\"\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\n         [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\"\\n         (selectedValueChange)=\\\"_monthSelected($event)\\\"\\n         (keyup)=\\\"_handleCalendarBodyKeyup($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\" }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DATE_FORMATS]\n                    }] }, { type: i1$1.DateAdapter, decorators: [{\n                        type: Optional\n                    }] }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { activeDate: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], minDate: [{\n                type: Input\n            }], maxDate: [{\n                type: Input\n            }], dateFilter: [{\n                type: Input\n            }], dateClass: [{\n                type: Input\n            }], selectedChange: [{\n                type: Output\n            }], monthSelected: [{\n                type: Output\n            }], activeDateChange: [{\n                type: Output\n            }], _matCalendarBody: [{\n                type: ViewChild,\n                args: [MatCalendarBody]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Datepicker data that requires internationalization. */\nclass MatDatepickerIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /** A label for the calendar popup (used by screen readers). */\n        this.calendarLabel = 'Calendar';\n        /** A label for the button used to open the calendar popup (used by screen readers). */\n        this.openCalendarLabel = 'Open calendar';\n        /** Label for the button used to close the calendar popup. */\n        this.closeCalendarLabel = 'Close calendar';\n        /** A label for the previous month button (used by screen readers). */\n        this.prevMonthLabel = 'Previous month';\n        /** A label for the next month button (used by screen readers). */\n        this.nextMonthLabel = 'Next month';\n        /** A label for the previous year button (used by screen readers). */\n        this.prevYearLabel = 'Previous year';\n        /** A label for the next year button (used by screen readers). */\n        this.nextYearLabel = 'Next year';\n        /** A label for the previous multi-year button (used by screen readers). */\n        this.prevMultiYearLabel = 'Previous 24 years';\n        /** A label for the next multi-year button (used by screen readers). */\n        this.nextMultiYearLabel = 'Next 24 years';\n        /** A label for the 'switch to month view' button (used by screen readers). */\n        this.switchToMonthViewLabel = 'Choose date';\n        /** A label for the 'switch to year view' button (used by screen readers). */\n        this.switchToMultiYearViewLabel = 'Choose month and year';\n    }\n    /** Formats a range of years. */\n    formatYearRange(start, end) {\n        return `${start} \\u2013 ${end}`;\n    }\n}\nMatDatepickerIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMatDatepickerIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerIntl, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs. */\nlet uniqueId = 0;\n/** Default header for MatCalendar */\nclass MatCalendarHeader {\n    constructor(_intl, calendar, _dateAdapter, _dateFormats, changeDetectorRef) {\n        this._intl = _intl;\n        this.calendar = calendar;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this._buttonDescriptionId = `mat-calendar-button-${uniqueId++}`;\n        this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n    }\n    /** The label for the current calendar view. */\n    get periodButtonText() {\n        if (this.calendar.currentView == 'month') {\n            return this._dateAdapter\n                .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n                .toLocaleUpperCase();\n        }\n        if (this.calendar.currentView == 'year') {\n            return this._dateAdapter.getYearName(this.calendar.activeDate);\n        }\n        // The offset from the active year to the \"slot\" for the starting year is the\n        // *actual* first rendered year in the multi-year view, and the last year is\n        // just yearsPerPage - 1 away.\n        const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n        const minYearOfPage = activeYear -\n            getActiveOffset(this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n        const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n        const minYearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\n        const maxYearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\n        return this._intl.formatYearRange(minYearName, maxYearName);\n    }\n    get periodButtonLabel() {\n        return this.calendar.currentView == 'month'\n            ? this._intl.switchToMultiYearViewLabel\n            : this._intl.switchToMonthViewLabel;\n    }\n    /** The label for the previous button. */\n    get prevButtonLabel() {\n        return {\n            'month': this._intl.prevMonthLabel,\n            'year': this._intl.prevYearLabel,\n            'multi-year': this._intl.prevMultiYearLabel,\n        }[this.calendar.currentView];\n    }\n    /** The label for the next button. */\n    get nextButtonLabel() {\n        return {\n            'month': this._intl.nextMonthLabel,\n            'year': this._intl.nextYearLabel,\n            'multi-year': this._intl.nextMultiYearLabel,\n        }[this.calendar.currentView];\n    }\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked() {\n        this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n    }\n    /** Handles user clicks on the previous button. */\n    previousClicked() {\n        this.calendar.activeDate =\n            this.calendar.currentView == 'month'\n                ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1)\n                : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);\n    }\n    /** Handles user clicks on the next button. */\n    nextClicked() {\n        this.calendar.activeDate =\n            this.calendar.currentView == 'month'\n                ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1)\n                : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);\n    }\n    /** Whether the previous period button is enabled. */\n    previousEnabled() {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n        return (!this.calendar.minDate || !this._isSameView(this.calendar.activeDate, this.calendar.minDate));\n    }\n    /** Whether the next period button is enabled. */\n    nextEnabled() {\n        return (!this.calendar.maxDate || !this._isSameView(this.calendar.activeDate, this.calendar.maxDate));\n    }\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    _isSameView(date1, date2) {\n        if (this.calendar.currentView == 'month') {\n            return (this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n                this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2));\n        }\n        if (this.calendar.currentView == 'year') {\n            return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n        }\n        // Otherwise we are in 'multi-year' view.\n        return isSameMultiYearView(this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n    }\n}\nMatCalendarHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCalendarHeader, deps: [{ token: MatDatepickerIntl }, { token: forwardRef(() => MatCalendar) }, { token: i1$1.DateAdapter, optional: true }, { token: MAT_DATE_FORMATS, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMatCalendarHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCalendarHeader, selector: \"mat-calendar-header\", exportAs: [\"matCalendarHeader\"], ngImport: i0, template: \"<div class=\\\"mat-calendar-header\\\">\\n  <div class=\\\"mat-calendar-controls\\\">\\n    <button mat-button type=\\\"button\\\" class=\\\"mat-calendar-period-button\\\"\\n            (click)=\\\"currentPeriodClicked()\\\" [attr.aria-label]=\\\"periodButtonLabel\\\"\\n            [attr.aria-describedby]=\\\"_buttonDescriptionId\\\"\\n            aria-live=\\\"polite\\\">\\n      <span [attr.id]=\\\"_buttonDescriptionId\\\">{{periodButtonText}}</span>\\n      <svg class=\\\"mat-calendar-arrow\\\" [class.mat-calendar-invert]=\\\"calendar.currentView !== 'month'\\\"\\n           viewBox=\\\"0 0 10 5\\\" focusable=\\\"false\\\">\\n           <polygon points=\\\"0,0 5,5 10,0\\\"/>\\n      </svg>\\n    </button>\\n\\n    <div class=\\\"mat-calendar-spacer\\\"></div>\\n\\n    <ng-content></ng-content>\\n\\n    <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-previous-button\\\"\\n            [disabled]=\\\"!previousEnabled()\\\" (click)=\\\"previousClicked()\\\"\\n            [attr.aria-label]=\\\"prevButtonLabel\\\">\\n    </button>\\n\\n    <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-next-button\\\"\\n            [disabled]=\\\"!nextEnabled()\\\" (click)=\\\"nextClicked()\\\"\\n            [attr.aria-label]=\\\"nextButtonLabel\\\">\\n    </button>\\n  </div>\\n</div>\\n\", components: [{ type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCalendarHeader, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-calendar-header', exportAs: 'matCalendarHeader', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div class=\\\"mat-calendar-header\\\">\\n  <div class=\\\"mat-calendar-controls\\\">\\n    <button mat-button type=\\\"button\\\" class=\\\"mat-calendar-period-button\\\"\\n            (click)=\\\"currentPeriodClicked()\\\" [attr.aria-label]=\\\"periodButtonLabel\\\"\\n            [attr.aria-describedby]=\\\"_buttonDescriptionId\\\"\\n            aria-live=\\\"polite\\\">\\n      <span [attr.id]=\\\"_buttonDescriptionId\\\">{{periodButtonText}}</span>\\n      <svg class=\\\"mat-calendar-arrow\\\" [class.mat-calendar-invert]=\\\"calendar.currentView !== 'month'\\\"\\n           viewBox=\\\"0 0 10 5\\\" focusable=\\\"false\\\">\\n           <polygon points=\\\"0,0 5,5 10,0\\\"/>\\n      </svg>\\n    </button>\\n\\n    <div class=\\\"mat-calendar-spacer\\\"></div>\\n\\n    <ng-content></ng-content>\\n\\n    <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-previous-button\\\"\\n            [disabled]=\\\"!previousEnabled()\\\" (click)=\\\"previousClicked()\\\"\\n            [attr.aria-label]=\\\"prevButtonLabel\\\">\\n    </button>\\n\\n    <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-next-button\\\"\\n            [disabled]=\\\"!nextEnabled()\\\" (click)=\\\"nextClicked()\\\"\\n            [attr.aria-label]=\\\"nextButtonLabel\\\">\\n    </button>\\n  </div>\\n</div>\\n\" }]\n        }], ctorParameters: function () {\n        return [{ type: MatDatepickerIntl }, { type: MatCalendar, decorators: [{\n                        type: Inject,\n                        args: [forwardRef(() => MatCalendar)]\n                    }] }, { type: i1$1.DateAdapter, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DATE_FORMATS]\n                    }] }, { type: i0.ChangeDetectorRef }];\n    } });\n/** A calendar that is used as part of the datepicker. */\nclass MatCalendar {\n    constructor(_intl, _dateAdapter, _dateFormats, _changeDetectorRef) {\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Used for scheduling that focus should be moved to the active cell on the next tick.\n         * We need to schedule it, rather than do it immediately, because we have to wait\n         * for Angular to re-evaluate the view children.\n         */\n        this._moveFocusOnNextTick = false;\n        /** Whether the calendar should be started in month or year view. */\n        this.startView = 'month';\n        /** Emits when the currently selected date changes. */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits the year chosen in multiyear view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits the month chosen in year view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when the current view changes.\n         */\n        this.viewChanged = new EventEmitter(true);\n        /** Emits when any date is selected. */\n        this._userSelection = new EventEmitter();\n        /**\n         * Emits whenever there is a state change that the header may need to respond to.\n         */\n        this.stateChanges = new Subject();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._dateAdapter) {\n                throw createMissingDateImplError('DateAdapter');\n            }\n            if (!this._dateFormats) {\n                throw createMissingDateImplError('MAT_DATE_FORMATS');\n            }\n        }\n        this._intlChanges = _intl.changes.subscribe(() => {\n            _changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** A date representing the period (month or year) to start the calendar in. */\n    get startAt() {\n        return this._startAt;\n    }\n    set startAt(value) {\n        this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /** The currently selected date. */\n    get selected() {\n        return this._selected;\n    }\n    set selected(value) {\n        if (value instanceof DateRange) {\n            this._selected = value;\n        }\n        else {\n            this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n    }\n    /** The minimum selectable date. */\n    get minDate() {\n        return this._minDate;\n    }\n    set minDate(value) {\n        this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /** The maximum selectable date. */\n    get maxDate() {\n        return this._maxDate;\n    }\n    set maxDate(value) {\n        this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate() {\n        return this._clampedActiveDate;\n    }\n    set activeDate(value) {\n        this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Whether the calendar is in month view. */\n    get currentView() {\n        return this._currentView;\n    }\n    set currentView(value) {\n        const viewChangedResult = this._currentView !== value ? value : null;\n        this._currentView = value;\n        this._moveFocusOnNextTick = true;\n        this._changeDetectorRef.markForCheck();\n        if (viewChangedResult) {\n            this.viewChanged.emit(viewChangedResult);\n        }\n    }\n    ngAfterContentInit() {\n        this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n        this.activeDate = this.startAt || this._dateAdapter.today();\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n    ngAfterViewChecked() {\n        if (this._moveFocusOnNextTick) {\n            this._moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n    ngOnChanges(changes) {\n        // Ignore date changes that are at a different time on the same day. This fixes issues where\n        // the calendar re-renders when there is no meaningful change to [minDate] or [maxDate]\n        // (#24435).\n        const minDateChange = changes['minDate'] &&\n            !this._dateAdapter.sameDate(changes['minDate'].previousValue, changes['minDate'].currentValue)\n            ? changes['minDate']\n            : undefined;\n        const maxDateChange = changes['maxDate'] &&\n            !this._dateAdapter.sameDate(changes['maxDate'].previousValue, changes['maxDate'].currentValue)\n            ? changes['maxDate']\n            : undefined;\n        const change = minDateChange || maxDateChange || changes['dateFilter'];\n        if (change && !change.firstChange) {\n            const view = this._getCurrentViewComponent();\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n                this._changeDetectorRef.detectChanges();\n                view._init();\n            }\n        }\n        this.stateChanges.next();\n    }\n    /** Focuses the active date. */\n    focusActiveCell() {\n        this._getCurrentViewComponent()._focusActiveCell(false);\n    }\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate() {\n        this._getCurrentViewComponent()._init();\n    }\n    /** Handles date selection in the month view. */\n    _dateSelected(event) {\n        const date = event.value;\n        if (this.selected instanceof DateRange ||\n            (date && !this._dateAdapter.sameDate(date, this.selected))) {\n            this.selectedChange.emit(date);\n        }\n        this._userSelection.emit(event);\n    }\n    /** Handles year selection in the multiyear view. */\n    _yearSelectedInMultiYearView(normalizedYear) {\n        this.yearSelected.emit(normalizedYear);\n    }\n    /** Handles month selection in the year view. */\n    _monthSelectedInYearView(normalizedMonth) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n    /** Handles year/month selection in the multi-year/year views. */\n    _goToDateInView(date, view) {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n    /** Returns the component instance that corresponds to the current calendar view. */\n    _getCurrentViewComponent() {\n        // The return type is explicitly written as a union to ensure that the Closure compiler does\n        // not optimize calls to _init(). Without the explict return type, TypeScript narrows it to\n        // only the first component type. See https://github.com/angular/components/issues/22996.\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n}\nMatCalendar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCalendar, deps: [{ token: MatDatepickerIntl }, { token: i1$1.DateAdapter, optional: true }, { token: MAT_DATE_FORMATS, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMatCalendar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCalendar, selector: \"mat-calendar\", inputs: { headerComponent: \"headerComponent\", startAt: \"startAt\", startView: \"startView\", selected: \"selected\", minDate: \"minDate\", maxDate: \"maxDate\", dateFilter: \"dateFilter\", dateClass: \"dateClass\", comparisonStart: \"comparisonStart\", comparisonEnd: \"comparisonEnd\" }, outputs: { selectedChange: \"selectedChange\", yearSelected: \"yearSelected\", monthSelected: \"monthSelected\", viewChanged: \"viewChanged\", _userSelection: \"_userSelection\" }, host: { classAttribute: \"mat-calendar\" }, providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER], viewQueries: [{ propertyName: \"monthView\", first: true, predicate: MatMonthView, descendants: true }, { propertyName: \"yearView\", first: true, predicate: MatYearView, descendants: true }, { propertyName: \"multiYearView\", first: true, predicate: MatMultiYearView, descendants: true }], exportAs: [\"matCalendar\"], usesOnChanges: true, ngImport: i0, template: \"<ng-template [cdkPortalOutlet]=\\\"_calendarHeaderPortal\\\"></ng-template>\\n\\n<div class=\\\"mat-calendar-content\\\" [ngSwitch]=\\\"currentView\\\" cdkMonitorSubtreeFocus tabindex=\\\"-1\\\">\\n  <mat-month-view\\n      *ngSwitchCase=\\\"'month'\\\"\\n      [(activeDate)]=\\\"activeDate\\\"\\n      [selected]=\\\"selected\\\"\\n      [dateFilter]=\\\"dateFilter\\\"\\n      [maxDate]=\\\"maxDate\\\"\\n      [minDate]=\\\"minDate\\\"\\n      [dateClass]=\\\"dateClass\\\"\\n      [comparisonStart]=\\\"comparisonStart\\\"\\n      [comparisonEnd]=\\\"comparisonEnd\\\"\\n      (_userSelection)=\\\"_dateSelected($event)\\\">\\n  </mat-month-view>\\n\\n  <mat-year-view\\n      *ngSwitchCase=\\\"'year'\\\"\\n      [(activeDate)]=\\\"activeDate\\\"\\n      [selected]=\\\"selected\\\"\\n      [dateFilter]=\\\"dateFilter\\\"\\n      [maxDate]=\\\"maxDate\\\"\\n      [minDate]=\\\"minDate\\\"\\n      [dateClass]=\\\"dateClass\\\"\\n      (monthSelected)=\\\"_monthSelectedInYearView($event)\\\"\\n      (selectedChange)=\\\"_goToDateInView($event, 'month')\\\">\\n  </mat-year-view>\\n\\n  <mat-multi-year-view\\n      *ngSwitchCase=\\\"'multi-year'\\\"\\n      [(activeDate)]=\\\"activeDate\\\"\\n      [selected]=\\\"selected\\\"\\n      [dateFilter]=\\\"dateFilter\\\"\\n      [maxDate]=\\\"maxDate\\\"\\n      [minDate]=\\\"minDate\\\"\\n      [dateClass]=\\\"dateClass\\\"\\n      (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\"\\n      (selectedChange)=\\\"_goToDateInView($event, 'year')\\\">\\n  </mat-multi-year-view>\\n</div>\\n\", styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:none}.mat-calendar-controls{display:flex;margin:5% calc(4.7142857143% - 16px)}.mat-calendar-controls .mat-icon-button:hover .mat-button-focus-overlay{opacity:.04}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:10px;height:5px;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.cdk-high-contrast-active .mat-calendar-arrow{fill:CanvasText}.mat-calendar-previous-button,.mat-calendar-next-button{position:relative}.mat-calendar-previous-button::after,.mat-calendar-next-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-previous-button,[dir=rtl] .mat-calendar-next-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:\\\"\\\";position:absolute;top:0;left:-8px;right:-8px;height:1px}\\n\"], components: [{ type: MatMonthView, selector: \"mat-month-view\", inputs: [\"activeDate\", \"selected\", \"minDate\", \"maxDate\", \"dateFilter\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\"], outputs: [\"selectedChange\", \"_userSelection\", \"activeDateChange\"], exportAs: [\"matMonthView\"] }, { type: MatYearView, selector: \"mat-year-view\", inputs: [\"activeDate\", \"selected\", \"minDate\", \"maxDate\", \"dateFilter\", \"dateClass\"], outputs: [\"selectedChange\", \"monthSelected\", \"activeDateChange\"], exportAs: [\"matYearView\"] }, { type: MatMultiYearView, selector: \"mat-multi-year-view\", inputs: [\"activeDate\", \"selected\", \"minDate\", \"maxDate\", \"dateFilter\", \"dateClass\"], outputs: [\"selectedChange\", \"yearSelected\", \"activeDateChange\"], exportAs: [\"matMultiYearView\"] }], directives: [{ type: i7.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }, { type: i8.CdkMonitorFocus, selector: \"[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]\", outputs: [\"cdkFocusChange\"] }, { type: i1.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i1.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCalendar, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-calendar', host: {\n                        'class': 'mat-calendar',\n                    }, exportAs: 'matCalendar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER], template: \"<ng-template [cdkPortalOutlet]=\\\"_calendarHeaderPortal\\\"></ng-template>\\n\\n<div class=\\\"mat-calendar-content\\\" [ngSwitch]=\\\"currentView\\\" cdkMonitorSubtreeFocus tabindex=\\\"-1\\\">\\n  <mat-month-view\\n      *ngSwitchCase=\\\"'month'\\\"\\n      [(activeDate)]=\\\"activeDate\\\"\\n      [selected]=\\\"selected\\\"\\n      [dateFilter]=\\\"dateFilter\\\"\\n      [maxDate]=\\\"maxDate\\\"\\n      [minDate]=\\\"minDate\\\"\\n      [dateClass]=\\\"dateClass\\\"\\n      [comparisonStart]=\\\"comparisonStart\\\"\\n      [comparisonEnd]=\\\"comparisonEnd\\\"\\n      (_userSelection)=\\\"_dateSelected($event)\\\">\\n  </mat-month-view>\\n\\n  <mat-year-view\\n      *ngSwitchCase=\\\"'year'\\\"\\n      [(activeDate)]=\\\"activeDate\\\"\\n      [selected]=\\\"selected\\\"\\n      [dateFilter]=\\\"dateFilter\\\"\\n      [maxDate]=\\\"maxDate\\\"\\n      [minDate]=\\\"minDate\\\"\\n      [dateClass]=\\\"dateClass\\\"\\n      (monthSelected)=\\\"_monthSelectedInYearView($event)\\\"\\n      (selectedChange)=\\\"_goToDateInView($event, 'month')\\\">\\n  </mat-year-view>\\n\\n  <mat-multi-year-view\\n      *ngSwitchCase=\\\"'multi-year'\\\"\\n      [(activeDate)]=\\\"activeDate\\\"\\n      [selected]=\\\"selected\\\"\\n      [dateFilter]=\\\"dateFilter\\\"\\n      [maxDate]=\\\"maxDate\\\"\\n      [minDate]=\\\"minDate\\\"\\n      [dateClass]=\\\"dateClass\\\"\\n      (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\"\\n      (selectedChange)=\\\"_goToDateInView($event, 'year')\\\">\\n  </mat-multi-year-view>\\n</div>\\n\", styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:none}.mat-calendar-controls{display:flex;margin:5% calc(4.7142857143% - 16px)}.mat-calendar-controls .mat-icon-button:hover .mat-button-focus-overlay{opacity:.04}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:10px;height:5px;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.cdk-high-contrast-active .mat-calendar-arrow{fill:CanvasText}.mat-calendar-previous-button,.mat-calendar-next-button{position:relative}.mat-calendar-previous-button::after,.mat-calendar-next-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-previous-button,[dir=rtl] .mat-calendar-next-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:\\\"\\\";position:absolute;top:0;left:-8px;right:-8px;height:1px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatDatepickerIntl }, { type: i1$1.DateAdapter, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DATE_FORMATS]\n                    }] }, { type: i0.ChangeDetectorRef }];\n    }, propDecorators: { headerComponent: [{\n                type: Input\n            }], startAt: [{\n                type: Input\n            }], startView: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], minDate: [{\n                type: Input\n            }], maxDate: [{\n                type: Input\n            }], dateFilter: [{\n                type: Input\n            }], dateClass: [{\n                type: Input\n            }], comparisonStart: [{\n                type: Input\n            }], comparisonEnd: [{\n                type: Input\n            }], selectedChange: [{\n                type: Output\n            }], yearSelected: [{\n                type: Output\n            }], monthSelected: [{\n                type: Output\n            }], viewChanged: [{\n                type: Output\n            }], _userSelection: [{\n                type: Output\n            }], monthView: [{\n                type: ViewChild,\n                args: [MatMonthView]\n            }], yearView: [{\n                type: ViewChild,\n                args: [MatYearView]\n            }], multiYearView: [{\n                type: ViewChild,\n                args: [MatMultiYearView]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nconst matDatepickerAnimations = {\n    /** Transforms the height of the datepicker's calendar. */\n    transformPanel: trigger('transformPanel', [\n        transition('void => enter-dropdown', animate('120ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(1, 0.8)' }),\n            style({ opacity: 1, transform: 'scale(1, 1)' }),\n        ]))),\n        transition('void => enter-dialog', animate('150ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0.7)' }),\n            style({ transform: 'none', opacity: 1 }),\n        ]))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n    /** Fades in the content of the calendar. */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n        // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')),\n    ]),\n};\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n/** Injection token that determines the scroll handling while the calendar is open. */\nconst MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('mat-datepicker-scroll-strategy');\n/** @docs-private */\nfunction MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nconst _MatDatepickerContentBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/**\n * Component used as the content for the datepicker overlay. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the overlay that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\nclass MatDatepickerContent extends _MatDatepickerContentBase {\n    constructor(elementRef, _changeDetectorRef, _globalModel, _dateAdapter, _rangeSelectionStrategy, intl) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._globalModel = _globalModel;\n        this._dateAdapter = _dateAdapter;\n        this._rangeSelectionStrategy = _rangeSelectionStrategy;\n        this._subscriptions = new Subscription();\n        /** Emits when an animation has finished. */\n        this._animationDone = new Subject();\n        /** Portal with projected action buttons. */\n        this._actionsPortal = null;\n        this._closeButtonText = intl.closeCalendarLabel;\n    }\n    ngOnInit() {\n        // If we have actions, clone the model so that we have the ability to cancel the selection,\n        // otherwise update the global model directly. Note that we want to assign this as soon as\n        // possible, but `_actionsPortal` isn't available in the constructor so we do it in `ngOnInit`.\n        this._model = this._actionsPortal ? this._globalModel.clone() : this._globalModel;\n        this._animationState = this.datepicker.touchUi ? 'enter-dialog' : 'enter-dropdown';\n    }\n    ngAfterViewInit() {\n        this._subscriptions.add(this.datepicker.stateChanges.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        }));\n        this._calendar.focusActiveCell();\n    }\n    ngOnDestroy() {\n        this._subscriptions.unsubscribe();\n        this._animationDone.complete();\n    }\n    _handleUserSelection(event) {\n        const selection = this._model.selection;\n        const value = event.value;\n        const isRange = selection instanceof DateRange;\n        // If we're selecting a range and we have a selection strategy, always pass the value through\n        // there. Otherwise don't assign null values to the model, unless we're selecting a range.\n        // A null value when picking a range means that the user cancelled the selection (e.g. by\n        // pressing escape), whereas when selecting a single value it means that the value didn't\n        // change. This isn't very intuitive, but it's here for backwards-compatibility.\n        if (isRange && this._rangeSelectionStrategy) {\n            const newSelection = this._rangeSelectionStrategy.selectionFinished(value, selection, event.event);\n            this._model.updateSelection(newSelection, this);\n        }\n        else if (value &&\n            (isRange || !this._dateAdapter.sameDate(value, selection))) {\n            this._model.add(value);\n        }\n        // Delegate closing the overlay to the actions.\n        if ((!this._model || this._model.isComplete()) && !this._actionsPortal) {\n            this.datepicker.close();\n        }\n    }\n    _startExitAnimation() {\n        this._animationState = 'void';\n        this._changeDetectorRef.markForCheck();\n    }\n    _getSelected() {\n        return this._model.selection;\n    }\n    /** Applies the current pending selection to the global model. */\n    _applyPendingSelection() {\n        if (this._model !== this._globalModel) {\n            this._globalModel.updateSelection(this._model.selection, this);\n        }\n    }\n}\nMatDatepickerContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerContent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: MatDateSelectionModel }, { token: i1$1.DateAdapter }, { token: MAT_DATE_RANGE_SELECTION_STRATEGY, optional: true }, { token: MatDatepickerIntl }], target: i0.ɵɵFactoryTarget.Component });\nMatDatepickerContent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDatepickerContent, selector: \"mat-datepicker-content\", inputs: { color: \"color\" }, host: { listeners: { \"@transformPanel.done\": \"_animationDone.next()\" }, properties: { \"@transformPanel\": \"_animationState\", \"class.mat-datepicker-content-touch\": \"datepicker.touchUi\" }, classAttribute: \"mat-datepicker-content\" }, viewQueries: [{ propertyName: \"_calendar\", first: true, predicate: MatCalendar, descendants: true }], exportAs: [\"matDatepickerContent\"], usesInheritance: true, ngImport: i0, template: \"<div\\n  cdkTrapFocus\\n  role=\\\"dialog\\\"\\n  [attr.aria-modal]=\\\"true\\\"\\n  [attr.aria-labelledby]=\\\"_dialogLabelId ?? undefined\\\"\\n  class=\\\"mat-datepicker-content-container\\\"\\n  [class.mat-datepicker-content-container-with-custom-header]=\\\"datepicker.calendarHeaderComponent\\\"\\n  [class.mat-datepicker-content-container-with-actions]=\\\"_actionsPortal\\\">\\n  <mat-calendar\\n    [id]=\\\"datepicker.id\\\"\\n    [ngClass]=\\\"datepicker.panelClass\\\"\\n    [startAt]=\\\"datepicker.startAt\\\"\\n    [startView]=\\\"datepicker.startView\\\"\\n    [minDate]=\\\"datepicker._getMinDate()\\\"\\n    [maxDate]=\\\"datepicker._getMaxDate()\\\"\\n    [dateFilter]=\\\"datepicker._getDateFilter()\\\"\\n    [headerComponent]=\\\"datepicker.calendarHeaderComponent\\\"\\n    [selected]=\\\"_getSelected()\\\"\\n    [dateClass]=\\\"datepicker.dateClass\\\"\\n    [comparisonStart]=\\\"comparisonStart\\\"\\n    [comparisonEnd]=\\\"comparisonEnd\\\"\\n    [@fadeInCalendar]=\\\"'enter'\\\"\\n    (yearSelected)=\\\"datepicker._selectYear($event)\\\"\\n    (monthSelected)=\\\"datepicker._selectMonth($event)\\\"\\n    (viewChanged)=\\\"datepicker._viewChanged($event)\\\"\\n    (_userSelection)=\\\"_handleUserSelection($event)\\\"></mat-calendar>\\n\\n  <ng-template [cdkPortalOutlet]=\\\"_actionsPortal\\\"></ng-template>\\n\\n  <!-- Invisible close button for screen reader users. -->\\n  <button\\n    type=\\\"button\\\"\\n    mat-raised-button\\n    [color]=\\\"color || 'primary'\\\"\\n    class=\\\"mat-datepicker-close-button\\\"\\n    [class.cdk-visually-hidden]=\\\"!_closeButtonFocused\\\"\\n    (focus)=\\\"_closeButtonFocused = true\\\"\\n    (blur)=\\\"_closeButtonFocused = false\\\"\\n    (click)=\\\"datepicker.close()\\\">{{ _closeButtonText }}</button>\\n</div>\\n\", styles: [\".mat-datepicker-content{display:block;border-radius:4px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content .mat-datepicker-content-container-with-custom-header .mat-calendar{height:auto}.mat-datepicker-content .mat-datepicker-close-button{position:absolute;top:100%;left:0;margin-top:8px}.ng-animating .mat-datepicker-content .mat-datepicker-close-button{display:none}.mat-datepicker-content-container{display:flex;flex-direction:column;justify-content:space-between}.mat-datepicker-content-touch{display:block;max-height:80vh;position:relative;overflow:visible}.mat-datepicker-content-touch .mat-datepicker-content-container{min-height:312px;max-height:788px;min-width:250px;max-width:750px}.mat-datepicker-content-touch .mat-calendar{width:100%;height:auto}@media all and (orientation: landscape){.mat-datepicker-content-touch .mat-datepicker-content-container{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-datepicker-content-touch .mat-datepicker-content-container{width:80vw;height:100vw}.mat-datepicker-content-touch .mat-datepicker-content-container-with-actions{height:115vw}}\\n\"], components: [{ type: MatCalendar, selector: \"mat-calendar\", inputs: [\"headerComponent\", \"startAt\", \"startView\", \"selected\", \"minDate\", \"maxDate\", \"dateFilter\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\"], outputs: [\"selectedChange\", \"yearSelected\", \"monthSelected\", \"viewChanged\", \"_userSelection\"], exportAs: [\"matCalendar\"] }, { type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i8.CdkTrapFocus, selector: \"[cdkTrapFocus]\", inputs: [\"cdkTrapFocus\", \"cdkTrapFocusAutoCapture\"], exportAs: [\"cdkTrapFocus\"] }, { type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i7.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matDatepickerAnimations.transformPanel, matDatepickerAnimations.fadeInCalendar], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerContent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-datepicker-content', host: {\n                        'class': 'mat-datepicker-content',\n                        '[@transformPanel]': '_animationState',\n                        '(@transformPanel.done)': '_animationDone.next()',\n                        '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n                    }, animations: [matDatepickerAnimations.transformPanel, matDatepickerAnimations.fadeInCalendar], exportAs: 'matDatepickerContent', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['color'], template: \"<div\\n  cdkTrapFocus\\n  role=\\\"dialog\\\"\\n  [attr.aria-modal]=\\\"true\\\"\\n  [attr.aria-labelledby]=\\\"_dialogLabelId ?? undefined\\\"\\n  class=\\\"mat-datepicker-content-container\\\"\\n  [class.mat-datepicker-content-container-with-custom-header]=\\\"datepicker.calendarHeaderComponent\\\"\\n  [class.mat-datepicker-content-container-with-actions]=\\\"_actionsPortal\\\">\\n  <mat-calendar\\n    [id]=\\\"datepicker.id\\\"\\n    [ngClass]=\\\"datepicker.panelClass\\\"\\n    [startAt]=\\\"datepicker.startAt\\\"\\n    [startView]=\\\"datepicker.startView\\\"\\n    [minDate]=\\\"datepicker._getMinDate()\\\"\\n    [maxDate]=\\\"datepicker._getMaxDate()\\\"\\n    [dateFilter]=\\\"datepicker._getDateFilter()\\\"\\n    [headerComponent]=\\\"datepicker.calendarHeaderComponent\\\"\\n    [selected]=\\\"_getSelected()\\\"\\n    [dateClass]=\\\"datepicker.dateClass\\\"\\n    [comparisonStart]=\\\"comparisonStart\\\"\\n    [comparisonEnd]=\\\"comparisonEnd\\\"\\n    [@fadeInCalendar]=\\\"'enter'\\\"\\n    (yearSelected)=\\\"datepicker._selectYear($event)\\\"\\n    (monthSelected)=\\\"datepicker._selectMonth($event)\\\"\\n    (viewChanged)=\\\"datepicker._viewChanged($event)\\\"\\n    (_userSelection)=\\\"_handleUserSelection($event)\\\"></mat-calendar>\\n\\n  <ng-template [cdkPortalOutlet]=\\\"_actionsPortal\\\"></ng-template>\\n\\n  <!-- Invisible close button for screen reader users. -->\\n  <button\\n    type=\\\"button\\\"\\n    mat-raised-button\\n    [color]=\\\"color || 'primary'\\\"\\n    class=\\\"mat-datepicker-close-button\\\"\\n    [class.cdk-visually-hidden]=\\\"!_closeButtonFocused\\\"\\n    (focus)=\\\"_closeButtonFocused = true\\\"\\n    (blur)=\\\"_closeButtonFocused = false\\\"\\n    (click)=\\\"datepicker.close()\\\">{{ _closeButtonText }}</button>\\n</div>\\n\", styles: [\".mat-datepicker-content{display:block;border-radius:4px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content .mat-datepicker-content-container-with-custom-header .mat-calendar{height:auto}.mat-datepicker-content .mat-datepicker-close-button{position:absolute;top:100%;left:0;margin-top:8px}.ng-animating .mat-datepicker-content .mat-datepicker-close-button{display:none}.mat-datepicker-content-container{display:flex;flex-direction:column;justify-content:space-between}.mat-datepicker-content-touch{display:block;max-height:80vh;position:relative;overflow:visible}.mat-datepicker-content-touch .mat-datepicker-content-container{min-height:312px;max-height:788px;min-width:250px;max-width:750px}.mat-datepicker-content-touch .mat-calendar{width:100%;height:auto}@media all and (orientation: landscape){.mat-datepicker-content-touch .mat-datepicker-content-container{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-datepicker-content-touch .mat-datepicker-content-container{width:80vw;height:100vw}.mat-datepicker-content-touch .mat-datepicker-content-container-with-actions{height:115vw}}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: MatDateSelectionModel }, { type: i1$1.DateAdapter }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DATE_RANGE_SELECTION_STRATEGY]\n                    }] }, { type: MatDatepickerIntl }];\n    }, propDecorators: { _calendar: [{\n                type: ViewChild,\n                args: [MatCalendar]\n            }] } });\n/** Base class for a datepicker. */\nclass MatDatepickerBase {\n    constructor(_overlay, _ngZone, _viewContainerRef, scrollStrategy, _dateAdapter, _dir, _model) {\n        this._overlay = _overlay;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        this._model = _model;\n        this._inputStateChanges = Subscription.EMPTY;\n        /** The view that the calendar should start in. */\n        this.startView = 'month';\n        this._touchUi = false;\n        /** Preferred position of the datepicker in the X axis. */\n        this.xPosition = 'start';\n        /** Preferred position of the datepicker in the Y axis. */\n        this.yPosition = 'below';\n        this._restoreFocus = true;\n        /**\n         * Emits selected year in multiyear view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits selected month in year view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when the current view changes.\n         */\n        this.viewChanged = new EventEmitter(true);\n        /** Emits when the datepicker has been opened. */\n        this.openedStream = new EventEmitter();\n        /** Emits when the datepicker has been closed. */\n        this.closedStream = new EventEmitter();\n        this._opened = false;\n        /** The id for the datepicker calendar. */\n        this.id = `mat-datepicker-${datepickerUid++}`;\n        /** The element that was focused before the datepicker was opened. */\n        this._focusedElementBeforeOpen = null;\n        /** Unique class that will be added to the backdrop so that the test harnesses can look it up. */\n        this._backdropHarnessClass = `${this.id}-backdrop`;\n        /** Emits when the datepicker's state changes. */\n        this.stateChanges = new Subject();\n        if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        this._scrollStrategy = scrollStrategy;\n    }\n    /** The date to open the calendar to initially. */\n    get startAt() {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this.datepickerInput ? this.datepickerInput.getStartValue() : null);\n    }\n    set startAt(value) {\n        this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /** Color palette to use on the datepicker's calendar. */\n    get color() {\n        return (this._color || (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined));\n    }\n    set color(value) {\n        this._color = value;\n    }\n    /**\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n     * than a dropdown and elements have more padding to allow for bigger touch targets.\n     */\n    get touchUi() {\n        return this._touchUi;\n    }\n    set touchUi(value) {\n        this._touchUi = coerceBooleanProperty(value);\n    }\n    /** Whether the datepicker pop-up should be disabled. */\n    get disabled() {\n        return this._disabled === undefined && this.datepickerInput\n            ? this.datepickerInput.disabled\n            : !!this._disabled;\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this.stateChanges.next(undefined);\n        }\n    }\n    /**\n     * Whether to restore focus to the previously-focused element when the calendar is closed.\n     * Note that automatic focus restoration is an accessibility feature and it is recommended that\n     * you provide your own equivalent, if you decide to turn it off.\n     */\n    get restoreFocus() {\n        return this._restoreFocus;\n    }\n    set restoreFocus(value) {\n        this._restoreFocus = coerceBooleanProperty(value);\n    }\n    /**\n     * Classes to be passed to the date picker panel.\n     * Supports string and string array values, similar to `ngClass`.\n     */\n    get panelClass() {\n        return this._panelClass;\n    }\n    set panelClass(value) {\n        this._panelClass = coerceStringArray(value);\n    }\n    /** Whether the calendar is open. */\n    get opened() {\n        return this._opened;\n    }\n    set opened(value) {\n        coerceBooleanProperty(value) ? this.open() : this.close();\n    }\n    /** The minimum selectable date. */\n    _getMinDate() {\n        return this.datepickerInput && this.datepickerInput.min;\n    }\n    /** The maximum selectable date. */\n    _getMaxDate() {\n        return this.datepickerInput && this.datepickerInput.max;\n    }\n    _getDateFilter() {\n        return this.datepickerInput && this.datepickerInput.dateFilter;\n    }\n    ngOnChanges(changes) {\n        const positionChange = changes['xPosition'] || changes['yPosition'];\n        if (positionChange && !positionChange.firstChange && this._overlayRef) {\n            const positionStrategy = this._overlayRef.getConfig().positionStrategy;\n            if (positionStrategy instanceof FlexibleConnectedPositionStrategy) {\n                this._setConnectedPositions(positionStrategy);\n                if (this.opened) {\n                    this._overlayRef.updatePosition();\n                }\n            }\n        }\n        this.stateChanges.next(undefined);\n    }\n    ngOnDestroy() {\n        this._destroyOverlay();\n        this.close();\n        this._inputStateChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n    /** Selects the given date */\n    select(date) {\n        this._model.add(date);\n    }\n    /** Emits the selected year in multiyear view */\n    _selectYear(normalizedYear) {\n        this.yearSelected.emit(normalizedYear);\n    }\n    /** Emits selected month in year view */\n    _selectMonth(normalizedMonth) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n    /** Emits changed view */\n    _viewChanged(view) {\n        this.viewChanged.emit(view);\n    }\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     * @returns Selection model that the input should hook itself up to.\n     */\n    registerInput(input) {\n        if (this.datepickerInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('A MatDatepicker can only be associated with a single input.');\n        }\n        this._inputStateChanges.unsubscribe();\n        this.datepickerInput = input;\n        this._inputStateChanges = input.stateChanges.subscribe(() => this.stateChanges.next(undefined));\n        return this._model;\n    }\n    /**\n     * Registers a portal containing action buttons with the datepicker.\n     * @param portal Portal to be registered.\n     */\n    registerActions(portal) {\n        if (this._actionsPortal && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('A MatDatepicker can only be associated with a single actions row.');\n        }\n        this._actionsPortal = portal;\n    }\n    /**\n     * Removes a portal containing action buttons from the datepicker.\n     * @param portal Portal to be removed.\n     */\n    removeActions(portal) {\n        if (portal === this._actionsPortal) {\n            this._actionsPortal = null;\n        }\n    }\n    /** Open the calendar. */\n    open() {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this.datepickerInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempted to open an MatDatepicker with no associated input.');\n        }\n        this._focusedElementBeforeOpen = _getFocusedElementPierceShadowDom();\n        this._openOverlay();\n        this._opened = true;\n        this.openedStream.emit();\n    }\n    /** Close the calendar. */\n    close() {\n        if (!this._opened) {\n            return;\n        }\n        if (this._componentRef) {\n            const instance = this._componentRef.instance;\n            instance._startExitAnimation();\n            instance._animationDone.pipe(take(1)).subscribe(() => this._destroyOverlay());\n        }\n        const completeClose = () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n                this._focusedElementBeforeOpen = null;\n            }\n        };\n        if (this._restoreFocus &&\n            this._focusedElementBeforeOpen &&\n            typeof this._focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this._focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        }\n        else {\n            completeClose();\n        }\n    }\n    /** Applies the current pending selection on the overlay to the model. */\n    _applyPendingSelection() {\n        var _a, _b;\n        (_b = (_a = this._componentRef) === null || _a === void 0 ? void 0 : _a.instance) === null || _b === void 0 ? void 0 : _b._applyPendingSelection();\n    }\n    /** Forwards relevant values from the datepicker to the datepicker content inside the overlay. */\n    _forwardContentValues(instance) {\n        instance.datepicker = this;\n        instance.color = this.color;\n        instance._actionsPortal = this._actionsPortal;\n        instance._dialogLabelId = this.datepickerInput.getOverlayLabelId();\n    }\n    /** Opens the overlay with the calendar. */\n    _openOverlay() {\n        this._destroyOverlay();\n        const isDialog = this.touchUi;\n        const portal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n        const overlayRef = (this._overlayRef = this._overlay.create(new OverlayConfig({\n            positionStrategy: isDialog ? this._getDialogStrategy() : this._getDropdownStrategy(),\n            hasBackdrop: true,\n            backdropClass: [\n                isDialog ? 'cdk-overlay-dark-backdrop' : 'mat-overlay-transparent-backdrop',\n                this._backdropHarnessClass,\n            ],\n            direction: this._dir,\n            scrollStrategy: isDialog ? this._overlay.scrollStrategies.block() : this._scrollStrategy(),\n            panelClass: `mat-datepicker-${isDialog ? 'dialog' : 'popup'}`,\n        })));\n        this._getCloseStream(overlayRef).subscribe(event => {\n            if (event) {\n                event.preventDefault();\n            }\n            this.close();\n        });\n        this._componentRef = overlayRef.attach(portal);\n        this._forwardContentValues(this._componentRef.instance);\n        // Update the position once the calendar has rendered. Only relevant in dropdown mode.\n        if (!isDialog) {\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => overlayRef.updatePosition());\n        }\n    }\n    /** Destroys the current overlay. */\n    _destroyOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = this._componentRef = null;\n        }\n    }\n    /** Gets a position strategy that will open the calendar as a dropdown. */\n    _getDialogStrategy() {\n        return this._overlay.position().global().centerHorizontally().centerVertically();\n    }\n    /** Gets a position strategy that will open the calendar as a dropdown. */\n    _getDropdownStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this.datepickerInput.getConnectedOverlayOrigin())\n            .withTransformOriginOn('.mat-datepicker-content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition();\n        return this._setConnectedPositions(strategy);\n    }\n    /** Sets the positions of the datepicker in dropdown mode based on the current configuration. */\n    _setConnectedPositions(strategy) {\n        const primaryX = this.xPosition === 'end' ? 'end' : 'start';\n        const secondaryX = primaryX === 'start' ? 'end' : 'start';\n        const primaryY = this.yPosition === 'above' ? 'bottom' : 'top';\n        const secondaryY = primaryY === 'top' ? 'bottom' : 'top';\n        return strategy.withPositions([\n            {\n                originX: primaryX,\n                originY: secondaryY,\n                overlayX: primaryX,\n                overlayY: primaryY,\n            },\n            {\n                originX: primaryX,\n                originY: primaryY,\n                overlayX: primaryX,\n                overlayY: secondaryY,\n            },\n            {\n                originX: secondaryX,\n                originY: secondaryY,\n                overlayX: secondaryX,\n                overlayY: primaryY,\n            },\n            {\n                originX: secondaryX,\n                originY: primaryY,\n                overlayX: secondaryX,\n                overlayY: secondaryY,\n            },\n        ]);\n    }\n    /** Gets an observable that will emit when the overlay is supposed to be closed. */\n    _getCloseStream(overlayRef) {\n        return merge(overlayRef.backdropClick(), overlayRef.detachments(), overlayRef.keydownEvents().pipe(filter(event => {\n            // Closing on alt + up is only valid when there's an input associated with the datepicker.\n            return ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                (this.datepickerInput && hasModifierKey(event, 'altKey') && event.keyCode === UP_ARROW));\n        })));\n    }\n}\nMatDatepickerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerBase, deps: [{ token: i9.Overlay }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: MAT_DATEPICKER_SCROLL_STRATEGY }, { token: i1$1.DateAdapter, optional: true }, { token: i2.Directionality, optional: true }, { token: MatDateSelectionModel }], target: i0.ɵɵFactoryTarget.Directive });\nMatDatepickerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDatepickerBase, inputs: { calendarHeaderComponent: \"calendarHeaderComponent\", startAt: \"startAt\", startView: \"startView\", color: \"color\", touchUi: \"touchUi\", disabled: \"disabled\", xPosition: \"xPosition\", yPosition: \"yPosition\", restoreFocus: \"restoreFocus\", dateClass: \"dateClass\", panelClass: \"panelClass\", opened: \"opened\" }, outputs: { yearSelected: \"yearSelected\", monthSelected: \"monthSelected\", viewChanged: \"viewChanged\", openedStream: \"opened\", closedStream: \"closed\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i9.Overlay }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_DATEPICKER_SCROLL_STRATEGY]\n                    }] }, { type: i1$1.DateAdapter, decorators: [{\n                        type: Optional\n                    }] }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: MatDateSelectionModel }];\n    }, propDecorators: { calendarHeaderComponent: [{\n                type: Input\n            }], startAt: [{\n                type: Input\n            }], startView: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], touchUi: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], restoreFocus: [{\n                type: Input\n            }], yearSelected: [{\n                type: Output\n            }], monthSelected: [{\n                type: Output\n            }], viewChanged: [{\n                type: Output\n            }], dateClass: [{\n                type: Input\n            }], openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], panelClass: [{\n                type: Input\n            }], opened: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\nclass MatDatepicker extends MatDatepickerBase {\n}\nMatDatepicker.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepicker, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatDatepicker.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDatepicker, selector: \"mat-datepicker\", providers: [\n        MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\n        { provide: MatDatepickerBase, useExisting: MatDatepicker },\n    ], exportAs: [\"matDatepicker\"], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepicker, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-datepicker',\n                    template: '',\n                    exportAs: 'matDatepicker',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\n                        { provide: MatDatepickerBase, useExisting: MatDatepicker },\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nclass MatDatepickerInputEvent {\n    constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    target, \n    /** Reference to the native input element associated with the datepicker input. */\n    targetElement) {\n        this.target = target;\n        this.targetElement = targetElement;\n        this.value = this.target.value;\n    }\n}\n/** Base class for datepicker inputs. */\nclass MatDatepickerInputBase {\n    constructor(_elementRef, _dateAdapter, _dateFormats) {\n        this._elementRef = _elementRef;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        /** Emits when a `change` event is fired on this `<input>`. */\n        this.dateChange = new EventEmitter();\n        /** Emits when an `input` event is fired on this `<input>`. */\n        this.dateInput = new EventEmitter();\n        /** Emits when the internal state has changed */\n        this.stateChanges = new Subject();\n        this._onTouched = () => { };\n        this._validatorOnChange = () => { };\n        this._cvaOnChange = () => { };\n        this._valueChangesSubscription = Subscription.EMPTY;\n        this._localeSubscription = Subscription.EMPTY;\n        /** The form control validator for whether the input parses. */\n        this._parseValidator = () => {\n            return this._lastValueValid\n                ? null\n                : { 'matDatepickerParse': { 'text': this._elementRef.nativeElement.value } };\n        };\n        /** The form control validator for the date filter. */\n        this._filterValidator = (control) => {\n            const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n            return !controlValue || this._matchesFilter(controlValue)\n                ? null\n                : { 'matDatepickerFilter': true };\n        };\n        /** The form control validator for the min date. */\n        this._minValidator = (control) => {\n            const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n            const min = this._getMinDate();\n            return !min || !controlValue || this._dateAdapter.compareDate(min, controlValue) <= 0\n                ? null\n                : { 'matDatepickerMin': { 'min': min, 'actual': controlValue } };\n        };\n        /** The form control validator for the max date. */\n        this._maxValidator = (control) => {\n            const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n            const max = this._getMaxDate();\n            return !max || !controlValue || this._dateAdapter.compareDate(max, controlValue) >= 0\n                ? null\n                : { 'matDatepickerMax': { 'max': max, 'actual': controlValue } };\n        };\n        /** Whether the last value set on the input was valid. */\n        this._lastValueValid = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._dateAdapter) {\n                throw createMissingDateImplError('DateAdapter');\n            }\n            if (!this._dateFormats) {\n                throw createMissingDateImplError('MAT_DATE_FORMATS');\n            }\n        }\n        // Update the displayed date when the locale changes.\n        this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n            this._assignValueProgrammatically(this.value);\n        });\n    }\n    /** The value of the input. */\n    get value() {\n        return this._model ? this._getValueFromModel(this._model.selection) : this._pendingValue;\n    }\n    set value(value) {\n        this._assignValueProgrammatically(value);\n    }\n    /** Whether the datepicker-input is disabled. */\n    get disabled() {\n        return !!this._disabled || this._parentDisabled();\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        const element = this._elementRef.nativeElement;\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this.stateChanges.next(undefined);\n        }\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        // In Ivy static bindings are invoked earlier, before the element is attached to the DOM.\n        // This can cause an error to be thrown in some browsers (IE/Edge) which assert that the\n        // element has been inserted.\n        if (newValue && this._isInitialized && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n    /** Gets the base validator functions. */\n    _getValidators() {\n        return [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator];\n    }\n    /** Registers a date selection model with the input. */\n    _registerModel(model) {\n        this._model = model;\n        this._valueChangesSubscription.unsubscribe();\n        if (this._pendingValue) {\n            this._assignValue(this._pendingValue);\n        }\n        this._valueChangesSubscription = this._model.selectionChanged.subscribe(event => {\n            if (this._shouldHandleChangeEvent(event)) {\n                const value = this._getValueFromModel(event.selection);\n                this._lastValueValid = this._isValidValue(value);\n                this._cvaOnChange(value);\n                this._onTouched();\n                this._formatValue(value);\n                this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n                this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            }\n        });\n    }\n    ngAfterViewInit() {\n        this._isInitialized = true;\n    }\n    ngOnChanges(changes) {\n        if (dateInputsHaveChanged(changes, this._dateAdapter)) {\n            this.stateChanges.next(undefined);\n        }\n    }\n    ngOnDestroy() {\n        this._valueChangesSubscription.unsubscribe();\n        this._localeSubscription.unsubscribe();\n        this.stateChanges.complete();\n    }\n    /** @docs-private */\n    registerOnValidatorChange(fn) {\n        this._validatorOnChange = fn;\n    }\n    /** @docs-private */\n    validate(c) {\n        return this._validator ? this._validator(c) : null;\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        this._assignValueProgrammatically(value);\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._cvaOnChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    _onKeydown(event) {\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n        if (isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n            this._openPopup();\n            event.preventDefault();\n        }\n    }\n    _onInput(value) {\n        const lastValueWasValid = this._lastValueValid;\n        let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n        this._lastValueValid = this._isValidValue(date);\n        date = this._dateAdapter.getValidDateOrNull(date);\n        const hasChanged = !this._dateAdapter.sameDate(date, this.value);\n        // We need to fire the CVA change event for all\n        // nulls, otherwise the validators won't run.\n        if (!date || hasChanged) {\n            this._cvaOnChange(date);\n        }\n        else {\n            // Call the CVA change handler for invalid values\n            // since this is what marks the control as dirty.\n            if (value && !this.value) {\n                this._cvaOnChange(date);\n            }\n            if (lastValueWasValid !== this._lastValueValid) {\n                this._validatorOnChange();\n            }\n        }\n        if (hasChanged) {\n            this._assignValue(date);\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        }\n    }\n    _onChange() {\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n    /** Handles blur events on the input. */\n    _onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this._formatValue(this.value);\n        }\n        this._onTouched();\n    }\n    /** Formats a value and sets it on the input element. */\n    _formatValue(value) {\n        this._elementRef.nativeElement.value = value\n            ? this._dateAdapter.format(value, this._dateFormats.display.dateInput)\n            : '';\n    }\n    /** Assigns a value to the model. */\n    _assignValue(value) {\n        // We may get some incoming values before the model was\n        // assigned. Save the value so that we can assign it later.\n        if (this._model) {\n            this._assignValueToModel(value);\n            this._pendingValue = null;\n        }\n        else {\n            this._pendingValue = value;\n        }\n    }\n    /** Whether a value is considered valid. */\n    _isValidValue(value) {\n        return !value || this._dateAdapter.isValid(value);\n    }\n    /**\n     * Checks whether a parent control is disabled. This is in place so that it can be overridden\n     * by inputs extending this one which can be placed inside of a group that can be disabled.\n     */\n    _parentDisabled() {\n        return false;\n    }\n    /** Programmatically assigns a value to the input. */\n    _assignValueProgrammatically(value) {\n        value = this._dateAdapter.deserialize(value);\n        this._lastValueValid = this._isValidValue(value);\n        value = this._dateAdapter.getValidDateOrNull(value);\n        this._assignValue(value);\n        this._formatValue(value);\n    }\n    /** Gets whether a value matches the current date filter. */\n    _matchesFilter(value) {\n        const filter = this._getDateFilter();\n        return !filter || filter(value);\n    }\n}\nMatDatepickerInputBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerInputBase, deps: [{ token: i0.ElementRef }, { token: i1$1.DateAdapter, optional: true }, { token: MAT_DATE_FORMATS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatDatepickerInputBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDatepickerInputBase, inputs: { value: \"value\", disabled: \"disabled\" }, outputs: { dateChange: \"dateChange\", dateInput: \"dateInput\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerInputBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1$1.DateAdapter, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DATE_FORMATS]\n                    }] }];\n    }, propDecorators: { value: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], dateChange: [{\n                type: Output\n            }], dateInput: [{\n                type: Output\n            }] } });\n/**\n * Checks whether the `SimpleChanges` object from an `ngOnChanges`\n * callback has any changes, accounting for date objects.\n */\nfunction dateInputsHaveChanged(changes, adapter) {\n    const keys = Object.keys(changes);\n    for (let key of keys) {\n        const { previousValue, currentValue } = changes[key];\n        if (adapter.isDateInstance(previousValue) && adapter.isDateInstance(currentValue)) {\n            if (!adapter.sameDate(previousValue, currentValue)) {\n                return true;\n            }\n        }\n        else {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nconst MAT_DATEPICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatDatepickerInput),\n    multi: true,\n};\n/** @docs-private */\nconst MAT_DATEPICKER_VALIDATORS = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatDatepickerInput),\n    multi: true,\n};\n/** Directive used to connect an input to a MatDatepicker. */\nclass MatDatepickerInput extends MatDatepickerInputBase {\n    constructor(elementRef, dateAdapter, dateFormats, _formField) {\n        super(elementRef, dateAdapter, dateFormats);\n        this._formField = _formField;\n        this._closedSubscription = Subscription.EMPTY;\n        this._validator = Validators.compose(super._getValidators());\n    }\n    /** The datepicker that this input is associated with. */\n    set matDatepicker(datepicker) {\n        if (datepicker) {\n            this._datepicker = datepicker;\n            this._closedSubscription = datepicker.closedStream.subscribe(() => this._onTouched());\n            this._registerModel(datepicker.registerInput(this));\n        }\n    }\n    /** The minimum valid date. */\n    get min() {\n        return this._min;\n    }\n    set min(value) {\n        const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n        if (!this._dateAdapter.sameDate(validValue, this._min)) {\n            this._min = validValue;\n            this._validatorOnChange();\n        }\n    }\n    /** The maximum valid date. */\n    get max() {\n        return this._max;\n    }\n    set max(value) {\n        const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n        if (!this._dateAdapter.sameDate(validValue, this._max)) {\n            this._max = validValue;\n            this._validatorOnChange();\n        }\n    }\n    /** Function that can be used to filter out dates within the datepicker. */\n    get dateFilter() {\n        return this._dateFilter;\n    }\n    set dateFilter(value) {\n        const wasMatchingValue = this._matchesFilter(this.value);\n        this._dateFilter = value;\n        if (this._matchesFilter(this.value) !== wasMatchingValue) {\n            this._validatorOnChange();\n        }\n    }\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return The element to connect the popup to.\n     */\n    getConnectedOverlayOrigin() {\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n    }\n    /** Gets the ID of an element that should be used a description for the calendar overlay. */\n    getOverlayLabelId() {\n        if (this._formField) {\n            return this._formField.getLabelId();\n        }\n        return this._elementRef.nativeElement.getAttribute('aria-labelledby');\n    }\n    /** Returns the palette used by the input's form field, if any. */\n    getThemePalette() {\n        return this._formField ? this._formField.color : undefined;\n    }\n    /** Gets the value at which the calendar should start. */\n    getStartValue() {\n        return this.value;\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._closedSubscription.unsubscribe();\n    }\n    /** Opens the associated datepicker. */\n    _openPopup() {\n        if (this._datepicker) {\n            this._datepicker.open();\n        }\n    }\n    _getValueFromModel(modelValue) {\n        return modelValue;\n    }\n    _assignValueToModel(value) {\n        if (this._model) {\n            this._model.updateSelection(value, this);\n        }\n    }\n    /** Gets the input's minimum date. */\n    _getMinDate() {\n        return this._min;\n    }\n    /** Gets the input's maximum date. */\n    _getMaxDate() {\n        return this._max;\n    }\n    /** Gets the input's date filtering function. */\n    _getDateFilter() {\n        return this._dateFilter;\n    }\n    _shouldHandleChangeEvent(event) {\n        return event.source !== this;\n    }\n}\nMatDatepickerInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerInput, deps: [{ token: i0.ElementRef }, { token: i1$1.DateAdapter, optional: true }, { token: MAT_DATE_FORMATS, optional: true }, { token: MAT_FORM_FIELD, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatDatepickerInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDatepickerInput, selector: \"input[matDatepicker]\", inputs: { matDatepicker: \"matDatepicker\", min: \"min\", max: \"max\", dateFilter: [\"matDatepickerFilter\", \"dateFilter\"] }, host: { listeners: { \"input\": \"_onInput($event.target.value)\", \"change\": \"_onChange()\", \"blur\": \"_onBlur()\", \"keydown\": \"_onKeydown($event)\" }, properties: { \"attr.aria-haspopup\": \"_datepicker ? \\\"dialog\\\" : null\", \"attr.aria-owns\": \"(_datepicker?.opened && _datepicker.id) || null\", \"attr.min\": \"min ? _dateAdapter.toIso8601(min) : null\", \"attr.max\": \"max ? _dateAdapter.toIso8601(max) : null\", \"attr.data-mat-calendar\": \"_datepicker ? _datepicker.id : null\", \"disabled\": \"disabled\" }, classAttribute: \"mat-datepicker-input\" }, providers: [\n        MAT_DATEPICKER_VALUE_ACCESSOR,\n        MAT_DATEPICKER_VALIDATORS,\n        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput },\n    ], exportAs: [\"matDatepickerInput\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[matDatepicker]',\n                    providers: [\n                        MAT_DATEPICKER_VALUE_ACCESSOR,\n                        MAT_DATEPICKER_VALIDATORS,\n                        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput },\n                    ],\n                    host: {\n                        'class': 'mat-datepicker-input',\n                        '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n                        '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n                        '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n                        '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n                        // Used by the test harness to tie this input to its calendar. We can't depend on\n                        // `aria-owns` for this, because it's only defined while the calendar is open.\n                        '[attr.data-mat-calendar]': '_datepicker ? _datepicker.id : null',\n                        '[disabled]': 'disabled',\n                        '(input)': '_onInput($event.target.value)',\n                        '(change)': '_onChange()',\n                        '(blur)': '_onBlur()',\n                        '(keydown)': '_onKeydown($event)',\n                    },\n                    exportAs: 'matDatepickerInput',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1$1.DateAdapter, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DATE_FORMATS]\n                    }] }, { type: i2$1.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD]\n                    }] }];\n    }, propDecorators: { matDatepicker: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], dateFilter: [{\n                type: Input,\n                args: ['matDatepickerFilter']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Can be used to override the icon of a `matDatepickerToggle`. */\nclass MatDatepickerToggleIcon {\n}\nMatDatepickerToggleIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerToggleIcon, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDatepickerToggleIcon.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDatepickerToggleIcon, selector: \"[matDatepickerToggleIcon]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerToggleIcon, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matDatepickerToggleIcon]',\n                }]\n        }] });\nclass MatDatepickerToggle {\n    constructor(_intl, _changeDetectorRef, defaultTabIndex) {\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._stateChanges = Subscription.EMPTY;\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n    }\n    /** Whether the toggle button is disabled. */\n    get disabled() {\n        if (this._disabled === undefined && this.datepicker) {\n            return this.datepicker.disabled;\n        }\n        return !!this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnChanges(changes) {\n        if (changes['datepicker']) {\n            this._watchStateChanges();\n        }\n    }\n    ngOnDestroy() {\n        this._stateChanges.unsubscribe();\n    }\n    ngAfterContentInit() {\n        this._watchStateChanges();\n    }\n    _open(event) {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n    _watchStateChanges() {\n        const datepickerStateChanged = this.datepicker ? this.datepicker.stateChanges : of();\n        const inputStateChanged = this.datepicker && this.datepicker.datepickerInput\n            ? this.datepicker.datepickerInput.stateChanges\n            : of();\n        const datepickerToggled = this.datepicker\n            ? merge(this.datepicker.openedStream, this.datepicker.closedStream)\n            : of();\n        this._stateChanges.unsubscribe();\n        this._stateChanges = merge(this._intl.changes, datepickerStateChanged, inputStateChanged, datepickerToggled).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n}\nMatDatepickerToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerToggle, deps: [{ token: MatDatepickerIntl }, { token: i0.ChangeDetectorRef }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component });\nMatDatepickerToggle.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDatepickerToggle, selector: \"mat-datepicker-toggle\", inputs: { datepicker: [\"for\", \"datepicker\"], tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], disabled: \"disabled\", disableRipple: \"disableRipple\" }, host: { listeners: { \"click\": \"_open($event)\" }, properties: { \"attr.tabindex\": \"null\", \"class.mat-datepicker-toggle-active\": \"datepicker && datepicker.opened\", \"class.mat-accent\": \"datepicker && datepicker.color === \\\"accent\\\"\", \"class.mat-warn\": \"datepicker && datepicker.color === \\\"warn\\\"\", \"attr.data-mat-calendar\": \"datepicker ? datepicker.id : null\" }, classAttribute: \"mat-datepicker-toggle\" }, queries: [{ propertyName: \"_customIcon\", first: true, predicate: MatDatepickerToggleIcon, descendants: true }], viewQueries: [{ propertyName: \"_button\", first: true, predicate: [\"button\"], descendants: true }], exportAs: [\"matDatepickerToggle\"], usesOnChanges: true, ngImport: i0, template: \"<button\\n  #button\\n  mat-icon-button\\n  type=\\\"button\\\"\\n  [attr.aria-haspopup]=\\\"datepicker ? 'dialog' : null\\\"\\n  [attr.aria-label]=\\\"ariaLabel || _intl.openCalendarLabel\\\"\\n  [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n  [disabled]=\\\"disabled\\\"\\n  [disableRipple]=\\\"disableRipple\\\">\\n\\n  <svg\\n    *ngIf=\\\"!_customIcon\\\"\\n    class=\\\"mat-datepicker-toggle-default-icon\\\"\\n    viewBox=\\\"0 0 24 24\\\"\\n    width=\\\"24px\\\"\\n    height=\\\"24px\\\"\\n    fill=\\\"currentColor\\\"\\n    focusable=\\\"false\\\">\\n    <path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\\\"/>\\n  </svg>\\n\\n  <ng-content select=\\\"[matDatepickerToggleIcon]\\\"></ng-content>\\n</button>\\n\", styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}.cdk-high-contrast-active .mat-datepicker-toggle-default-icon{color:CanvasText}\\n\"], components: [{ type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerToggle, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-datepicker-toggle', host: {\n                        'class': 'mat-datepicker-toggle',\n                        '[attr.tabindex]': 'null',\n                        '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n                        '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n                        '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n                        // Used by the test harness to tie this toggle to its datepicker.\n                        '[attr.data-mat-calendar]': 'datepicker ? datepicker.id : null',\n                        // Bind the `click` on the host, rather than the inner `button`, so that we can call\n                        // `stopPropagation` on it without affecting the user's `click` handlers. We need to stop\n                        // it so that the input doesn't get focused automatically by the form field (See #21836).\n                        '(click)': '_open($event)',\n                    }, exportAs: 'matDatepickerToggle', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<button\\n  #button\\n  mat-icon-button\\n  type=\\\"button\\\"\\n  [attr.aria-haspopup]=\\\"datepicker ? 'dialog' : null\\\"\\n  [attr.aria-label]=\\\"ariaLabel || _intl.openCalendarLabel\\\"\\n  [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n  [disabled]=\\\"disabled\\\"\\n  [disableRipple]=\\\"disableRipple\\\">\\n\\n  <svg\\n    *ngIf=\\\"!_customIcon\\\"\\n    class=\\\"mat-datepicker-toggle-default-icon\\\"\\n    viewBox=\\\"0 0 24 24\\\"\\n    width=\\\"24px\\\"\\n    height=\\\"24px\\\"\\n    fill=\\\"currentColor\\\"\\n    focusable=\\\"false\\\">\\n    <path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\\\"/>\\n  </svg>\\n\\n  <ng-content select=\\\"[matDatepickerToggleIcon]\\\"></ng-content>\\n</button>\\n\", styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}.cdk-high-contrast-active .mat-datepicker-toggle-default-icon{color:CanvasText}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatDatepickerIntl }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }];\n    }, propDecorators: { datepicker: [{\n                type: Input,\n                args: ['for']\n            }], tabIndex: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], disabled: [{\n                type: Input\n            }], disableRipple: [{\n                type: Input\n            }], _customIcon: [{\n                type: ContentChild,\n                args: [MatDatepickerToggleIcon]\n            }], _button: [{\n                type: ViewChild,\n                args: ['button']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide the date range input wrapper component\n * to the parts without circular dependencies.\n */\nconst MAT_DATE_RANGE_INPUT_PARENT = new InjectionToken('MAT_DATE_RANGE_INPUT_PARENT');\n/**\n * Base class for the individual inputs that can be projected inside a `mat-date-range-input`.\n */\nclass MatDateRangeInputPartBase extends MatDatepickerInputBase {\n    constructor(_rangeInput, elementRef, _defaultErrorStateMatcher, _injector, _parentForm, _parentFormGroup, dateAdapter, dateFormats) {\n        super(elementRef, dateAdapter, dateFormats);\n        this._rangeInput = _rangeInput;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._injector = _injector;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n    }\n    ngOnInit() {\n        // We need the date input to provide itself as a `ControlValueAccessor` and a `Validator`, while\n        // injecting its `NgControl` so that the error state is handled correctly. This introduces a\n        // circular dependency, because both `ControlValueAccessor` and `Validator` depend on the input\n        // itself. Usually we can work around it for the CVA, but there's no API to do it for the\n        // validator. We work around it here by injecting the `NgControl` in `ngOnInit`, after\n        // everything has been resolved.\n        // tslint:disable-next-line:no-bitwise\n        const ngControl = this._injector.get(NgControl, null, InjectFlags.Self | InjectFlags.Optional);\n        if (ngControl) {\n            this.ngControl = ngControl;\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n    /** Gets whether the input is empty. */\n    isEmpty() {\n        return this._elementRef.nativeElement.value.length === 0;\n    }\n    /** Gets the placeholder of the input. */\n    _getPlaceholder() {\n        return this._elementRef.nativeElement.placeholder;\n    }\n    /** Focuses the input. */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    /** Handles `input` events on the input element. */\n    _onInput(value) {\n        super._onInput(value);\n        this._rangeInput._handleChildValueChange();\n    }\n    /** Opens the datepicker associated with the input. */\n    _openPopup() {\n        this._rangeInput._openDatepicker();\n    }\n    /** Gets the minimum date from the range input. */\n    _getMinDate() {\n        return this._rangeInput.min;\n    }\n    /** Gets the maximum date from the range input. */\n    _getMaxDate() {\n        return this._rangeInput.max;\n    }\n    /** Gets the date filter function from the range input. */\n    _getDateFilter() {\n        return this._rangeInput.dateFilter;\n    }\n    _parentDisabled() {\n        return this._rangeInput._groupDisabled;\n    }\n    _shouldHandleChangeEvent({ source }) {\n        return source !== this._rangeInput._startInput && source !== this._rangeInput._endInput;\n    }\n    _assignValueProgrammatically(value) {\n        super._assignValueProgrammatically(value);\n        const opposite = (this === this._rangeInput._startInput\n            ? this._rangeInput._endInput\n            : this._rangeInput._startInput);\n        opposite === null || opposite === void 0 ? void 0 : opposite._validatorOnChange();\n    }\n}\nMatDateRangeInputPartBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDateRangeInputPartBase, deps: [{ token: MAT_DATE_RANGE_INPUT_PARENT }, { token: i0.ElementRef }, { token: i1$1.ErrorStateMatcher }, { token: i0.Injector }, { token: i2$2.NgForm, optional: true }, { token: i2$2.FormGroupDirective, optional: true }, { token: i1$1.DateAdapter, optional: true }, { token: MAT_DATE_FORMATS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatDateRangeInputPartBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDateRangeInputPartBase, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDateRangeInputPartBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_DATE_RANGE_INPUT_PARENT]\n                    }] }, { type: i0.ElementRef }, { type: i1$1.ErrorStateMatcher }, { type: i0.Injector }, { type: i2$2.NgForm, decorators: [{\n                        type: Optional\n                    }] }, { type: i2$2.FormGroupDirective, decorators: [{\n                        type: Optional\n                    }] }, { type: i1$1.DateAdapter, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DATE_FORMATS]\n                    }] }];\n    } });\nconst _MatDateRangeInputBase = mixinErrorState(MatDateRangeInputPartBase);\n/** Input for entering the start date in a `mat-date-range-input`. */\nclass MatStartDate extends _MatDateRangeInputBase {\n    constructor(rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup, dateAdapter, dateFormats) {\n        super(rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup, dateAdapter, dateFormats);\n        /** Validator that checks that the start date isn't after the end date. */\n        this._startValidator = (control) => {\n            const start = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n            const end = this._model ? this._model.selection.end : null;\n            return !start || !end || this._dateAdapter.compareDate(start, end) <= 0\n                ? null\n                : { 'matStartDateInvalid': { 'end': end, 'actual': start } };\n        };\n        this._validator = Validators.compose([...super._getValidators(), this._startValidator]);\n    }\n    _getValueFromModel(modelValue) {\n        return modelValue.start;\n    }\n    _shouldHandleChangeEvent(change) {\n        var _a;\n        if (!super._shouldHandleChangeEvent(change)) {\n            return false;\n        }\n        else {\n            return !((_a = change.oldValue) === null || _a === void 0 ? void 0 : _a.start)\n                ? !!change.selection.start\n                : !change.selection.start ||\n                    !!this._dateAdapter.compareDate(change.oldValue.start, change.selection.start);\n        }\n    }\n    _assignValueToModel(value) {\n        if (this._model) {\n            const range = new DateRange(value, this._model.selection.end);\n            this._model.updateSelection(range, this);\n        }\n    }\n    _formatValue(value) {\n        super._formatValue(value);\n        // Any time the input value is reformatted we need to tell the parent.\n        this._rangeInput._handleChildValueChange();\n    }\n    /** Gets the value that should be used when mirroring the input's size. */\n    getMirrorValue() {\n        const element = this._elementRef.nativeElement;\n        const value = element.value;\n        return value.length > 0 ? value : element.placeholder;\n    }\n}\nMatStartDate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatStartDate, deps: [{ token: MAT_DATE_RANGE_INPUT_PARENT }, { token: i0.ElementRef }, { token: i1$1.ErrorStateMatcher }, { token: i0.Injector }, { token: i2$2.NgForm, optional: true }, { token: i2$2.FormGroupDirective, optional: true }, { token: i1$1.DateAdapter, optional: true }, { token: MAT_DATE_FORMATS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatStartDate.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatStartDate, selector: \"input[matStartDate]\", inputs: { errorStateMatcher: \"errorStateMatcher\" }, outputs: { dateChange: \"dateChange\", dateInput: \"dateInput\" }, host: { attributes: { \"type\": \"text\" }, listeners: { \"input\": \"_onInput($event.target.value)\", \"change\": \"_onChange()\", \"keydown\": \"_onKeydown($event)\", \"blur\": \"_onBlur()\" }, properties: { \"disabled\": \"disabled\", \"attr.id\": \"_rangeInput.id\", \"attr.aria-haspopup\": \"_rangeInput.rangePicker ? \\\"dialog\\\" : null\", \"attr.aria-owns\": \"(_rangeInput.rangePicker?.opened && _rangeInput.rangePicker.id) || null\", \"attr.min\": \"_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()) : null\", \"attr.max\": \"_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()) : null\" }, classAttribute: \"mat-start-date mat-date-range-input-inner\" }, providers: [\n        { provide: NG_VALUE_ACCESSOR, useExisting: MatStartDate, multi: true },\n        { provide: NG_VALIDATORS, useExisting: MatStartDate, multi: true },\n    ], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatStartDate, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[matStartDate]',\n                    host: {\n                        'class': 'mat-start-date mat-date-range-input-inner',\n                        '[disabled]': 'disabled',\n                        '(input)': '_onInput($event.target.value)',\n                        '(change)': '_onChange()',\n                        '(keydown)': '_onKeydown($event)',\n                        '[attr.id]': '_rangeInput.id',\n                        '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\n                        '[attr.aria-owns]': '(_rangeInput.rangePicker?.opened && _rangeInput.rangePicker.id) || null',\n                        '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()) : null',\n                        '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()) : null',\n                        '(blur)': '_onBlur()',\n                        'type': 'text',\n                    },\n                    providers: [\n                        { provide: NG_VALUE_ACCESSOR, useExisting: MatStartDate, multi: true },\n                        { provide: NG_VALIDATORS, useExisting: MatStartDate, multi: true },\n                    ],\n                    // These need to be specified explicitly, because some tooling doesn't\n                    // seem to pick them up from the base class. See #20932.\n                    outputs: ['dateChange', 'dateInput'],\n                    inputs: ['errorStateMatcher'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_DATE_RANGE_INPUT_PARENT]\n                    }] }, { type: i0.ElementRef }, { type: i1$1.ErrorStateMatcher }, { type: i0.Injector }, { type: i2$2.NgForm, decorators: [{\n                        type: Optional\n                    }] }, { type: i2$2.FormGroupDirective, decorators: [{\n                        type: Optional\n                    }] }, { type: i1$1.DateAdapter, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DATE_FORMATS]\n                    }] }];\n    } });\n/** Input for entering the end date in a `mat-date-range-input`. */\nclass MatEndDate extends _MatDateRangeInputBase {\n    constructor(rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup, dateAdapter, dateFormats) {\n        super(rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup, dateAdapter, dateFormats);\n        /** Validator that checks that the end date isn't before the start date. */\n        this._endValidator = (control) => {\n            const end = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n            const start = this._model ? this._model.selection.start : null;\n            return !end || !start || this._dateAdapter.compareDate(end, start) >= 0\n                ? null\n                : { 'matEndDateInvalid': { 'start': start, 'actual': end } };\n        };\n        this._validator = Validators.compose([...super._getValidators(), this._endValidator]);\n    }\n    _getValueFromModel(modelValue) {\n        return modelValue.end;\n    }\n    _shouldHandleChangeEvent(change) {\n        var _a;\n        if (!super._shouldHandleChangeEvent(change)) {\n            return false;\n        }\n        else {\n            return !((_a = change.oldValue) === null || _a === void 0 ? void 0 : _a.end)\n                ? !!change.selection.end\n                : !change.selection.end ||\n                    !!this._dateAdapter.compareDate(change.oldValue.end, change.selection.end);\n        }\n    }\n    _assignValueToModel(value) {\n        if (this._model) {\n            const range = new DateRange(this._model.selection.start, value);\n            this._model.updateSelection(range, this);\n        }\n    }\n    _onKeydown(event) {\n        // If the user is pressing backspace on an empty end input, move focus back to the start.\n        if (event.keyCode === BACKSPACE && !this._elementRef.nativeElement.value) {\n            this._rangeInput._startInput.focus();\n        }\n        super._onKeydown(event);\n    }\n}\nMatEndDate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatEndDate, deps: [{ token: MAT_DATE_RANGE_INPUT_PARENT }, { token: i0.ElementRef }, { token: i1$1.ErrorStateMatcher }, { token: i0.Injector }, { token: i2$2.NgForm, optional: true }, { token: i2$2.FormGroupDirective, optional: true }, { token: i1$1.DateAdapter, optional: true }, { token: MAT_DATE_FORMATS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatEndDate.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatEndDate, selector: \"input[matEndDate]\", inputs: { errorStateMatcher: \"errorStateMatcher\" }, outputs: { dateChange: \"dateChange\", dateInput: \"dateInput\" }, host: { attributes: { \"type\": \"text\" }, listeners: { \"input\": \"_onInput($event.target.value)\", \"change\": \"_onChange()\", \"keydown\": \"_onKeydown($event)\", \"blur\": \"_onBlur()\" }, properties: { \"disabled\": \"disabled\", \"attr.aria-haspopup\": \"_rangeInput.rangePicker ? \\\"dialog\\\" : null\", \"attr.aria-owns\": \"(_rangeInput.rangePicker?.opened && _rangeInput.rangePicker.id) || null\", \"attr.min\": \"_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()) : null\", \"attr.max\": \"_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()) : null\" }, classAttribute: \"mat-end-date mat-date-range-input-inner\" }, providers: [\n        { provide: NG_VALUE_ACCESSOR, useExisting: MatEndDate, multi: true },\n        { provide: NG_VALIDATORS, useExisting: MatEndDate, multi: true },\n    ], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatEndDate, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[matEndDate]',\n                    host: {\n                        'class': 'mat-end-date mat-date-range-input-inner',\n                        '[disabled]': 'disabled',\n                        '(input)': '_onInput($event.target.value)',\n                        '(change)': '_onChange()',\n                        '(keydown)': '_onKeydown($event)',\n                        '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\n                        '[attr.aria-owns]': '(_rangeInput.rangePicker?.opened && _rangeInput.rangePicker.id) || null',\n                        '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()) : null',\n                        '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()) : null',\n                        '(blur)': '_onBlur()',\n                        'type': 'text',\n                    },\n                    providers: [\n                        { provide: NG_VALUE_ACCESSOR, useExisting: MatEndDate, multi: true },\n                        { provide: NG_VALIDATORS, useExisting: MatEndDate, multi: true },\n                    ],\n                    // These need to be specified explicitly, because some tooling doesn't\n                    // seem to pick them up from the base class. See #20932.\n                    outputs: ['dateChange', 'dateInput'],\n                    inputs: ['errorStateMatcher'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_DATE_RANGE_INPUT_PARENT]\n                    }] }, { type: i0.ElementRef }, { type: i1$1.ErrorStateMatcher }, { type: i0.Injector }, { type: i2$2.NgForm, decorators: [{\n                        type: Optional\n                    }] }, { type: i2$2.FormGroupDirective, decorators: [{\n                        type: Optional\n                    }] }, { type: i1$1.DateAdapter, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DATE_FORMATS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\nclass MatDateRangeInput {\n    constructor(_changeDetectorRef, _elementRef, control, _dateAdapter, _formField) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dateAdapter = _dateAdapter;\n        this._formField = _formField;\n        this._closedSubscription = Subscription.EMPTY;\n        /** Unique ID for the input. */\n        this.id = `mat-date-range-input-${nextUniqueId++}`;\n        /** Whether the control is focused. */\n        this.focused = false;\n        /** Name of the form control. */\n        this.controlType = 'mat-date-range-input';\n        this._groupDisabled = false;\n        /** Value for the `aria-describedby` attribute of the inputs. */\n        this._ariaDescribedBy = null;\n        /** Separator text to be shown between the inputs. */\n        this.separator = '–';\n        /** Start of the comparison range that should be shown in the calendar. */\n        this.comparisonStart = null;\n        /** End of the comparison range that should be shown in the calendar. */\n        this.comparisonEnd = null;\n        /** Emits when the input's state has changed. */\n        this.stateChanges = new Subject();\n        if (!_dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        // The datepicker module can be used both with MDC and non-MDC form fields. We have\n        // to conditionally add the MDC input class so that the range picker looks correctly.\n        if (_formField === null || _formField === void 0 ? void 0 : _formField._elementRef.nativeElement.classList.contains('mat-mdc-form-field')) {\n            const classList = _elementRef.nativeElement.classList;\n            classList.add('mat-mdc-input-element');\n            classList.add('mat-mdc-form-field-input-control');\n        }\n        // TODO(crisbeto): remove `as any` after #18206 lands.\n        this.ngControl = control;\n    }\n    /** Current value of the range input. */\n    get value() {\n        return this._model ? this._model.selection : null;\n    }\n    /** Whether the control's label should float. */\n    get shouldLabelFloat() {\n        return this.focused || !this.empty;\n    }\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * Set the placeholder attribute on `matStartDate` and `matEndDate`.\n     * @docs-private\n     */\n    get placeholder() {\n        var _a, _b;\n        const start = ((_a = this._startInput) === null || _a === void 0 ? void 0 : _a._getPlaceholder()) || '';\n        const end = ((_b = this._endInput) === null || _b === void 0 ? void 0 : _b._getPlaceholder()) || '';\n        return start || end ? `${start} ${this.separator} ${end}` : '';\n    }\n    /** The range picker that this input is associated with. */\n    get rangePicker() {\n        return this._rangePicker;\n    }\n    set rangePicker(rangePicker) {\n        if (rangePicker) {\n            this._model = rangePicker.registerInput(this);\n            this._rangePicker = rangePicker;\n            this._closedSubscription.unsubscribe();\n            this._closedSubscription = rangePicker.closedStream.subscribe(() => {\n                var _a, _b;\n                (_a = this._startInput) === null || _a === void 0 ? void 0 : _a._onTouched();\n                (_b = this._endInput) === null || _b === void 0 ? void 0 : _b._onTouched();\n            });\n            this._registerModel(this._model);\n        }\n    }\n    /** Whether the input is required. */\n    get required() {\n        return !!this._required;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Function that can be used to filter out dates within the date range picker. */\n    get dateFilter() {\n        return this._dateFilter;\n    }\n    set dateFilter(value) {\n        const start = this._startInput;\n        const end = this._endInput;\n        const wasMatchingStart = start && start._matchesFilter(start.value);\n        const wasMatchingEnd = end && end._matchesFilter(start.value);\n        this._dateFilter = value;\n        if (start && start._matchesFilter(start.value) !== wasMatchingStart) {\n            start._validatorOnChange();\n        }\n        if (end && end._matchesFilter(end.value) !== wasMatchingEnd) {\n            end._validatorOnChange();\n        }\n    }\n    /** The minimum valid date. */\n    get min() {\n        return this._min;\n    }\n    set min(value) {\n        const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n        if (!this._dateAdapter.sameDate(validValue, this._min)) {\n            this._min = validValue;\n            this._revalidate();\n        }\n    }\n    /** The maximum valid date. */\n    get max() {\n        return this._max;\n    }\n    set max(value) {\n        const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n        if (!this._dateAdapter.sameDate(validValue, this._max)) {\n            this._max = validValue;\n            this._revalidate();\n        }\n    }\n    /** Whether the input is disabled. */\n    get disabled() {\n        return this._startInput && this._endInput\n            ? this._startInput.disabled && this._endInput.disabled\n            : this._groupDisabled;\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._groupDisabled) {\n            this._groupDisabled = newValue;\n            this.stateChanges.next(undefined);\n        }\n    }\n    /** Whether the input is in an error state. */\n    get errorState() {\n        if (this._startInput && this._endInput) {\n            return this._startInput.errorState || this._endInput.errorState;\n        }\n        return false;\n    }\n    /** Whether the datepicker input is empty. */\n    get empty() {\n        const startEmpty = this._startInput ? this._startInput.isEmpty() : false;\n        const endEmpty = this._endInput ? this._endInput.isEmpty() : false;\n        return startEmpty && endEmpty;\n    }\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedBy = ids.length ? ids.join(' ') : null;\n    }\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    onContainerClick() {\n        if (!this.focused && !this.disabled) {\n            if (!this._model || !this._model.selection.start) {\n                this._startInput.focus();\n            }\n            else {\n                this._endInput.focus();\n            }\n        }\n    }\n    ngAfterContentInit() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._startInput) {\n                throw Error('mat-date-range-input must contain a matStartDate input');\n            }\n            if (!this._endInput) {\n                throw Error('mat-date-range-input must contain a matEndDate input');\n            }\n        }\n        if (this._model) {\n            this._registerModel(this._model);\n        }\n        // We don't need to unsubscribe from this, because we\n        // know that the input streams will be completed on destroy.\n        merge(this._startInput.stateChanges, this._endInput.stateChanges).subscribe(() => {\n            this.stateChanges.next(undefined);\n        });\n    }\n    ngOnChanges(changes) {\n        if (dateInputsHaveChanged(changes, this._dateAdapter)) {\n            this.stateChanges.next(undefined);\n        }\n    }\n    ngOnDestroy() {\n        this._closedSubscription.unsubscribe();\n        this.stateChanges.complete();\n    }\n    /** Gets the date at which the calendar should start. */\n    getStartValue() {\n        return this.value ? this.value.start : null;\n    }\n    /** Gets the input's theme palette. */\n    getThemePalette() {\n        return this._formField ? this._formField.color : undefined;\n    }\n    /** Gets the element to which the calendar overlay should be attached. */\n    getConnectedOverlayOrigin() {\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n    }\n    /** Gets the ID of an element that should be used a description for the calendar overlay. */\n    getOverlayLabelId() {\n        return this._formField ? this._formField.getLabelId() : null;\n    }\n    /** Gets the value that is used to mirror the state input. */\n    _getInputMirrorValue() {\n        return this._startInput ? this._startInput.getMirrorValue() : '';\n    }\n    /** Whether the input placeholders should be hidden. */\n    _shouldHidePlaceholders() {\n        return this._startInput ? !this._startInput.isEmpty() : false;\n    }\n    /** Handles the value in one of the child inputs changing. */\n    _handleChildValueChange() {\n        this.stateChanges.next(undefined);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Opens the date range picker associated with the input. */\n    _openDatepicker() {\n        if (this._rangePicker) {\n            this._rangePicker.open();\n        }\n    }\n    /** Whether the separate text should be hidden. */\n    _shouldHideSeparator() {\n        return ((!this._formField ||\n            (this._formField.getLabelId() && !this._formField._shouldLabelFloat())) &&\n            this.empty);\n    }\n    /** Gets the value for the `aria-labelledby` attribute of the inputs. */\n    _getAriaLabelledby() {\n        const formField = this._formField;\n        return formField && formField._hasFloatingLabel() ? formField._labelId : null;\n    }\n    /** Updates the focused state of the range input. */\n    _updateFocus(origin) {\n        this.focused = origin !== null;\n        this.stateChanges.next();\n    }\n    /** Re-runs the validators on the start/end inputs. */\n    _revalidate() {\n        if (this._startInput) {\n            this._startInput._validatorOnChange();\n        }\n        if (this._endInput) {\n            this._endInput._validatorOnChange();\n        }\n    }\n    /** Registers the current date selection model with the start/end inputs. */\n    _registerModel(model) {\n        if (this._startInput) {\n            this._startInput._registerModel(model);\n        }\n        if (this._endInput) {\n            this._endInput._registerModel(model);\n        }\n    }\n}\nMatDateRangeInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDateRangeInput, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i2$2.ControlContainer, optional: true, self: true }, { token: i1$1.DateAdapter, optional: true }, { token: MAT_FORM_FIELD, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatDateRangeInput.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDateRangeInput, selector: \"mat-date-range-input\", inputs: { rangePicker: \"rangePicker\", required: \"required\", dateFilter: \"dateFilter\", min: \"min\", max: \"max\", disabled: \"disabled\", separator: \"separator\", comparisonStart: \"comparisonStart\", comparisonEnd: \"comparisonEnd\" }, host: { attributes: { \"role\": \"group\" }, properties: { \"class.mat-date-range-input-hide-placeholders\": \"_shouldHidePlaceholders()\", \"class.mat-date-range-input-required\": \"required\", \"attr.id\": \"null\", \"attr.aria-labelledby\": \"_getAriaLabelledby()\", \"attr.aria-describedby\": \"_ariaDescribedBy\", \"attr.data-mat-calendar\": \"rangePicker ? rangePicker.id : null\" }, classAttribute: \"mat-date-range-input\" }, providers: [\n        { provide: MatFormFieldControl, useExisting: MatDateRangeInput },\n        { provide: MAT_DATE_RANGE_INPUT_PARENT, useExisting: MatDateRangeInput },\n    ], queries: [{ propertyName: \"_startInput\", first: true, predicate: MatStartDate, descendants: true }, { propertyName: \"_endInput\", first: true, predicate: MatEndDate, descendants: true }], exportAs: [\"matDateRangeInput\"], usesOnChanges: true, ngImport: i0, template: \"<div\\n  class=\\\"mat-date-range-input-container\\\"\\n  cdkMonitorSubtreeFocus\\n  (cdkFocusChange)=\\\"_updateFocus($event)\\\">\\n  <div class=\\\"mat-date-range-input-start-wrapper\\\">\\n    <ng-content select=\\\"input[matStartDate]\\\"></ng-content>\\n    <span\\n      class=\\\"mat-date-range-input-mirror\\\"\\n      aria-hidden=\\\"true\\\">{{_getInputMirrorValue()}}</span>\\n  </div>\\n\\n  <span\\n    class=\\\"mat-date-range-input-separator\\\"\\n    [class.mat-date-range-input-separator-hidden]=\\\"_shouldHideSeparator()\\\">{{separator}}</span>\\n\\n  <div class=\\\"mat-date-range-input-end-wrapper\\\">\\n    <ng-content select=\\\"input[matEndDate]\\\"></ng-content>\\n  </div>\\n</div>\\n\\n\", styles: [\".mat-date-range-input{display:block;width:100%}.mat-date-range-input-container{display:flex;align-items:center}.mat-date-range-input-separator{transition:opacity 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);margin:0 4px}.mat-date-range-input-separator-hidden{-webkit-user-select:none;user-select:none;opacity:0;transition:none}.mat-date-range-input-inner{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;vertical-align:bottom;text-align:inherit;-webkit-appearance:none;width:100%}.mat-date-range-input-inner:-moz-ui-invalid{box-shadow:none}.mat-date-range-input-inner::placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-moz-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-webkit-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner:-ms-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{-webkit-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.cdk-high-contrast-active .mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{-webkit-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.cdk-high-contrast-active .mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{-webkit-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.cdk-high-contrast-active .mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{-webkit-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.cdk-high-contrast-active .mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{opacity:0}.mat-date-range-input-mirror{-webkit-user-select:none;user-select:none;visibility:hidden;white-space:nowrap;display:inline-block;min-width:2px}.mat-date-range-input-start-wrapper{position:relative;overflow:hidden;max-width:calc(50% - 4px)}.mat-date-range-input-start-wrapper .mat-date-range-input-inner{position:absolute;top:0;left:0}.mat-date-range-input-end-wrapper{flex-grow:1;max-width:calc(50% - 4px)}.mat-form-field-type-mat-date-range-input .mat-form-field-infix{width:200px}\\n\"], directives: [{ type: i8.CdkMonitorFocus, selector: \"[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]\", outputs: [\"cdkFocusChange\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDateRangeInput, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-date-range-input', exportAs: 'matDateRangeInput', host: {\n                        'class': 'mat-date-range-input',\n                        '[class.mat-date-range-input-hide-placeholders]': '_shouldHidePlaceholders()',\n                        '[class.mat-date-range-input-required]': 'required',\n                        '[attr.id]': 'null',\n                        'role': 'group',\n                        '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                        '[attr.aria-describedby]': '_ariaDescribedBy',\n                        // Used by the test harness to tie this input to its calendar. We can't depend on\n                        // `aria-owns` for this, because it's only defined while the calendar is open.\n                        '[attr.data-mat-calendar]': 'rangePicker ? rangePicker.id : null',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        { provide: MatFormFieldControl, useExisting: MatDateRangeInput },\n                        { provide: MAT_DATE_RANGE_INPUT_PARENT, useExisting: MatDateRangeInput },\n                    ], template: \"<div\\n  class=\\\"mat-date-range-input-container\\\"\\n  cdkMonitorSubtreeFocus\\n  (cdkFocusChange)=\\\"_updateFocus($event)\\\">\\n  <div class=\\\"mat-date-range-input-start-wrapper\\\">\\n    <ng-content select=\\\"input[matStartDate]\\\"></ng-content>\\n    <span\\n      class=\\\"mat-date-range-input-mirror\\\"\\n      aria-hidden=\\\"true\\\">{{_getInputMirrorValue()}}</span>\\n  </div>\\n\\n  <span\\n    class=\\\"mat-date-range-input-separator\\\"\\n    [class.mat-date-range-input-separator-hidden]=\\\"_shouldHideSeparator()\\\">{{separator}}</span>\\n\\n  <div class=\\\"mat-date-range-input-end-wrapper\\\">\\n    <ng-content select=\\\"input[matEndDate]\\\"></ng-content>\\n  </div>\\n</div>\\n\\n\", styles: [\".mat-date-range-input{display:block;width:100%}.mat-date-range-input-container{display:flex;align-items:center}.mat-date-range-input-separator{transition:opacity 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);margin:0 4px}.mat-date-range-input-separator-hidden{-webkit-user-select:none;user-select:none;opacity:0;transition:none}.mat-date-range-input-inner{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;vertical-align:bottom;text-align:inherit;-webkit-appearance:none;width:100%}.mat-date-range-input-inner:-moz-ui-invalid{box-shadow:none}.mat-date-range-input-inner::placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-moz-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-webkit-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner:-ms-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{-webkit-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.cdk-high-contrast-active .mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{-webkit-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.cdk-high-contrast-active .mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{-webkit-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.cdk-high-contrast-active .mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{opacity:0}.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{-webkit-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.cdk-high-contrast-active .mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.cdk-high-contrast-active .mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{opacity:0}.mat-date-range-input-mirror{-webkit-user-select:none;user-select:none;visibility:hidden;white-space:nowrap;display:inline-block;min-width:2px}.mat-date-range-input-start-wrapper{position:relative;overflow:hidden;max-width:calc(50% - 4px)}.mat-date-range-input-start-wrapper .mat-date-range-input-inner{position:absolute;top:0;left:0}.mat-date-range-input-end-wrapper{flex-grow:1;max-width:calc(50% - 4px)}.mat-form-field-type-mat-date-range-input .mat-form-field-infix{width:200px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i2$2.ControlContainer, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }] }, { type: i1$1.DateAdapter, decorators: [{\n                        type: Optional\n                    }] }, { type: i2$1.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD]\n                    }] }];\n    }, propDecorators: { rangePicker: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], dateFilter: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], separator: [{\n                type: Input\n            }], comparisonStart: [{\n                type: Input\n            }], comparisonEnd: [{\n                type: Input\n            }], _startInput: [{\n                type: ContentChild,\n                args: [MatStartDate]\n            }], _endInput: [{\n                type: ContentChild,\n                args: [MatEndDate]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDateRangePicker\"). We can change this to a\n// directive if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the date range picker popup/dialog. */\nclass MatDateRangePicker extends MatDatepickerBase {\n    _forwardContentValues(instance) {\n        super._forwardContentValues(instance);\n        const input = this.datepickerInput;\n        if (input) {\n            instance.comparisonStart = input.comparisonStart;\n            instance.comparisonEnd = input.comparisonEnd;\n        }\n    }\n}\nMatDateRangePicker.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDateRangePicker, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatDateRangePicker.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDateRangePicker, selector: \"mat-date-range-picker\", providers: [\n        MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER,\n        MAT_CALENDAR_RANGE_STRATEGY_PROVIDER,\n        { provide: MatDatepickerBase, useExisting: MatDateRangePicker },\n    ], exportAs: [\"matDateRangePicker\"], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDateRangePicker, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-date-range-picker',\n                    template: '',\n                    exportAs: 'matDateRangePicker',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER,\n                        MAT_CALENDAR_RANGE_STRATEGY_PROVIDER,\n                        { provide: MatDatepickerBase, useExisting: MatDateRangePicker },\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Button that will close the datepicker and assign the current selection to the data model. */\nclass MatDatepickerApply {\n    constructor(_datepicker) {\n        this._datepicker = _datepicker;\n    }\n    _applySelection() {\n        this._datepicker._applyPendingSelection();\n        this._datepicker.close();\n    }\n}\nMatDatepickerApply.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerApply, deps: [{ token: MatDatepickerBase }], target: i0.ɵɵFactoryTarget.Directive });\nMatDatepickerApply.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDatepickerApply, selector: \"[matDatepickerApply], [matDateRangePickerApply]\", host: { listeners: { \"click\": \"_applySelection()\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerApply, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matDatepickerApply], [matDateRangePickerApply]',\n                    host: { '(click)': '_applySelection()' },\n                }]\n        }], ctorParameters: function () { return [{ type: MatDatepickerBase }]; } });\n/** Button that will close the datepicker and discard the current selection. */\nclass MatDatepickerCancel {\n    constructor(_datepicker) {\n        this._datepicker = _datepicker;\n    }\n}\nMatDatepickerCancel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerCancel, deps: [{ token: MatDatepickerBase }], target: i0.ɵɵFactoryTarget.Directive });\nMatDatepickerCancel.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDatepickerCancel, selector: \"[matDatepickerCancel], [matDateRangePickerCancel]\", host: { listeners: { \"click\": \"_datepicker.close()\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerCancel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matDatepickerCancel], [matDateRangePickerCancel]',\n                    host: { '(click)': '_datepicker.close()' },\n                }]\n        }], ctorParameters: function () { return [{ type: MatDatepickerBase }]; } });\n/**\n * Container that can be used to project a row of action buttons\n * to the bottom of a datepicker or date range picker.\n */\nclass MatDatepickerActions {\n    constructor(_datepicker, _viewContainerRef) {\n        this._datepicker = _datepicker;\n        this._viewContainerRef = _viewContainerRef;\n    }\n    ngAfterViewInit() {\n        this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        this._datepicker.registerActions(this._portal);\n    }\n    ngOnDestroy() {\n        var _a;\n        this._datepicker.removeActions(this._portal);\n        // Needs to be null checked since we initialize it in `ngAfterViewInit`.\n        if (this._portal && this._portal.isAttached) {\n            (_a = this._portal) === null || _a === void 0 ? void 0 : _a.detach();\n        }\n    }\n}\nMatDatepickerActions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerActions, deps: [{ token: MatDatepickerBase }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });\nMatDatepickerActions.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDatepickerActions, selector: \"mat-datepicker-actions, mat-date-range-picker-actions\", viewQueries: [{ propertyName: \"_template\", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0, template: `\n    <ng-template>\n      <div class=\"mat-datepicker-actions\">\n        <ng-content></ng-content>\n      </div>\n    </ng-template>\n  `, isInline: true, styles: [\".mat-datepicker-actions{display:flex;justify-content:flex-end;align-items:center;padding:0 8px 8px 8px}.mat-datepicker-actions .mat-button-base+.mat-button-base{margin-left:8px}[dir=rtl] .mat-datepicker-actions .mat-button-base+.mat-button-base{margin-left:0;margin-right:8px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerActions, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-datepicker-actions, mat-date-range-picker-actions', template: `\n    <ng-template>\n      <div class=\"mat-datepicker-actions\">\n        <ng-content></ng-content>\n      </div>\n    </ng-template>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".mat-datepicker-actions{display:flex;justify-content:flex-end;align-items:center;padding:0 8px 8px 8px}.mat-datepicker-actions .mat-button-base+.mat-button-base{margin-left:8px}[dir=rtl] .mat-datepicker-actions .mat-button-base+.mat-button-base{margin-left:0;margin-right:8px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: MatDatepickerBase }, { type: i0.ViewContainerRef }]; }, propDecorators: { _template: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDatepickerModule {\n}\nMatDatepickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatDatepickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerModule, declarations: [MatCalendar,\n        MatCalendarBody,\n        MatDatepicker,\n        MatDatepickerContent,\n        MatDatepickerInput,\n        MatDatepickerToggle,\n        MatDatepickerToggleIcon,\n        MatMonthView,\n        MatYearView,\n        MatMultiYearView,\n        MatCalendarHeader,\n        MatDateRangeInput,\n        MatStartDate,\n        MatEndDate,\n        MatDateRangePicker,\n        MatDatepickerActions,\n        MatDatepickerCancel,\n        MatDatepickerApply], imports: [CommonModule,\n        MatButtonModule,\n        OverlayModule,\n        A11yModule,\n        PortalModule,\n        MatCommonModule], exports: [CdkScrollableModule,\n        MatCalendar,\n        MatCalendarBody,\n        MatDatepicker,\n        MatDatepickerContent,\n        MatDatepickerInput,\n        MatDatepickerToggle,\n        MatDatepickerToggleIcon,\n        MatMonthView,\n        MatYearView,\n        MatMultiYearView,\n        MatCalendarHeader,\n        MatDateRangeInput,\n        MatStartDate,\n        MatEndDate,\n        MatDateRangePicker,\n        MatDatepickerActions,\n        MatDatepickerCancel,\n        MatDatepickerApply] });\nMatDatepickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerModule, providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            CommonModule,\n            MatButtonModule,\n            OverlayModule,\n            A11yModule,\n            PortalModule,\n            MatCommonModule,\n        ], CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDatepickerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        MatButtonModule,\n                        OverlayModule,\n                        A11yModule,\n                        PortalModule,\n                        MatCommonModule,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCalendar,\n                        MatCalendarBody,\n                        MatDatepicker,\n                        MatDatepickerContent,\n                        MatDatepickerInput,\n                        MatDatepickerToggle,\n                        MatDatepickerToggleIcon,\n                        MatMonthView,\n                        MatYearView,\n                        MatMultiYearView,\n                        MatCalendarHeader,\n                        MatDateRangeInput,\n                        MatStartDate,\n                        MatEndDate,\n                        MatDateRangePicker,\n                        MatDatepickerActions,\n                        MatDatepickerCancel,\n                        MatDatepickerApply,\n                    ],\n                    declarations: [\n                        MatCalendar,\n                        MatCalendarBody,\n                        MatDatepicker,\n                        MatDatepickerContent,\n                        MatDatepickerInput,\n                        MatDatepickerToggle,\n                        MatDatepickerToggleIcon,\n                        MatMonthView,\n                        MatYearView,\n                        MatMultiYearView,\n                        MatCalendarHeader,\n                        MatDateRangeInput,\n                        MatStartDate,\n                        MatEndDate,\n                        MatDateRangePicker,\n                        MatDatepickerActions,\n                        MatDatepickerCancel,\n                        MatDatepickerApply,\n                    ],\n                    providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DateRange, DefaultMatCalendarRangeStrategy, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_DATEPICKER_VALIDATORS, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATE_RANGE_SELECTION_STRATEGY, MAT_RANGE_DATE_SELECTION_MODEL_FACTORY, MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER, MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY, MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, MatCalendar, MatCalendarBody, MatCalendarCell, MatCalendarHeader, MatDateRangeInput, MatDateRangePicker, MatDateSelectionModel, MatDatepicker, MatDatepickerActions, MatDatepickerApply, MatDatepickerCancel, MatDatepickerContent, MatDatepickerInput, MatDatepickerInputEvent, MatDatepickerIntl, MatDatepickerModule, MatDatepickerToggle, MatDatepickerToggleIcon, MatEndDate, MatMonthView, MatMultiYearView, MatRangeDateSelectionModel, MatSingleDateSelectionModel, MatStartDate, MatYearView, matDatepickerAnimations, yearsPerPage, yearsPerRow };\n","import { Subject } from 'rxjs';\n\nimport { OverlayRef } from '@angular/cdk/overlay';\n\nimport { TemplateRef, Type } from '@angular/core';\n\nexport interface AsDialogCloseEvent<R> {\n  type: 'backdropClick' | 'close';\n  data: R;\n}\n\n// R = Response Data Type, T = Data passed to Modal Type\nexport class AsDialogRef<R = any, T = any> {\n  afterClosed$ = new Subject<AsDialogCloseEvent<R>>();\n\n  constructor(\n    public overlay: OverlayRef,\n    public content: string | TemplateRef<any> | Type<any>,\n    public data: T // pass data to modal i.e. FormData\n  ) {\n    overlay.backdropClick().subscribe(() => this._close('backdropClick', null));\n  }\n\n  close(data?: R): void {\n    this._close('close', data);\n  }\n\n  private _close(type: 'backdropClick' | 'close', data: R): void {\n    this.overlay.backdropElement.classList.remove('show');\n    this.overlay.dispose();\n\n    this.afterClosed$.next({\n      type,\n      data\n    });\n\n    this.afterClosed$.complete();\n  }\n}\n","<div class=\"modal-dialog modal-dialog-centered\">\n  <div class=\"modal-content\">\n    <ng-container [ngSwitch]=\"contentType\">\n      <ng-container *ngSwitchCase=\"'string'\">\n        <div class=\"box\">\n          <div [innerHTML]=\"content\"></div>\n        </div>\n      </ng-container>\n\n      <ng-container *ngSwitchCase=\"'template'\">\n        <ng-container *ngTemplateOutlet=\"content; context: context\"></ng-container>\n      </ng-container>\n\n      <ng-container *ngSwitchCase=\"'component'\">\n        <ng-container *ngComponentOutlet=\"content\"></ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n","import { Component, OnInit, TemplateRef, Type } from '@angular/core';\nimport { AsDialogRef } from './dialog-ref';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'as-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: ['./dialog.component.scss']\n})\nexport class AsDialogComponent implements OnInit {\n  contentType: 'template' | 'string' | 'component';\n  content: string | TemplateRef<any> | Type<any>;\n  context;\n\n  constructor(private ref: AsDialogRef) {}\n\n  close(): void {\n    this.ref.close(null);\n  }\n\n  ngOnInit(): void {\n    this.content = this.ref.content;\n\n    if (typeof this.content === 'string') {\n      this.contentType = 'string';\n    } else if (this.content instanceof TemplateRef) {\n      this.contentType = 'template';\n      this.context = {\n        close: this.ref.close.bind(this.ref)\n      };\n    } else {\n      this.contentType = 'component';\n    }\n  }\n}\n","import { Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Injectable, Injector, TemplateRef, Type } from '@angular/core';\nimport { AsDialogRef } from './dialog-ref';\nimport { AsDialogComponent } from './dialog.component';\n\n@Injectable()\nexport class AsDialog {\n  constructor(private overlay: Overlay, private injector: Injector) {}\n\n  open<R = any, T = any>(content: string | TemplateRef<any> | Type<any>, data: T): AsDialogRef<R> {\n    const configs = new OverlayConfig({\n      hasBackdrop: true,\n      panelClass: ['modal', 'modal-dialog-scrollable', 'fade', 'justify-content-center'],\n      backdropClass: ['modal-backdrop', 'show']\n    });\n\n    const overlayRef = this.overlay.create(configs);\n\n    const dialogRef = new AsDialogRef<R, T>(overlayRef, content, data);\n\n    const injector = this.createInjector(dialogRef, this.injector);\n    const componentRef = overlayRef.attach(new ComponentPortal(AsDialogComponent, null, injector));\n\n    setTimeout(() => {\n      componentRef.location.nativeElement.parentElement.classList.add('show');\n    }, 0);\n\n    return dialogRef;\n  }\n\n  createInjector(ref: AsDialogRef, inj: Injector): Injector {\n    return Injector.create({\n      parent: inj,\n      providers: [\n        {\n          provide: AsDialogRef,\n          useValue: ref\n        }\n      ]\n    });\n  }\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AsDialog } from './dialog';\nimport { AsDialogComponent } from './dialog.component';\n\n@NgModule({\n  declarations: [AsDialogComponent],\n  imports: [CommonModule, OverlayModule],\n  providers: [AsDialog],\n  exports: [OverlayModule]\n})\nexport class AsDialogModule {}\n","import { NgModule } from '@angular/core';\nimport { AsDialogModule } from './ui/dialog';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: [AsDialogModule]\n})\nexport class SharedModule {}\n","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","export enum SWIPE_DIRECTION {\n  INITIAL = 0,\n  LEFT = 1,\n  RIGHT = -1\n}\n","export function getTranslate(item: HTMLElement): number | number[] | undefined {\n  const transArr = [];\n  if (!window.getComputedStyle) {\n    return;\n  }\n  const style = window.getComputedStyle(item);\n  const transform = style.transform;\n  let mat = transform.match(/^matrix3d\\((.+)\\)$/);\n  if (mat) {\n    return parseFloat(mat[1].split(', ')[13]);\n  }\n  mat = transform.match(/^matrix\\((.+)\\)$/);\n  mat ? transArr.push(parseInt(mat[1].split(', ')[4], 10)) : transArr.push(0);\n  mat ? transArr.push(parseInt(mat[1].split(', ')[5], 10)) : transArr.push(0);\n\n  return transArr;\n}\n","export function getMatrix(element: HTMLElement): { x: number; y: number; z: number } {\n  const values = element.style.transform.split(/\\w+\\(|\\);?/);\n  const transform = values[1].split(/,\\s?/g).map(parseInt);\n\n  return {\n    x: transform[0],\n    y: transform[1],\n    z: transform[2]\n  };\n}\n","import {\r\n  AfterViewInit,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n  QueryList\r\n} from '@angular/core';\r\n\r\nimport {\r\n  animationFrameScheduler,\r\n  asyncScheduler,\r\n  fromEvent,\r\n  Subject\r\n} from 'rxjs';\r\nimport {\r\n  filter,\r\n  map,\r\n  observeOn,\r\n  switchMap,\r\n  take,\r\n  takeUntil,\r\n  tap\r\n} from 'rxjs/operators';\r\n\r\nimport { SWIPE_DIRECTION } from './constant';\r\nimport {\r\n  getMatrix,\r\n  getTranslate\r\n} from './util';\r\n\r\n@Directive({\r\n  selector: '[appCalendarSlideContainer]'\r\n})\r\nexport class CalendarSlideContainerDirective implements AfterViewInit, OnDestroy {\r\n  @Output() swipeChange = new EventEmitter<{ direction: SWIPE_DIRECTION; selectedDate?: Date }>();\r\n\r\n  @ContentChildren('calendarSlide')\r\n  slideList: QueryList<ElementRef>;\r\n\r\n  @HostBinding('style.transform') transform = 'translate3d(0px, 0px, 0px)';\r\n\r\n  private destroy$ = new Subject<any>();\r\n\r\n  constructor(public el: ElementRef, private zone: NgZone) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    for (const { elm, index } of this.slideList.map((el, i) => ({ elm: el.nativeElement as HTMLElement, index: i }))) {\r\n      const translate = getTranslate(elm);\r\n\r\n      if (!(translate instanceof Array)) {\r\n        continue;\r\n      }\r\n\r\n      elm.style.transform = `translateX(${(index - 1) * 100}%)`;\r\n      elm.style.width = '100%';\r\n    }\r\n\r\n    this.zone.runOutsideAngular(() => {\r\n      this.handleDrag();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  handleDrag(): void {\r\n    const element = this.el.nativeElement as HTMLElement;\r\n    const hammerPan = new Hammer(element);\r\n    hammerPan.get('pan').set({ direction: Hammer.DIRECTION_HORIZONTAL });\r\n\r\n    const pan$ = fromEvent<HammerInput>(hammerPan, 'panstart panmove panend');\r\n\r\n    const panStart$ = pan$.pipe(filter((e: HammerInput) => e.type === 'panstart'));\r\n    const panMove$ = pan$.pipe(\r\n      filter((e: HammerInput) => e.type === 'panmove'),\r\n      observeOn(animationFrameScheduler)\r\n    );\r\n    const panEnd$ = pan$.pipe(filter((e: HammerInput) => e.type === 'panend'));\r\n\r\n    panStart$\r\n      .pipe(\r\n        map(() => getMatrix(element)),\r\n        switchMap(({ x: startX }) => {\r\n          return panMove$.pipe(\r\n            tap(({ deltaX, distance }) => {\r\n              element.style.transform = `translate3d(${startX + (deltaX < 0 ? -distance : distance)}px, 0px, 0px)`;\r\n            }),\r\n            takeUntil(\r\n              panEnd$.pipe(\r\n                observeOn(asyncScheduler),\r\n                take(1),\r\n                map(({ deltaX, distance }) => {\r\n                  if (deltaX !== 0 && distance > element.offsetWidth * 0.33) {\r\n                    return deltaX > 0 ? SWIPE_DIRECTION.RIGHT : SWIPE_DIRECTION.LEFT;\r\n                  }\r\n                  return SWIPE_DIRECTION.INITIAL;\r\n                }),\r\n                tap((direction) => {\r\n                  this.onSwipeChange(direction, element, startX);\r\n                })\r\n              )\r\n            )\r\n          );\r\n        }),\r\n        takeUntil(this.destroy$)\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  public onSwipeChange(\r\n    direction: SWIPE_DIRECTION,\r\n    element: HTMLElement,\r\n    startX: number,\r\n    selectedDate: Date = null\r\n  ): void {\r\n    element.style.transition = `transform ${direction !== SWIPE_DIRECTION.INITIAL ? 500 : 400}ms ease-in-out`;\r\n    element.style.transform = `translate3d(${startX + direction * -element.offsetWidth}px, 0px, 0px)`;\r\n\r\n    if (direction !== SWIPE_DIRECTION.INITIAL) {\r\n      setTimeout(() => {\r\n        element.style.transition = '';\r\n        this.noticeSwipeChange(direction, selectedDate);\r\n      }, 600);\r\n      return;\r\n    }\r\n\r\n    setTimeout(() => {\r\n      element.style.transition = '';\r\n    }, 500);\r\n\r\n    this.noticeSwipeChange(direction, selectedDate);\r\n  }\r\n\r\n  private noticeSwipeChange(direction: SWIPE_DIRECTION, selectedDate: Date = null): void {\r\n    this.zone.run(() => {\r\n      this.swipeChange.emit({ direction, selectedDate });\r\n    });\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\nimport { Job } from '@attendance-system/data/models';\nimport { AsDialogRef } from '@attendance-system/shared/ui/dialog';\n\n@Component({\n  selector: 'app-event-detail-dialog',\n  templateUrl: './event-detail-dialog.component.html',\n  styleUrls: ['./event-detail-dialog.component.scss']\n})\nexport class EventDetailDialogComponent {\n  constructor(public ref: AsDialogRef<any, Job>) {}\n\n  get job(): Job {\n    return this.ref.data;\n  }\n}\n","<div class=\"modal-header\">\n  <h5 class=\"modal-title\" id=\"exampleModalLiveLabel\">{{ job.Title }}</h5>\n  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" (click)=\"ref.close()\">\n    <span aria-hidden=\"true\">×</span>\n  </button>\n</div>\n<div class=\"modal-body\">\n  <p>負責工程師：{{ job.Worker }}</p>\n  <p>儀器編號：{{ job.EQ_ID }}</p>\n  <p>客戶名稱：{{ job.CustomerName }}</p>\n  <p>所在廠區：{{ job.Unit_Name }}</p>\n  <p>聯絡人：{{ job.ContactName }}</p>\n  <p>\n    電話：<a href=\"tel:{{ job.Contact_Content }}\">{{ job.Contact_Content }}</a>\n  </p>\n  <p>\n    地址：<a href=\"https://www.google.com/maps/search/{{ job.Address }}\" target=\"_blank\">{{ job.Address }}</a>\n  </p>\n  <p>派工日：{{ job.PlanDate }}</p>\n  <p>型號：{{ job.EQ_Model }}</p>\n  <p>序號：{{ job.Serial }}</p>\n  <p>保固日期：{{ job.WarrantyDate }}</p>\n  <p>合約類型：{{ job.ContractType }}</p>\n  <p>合約到期日：{{ job.ContractEndDate }}</p>\n  <p>出廠日：{{ job.MfeDate }}</p>\n  <p>注意事項：{{ job.NoteCustomer }}</p>\n  <p>派工原因：{{ job.Job }}</p>\n  <p>祕書交待事項：{{ job.NoteEngineer }}</p>\n  <p>備註：{{ job.Remarks }}</p>\n</div>\n<!-- <div class=\"modal-footer\">\n  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\" (click)=\"ref.close()\">關閉</button>\n</div> -->\n","<div class=\"as-calendar\">\r\n  <div class=\"as-calendar-wrapper border-bottom\">\r\n    <div class=\"as-calendar-header\">\r\n      <div class=\"as-calendar-controls\">\r\n        <div class=\"as-calendar-title-wrapper\">\r\n          <button class=\"as-calendar-button as-button as-reset\" (click)=\"picker.open()\">\r\n            <span class=\"as-calendar-title as-calendar-year\">{{ selectedDate$ | async | date: 'yyyy' }}年</span>\r\n            <span class=\"as-calendar-title as-calendar-month\"> {{ selectedDate$ | async | date: 'MMM' }} </span>\r\n          </button>\r\n\r\n          <mat-form-field class=\"d-none\" appearance=\"fill\">\r\n            <input\r\n              matInput\r\n              [matDatepicker]=\"picker\"\r\n              [ngModel]=\"selectedDate$ | async\"\r\n              (ngModelChange)=\"onSelect($event)\"\r\n            />\r\n            <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n            <mat-datepicker touchUi #picker></mat-datepicker>\r\n          </mat-form-field>\r\n        </div>\r\n        <button\r\n          class=\"as-calendar-button as-calendar-button-prev as-reset as-button as-icon-button\"\r\n          type=\"button\"\r\n          (click)=\"onPrev()\"\r\n        >\r\n          <span class=\"as-button-icon as-icon\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\r\n              <path\r\n                d=\"M217.9 256L345 129c9.4-9.4 9.4-24.6 0-33.9-9.4-9.4-24.6-9.3-34 0L167 239c-9.1 9.1-9.3 23.7-.7 33.1L310.9 417c4.7 4.7 10.9 7 17 7s12.3-2.3 17-7c9.4-9.4 9.4-24.6 0-33.9L217.9 256z\"\r\n              ></path>\r\n            </svg>\r\n          </span>\r\n        </button>\r\n        <button\r\n          class=\"as-calendar-button as-calendar-button-today as-calendar-header-today as-reset as-button\"\r\n          type=\"button\"\r\n          (click)=\"onSelectToday()\"\r\n        >\r\n          今天\r\n        </button>\r\n        <button\r\n          class=\"as-calendar-button as-calendar-button-next as-reset as-button as-icon-button\"\r\n          type=\"button\"\r\n          (click)=\"onNext()\"\r\n        >\r\n          <span class=\"as-button-icon as-icon\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\r\n              <path\r\n                d=\"M294.1 256L167 129c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.3 34 0L345 239c9.1 9.1 9.3 23.7.7 33.1L201.1 417c-4.7 4.7-10.9 7-17 7s-12.3-2.3-17-7c-9.4-9.4-9.4-24.6 0-33.9l127-127.1z\"\r\n              ></path>\r\n            </svg>\r\n          </span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div class=\"as-calendar-body\">\r\n      <div class=\"as-calendar-body-inner\">\r\n        <div class=\"as-calendar-picker as-calendar-picker-main\">\r\n          <div class=\"as-calendar-scroll-wrapper\">\r\n            <div>\r\n              <div appCalendarSlideContainer class=\"as-calendar-slide-container\" (swipeChange)=\"onSwipeChange($event)\">\r\n                <div #calendarSlide class=\"as-calendar-slide\">\r\n                  <div class=\"as-calendar-table\">\r\n                    <div class=\"as-calendar-weekdays\">\r\n                      <div class=\"as-calendar-weekday\">日</div>\r\n                      <div class=\"as-calendar-weekday\">一</div>\r\n                      <div class=\"as-calendar-weekday\">二</div>\r\n                      <div class=\"as-calendar-weekday\">三</div>\r\n                      <div class=\"as-calendar-weekday\">四</div>\r\n                      <div class=\"as-calendar-weekday\">五</div>\r\n                      <div class=\"as-calendar-weekday\">六</div>\r\n                    </div>\r\n                    <div role=\"grid\" class=\"as-calendar-row\">\r\n                      <div\r\n                        *ngFor=\"let weekDay of prevWeekDays; trackBy: trackByFn\"\r\n                        role=\"gridcell\"\r\n                        class=\"as-calendar-cell as-calendar-day as-calendar-day-marked\"\r\n                        [class.as-selected]=\"(selectedDate$ | async).toDateString() === weekDay.dateString\"\r\n                        (click)=\"onSelect(weekDay.date)\"\r\n                      >\r\n                        <div class=\"as-calendar-cell-inner\">\r\n                          <div class=\"as-calendar-day-text\" [class.as-calendar-today]=\"weekDay.isToday\">\r\n                            {{ weekDay.day }}\r\n                          </div>\r\n                          <!-- <div>\r\n                            <div class=\"as-calendar-marks\">\r\n                              <div class=\"as-calendar-mark\"></div>\r\n                            </div>\r\n                          </div> -->\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div #calendarSlide class=\"as-calendar-slide\">\r\n                  <div class=\"as-calendar-table\">\r\n                    <div class=\"as-calendar-weekdays\">\r\n                      <div class=\"as-calendar-weekday\">日</div>\r\n                      <div class=\"as-calendar-weekday\">一</div>\r\n                      <div class=\"as-calendar-weekday\">二</div>\r\n                      <div class=\"as-calendar-weekday\">三</div>\r\n                      <div class=\"as-calendar-weekday\">四</div>\r\n                      <div class=\"as-calendar-weekday\">五</div>\r\n                      <div class=\"as-calendar-weekday\">六</div>\r\n                    </div>\r\n                    <div role=\"grid\" class=\"as-calendar-row\">\r\n                      <div\r\n                        *ngFor=\"let weekDay of currWeekDays; trackBy: trackByFn\"\r\n                        role=\"gridcell\"\r\n                        class=\"as-calendar-cell as-calendar-day as-calendar-day-marked\"\r\n                        [class.as-selected]=\"(selectedDate$ | async).toDateString() === weekDay.dateString\"\r\n                        (click)=\"onSelect(weekDay.date)\"\r\n                      >\r\n                        <div class=\"as-calendar-cell-inner\">\r\n                          <div class=\"as-calendar-day-text\" [class.as-calendar-today]=\"weekDay.isToday\">\r\n                            {{ weekDay.day }}\r\n                          </div>\r\n                          <!-- <div>\r\n                          <div class=\"as-calendar-marks\">\r\n                            <div class=\"as-calendar-mark\"></div>\r\n                          </div>\r\n                        </div> -->\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div #calendarSlide class=\"as-calendar-slide\">\r\n                  <div class=\"as-calendar-table\">\r\n                    <div class=\"as-calendar-weekdays\">\r\n                      <div class=\"as-calendar-weekday\">日</div>\r\n                      <div class=\"as-calendar-weekday\">一</div>\r\n                      <div class=\"as-calendar-weekday\">二</div>\r\n                      <div class=\"as-calendar-weekday\">三</div>\r\n                      <div class=\"as-calendar-weekday\">四</div>\r\n                      <div class=\"as-calendar-weekday\">五</div>\r\n                      <div class=\"as-calendar-weekday\">六</div>\r\n                    </div>\r\n\r\n                    <div role=\"grid\" class=\"as-calendar-row\">\r\n                      <div\r\n                        *ngFor=\"let weekDay of nextWeekDays; trackBy: trackByFn\"\r\n                        role=\"gridcell\"\r\n                        class=\"as-calendar-cell as-calendar-day as-calendar-day-marked\"\r\n                        [class.as-selected]=\"(selectedDate$ | async).toDateString() === weekDay.dateString\"\r\n                        (click)=\"onSelect(weekDay.date)\"\r\n                      >\r\n                        <div class=\"as-calendar-cell-inner\">\r\n                          <div class=\"as-calendar-day-text\" [class.as-calendar-today]=\"weekDay.isToday\">\r\n                            {{ weekDay.day }}\r\n                          </div>\r\n                          <!-- <div>\r\n                          <div class=\"as-calendar-marks\">\r\n                            <div class=\"as-calendar-mark\"></div>\r\n                          </div>\r\n                        </div> -->\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"as-scroller-bar-cont as-scroller-bar-hidden\">\r\n              <div class=\"as-scroller-bar\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"as-schedule-date-header d-flex\">\r\n    <div class=\"as-schedule-date-header-text flex-fill\">\r\n      {{ selectedDate$ | async | date: 'fullDate' }}\r\n    </div>\r\n  </div>\r\n  <div\r\n    class=\"as-calendar-events list-group flex-fill overflow-auto\"\r\n    (swipeleft)=\"onNextDay()\"\r\n    (swiperight)=\"onPrevDay()\"\r\n  >\r\n    <a\r\n      *ngFor=\"let job of selectedJobList$ | async\"\r\n      href=\"javascript:void(0)\"\r\n      class=\"list-group-item list-group-item-action px-0 py-1\"\r\n      (click)=\"openEventDetailDialog(job)\"\r\n    >\r\n      <div class=\"px-3\" style=\"border-left: 4px solid; border-left-color: var(--secondary)\">\r\n        <h5 class=\"mb-1\">{{ job.Title }}</h5>\r\n        <div class=\"d-flex w-100 justify-content-between align-items-center\">\r\n          <div>\r\n            <p class=\"mb-1\">{{ job.Address }}</p>\r\n            <small>{{ job.PlanDate }}</small>\r\n          </div>\r\n          <img\r\n            src=\"https://www.svgrepo.com/show/152281/rocket-ship.svg\"\r\n            alt=\"大頭照\"\r\n            width=\"32\"\r\n            class=\"rounded-circle\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </a>\r\n  </div>\r\n</div>\r\n","import { formatDate } from '@angular/common';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\nimport {\r\n  addDays,\r\n  endOfWeek,\r\n  startOfWeek\r\n} from 'date-fns';\r\nimport {\r\n  BehaviorSubject,\r\n  Subject\r\n} from 'rxjs';\r\nimport {\r\n  filter,\r\n  map,\r\n  switchMap,\r\n  takeUntil\r\n} from 'rxjs/operators';\r\n\r\nimport { Job } from '@attendance-system/data/models';\r\nimport { JobService } from '@attendance-system/data/services';\r\nimport { AsDialog } from '@attendance-system/shared/ui/dialog/dialog';\r\n\r\nimport { CalendarSlideContainerDirective } from './calendar-slide-container.directive';\r\nimport { SWIPE_DIRECTION } from './constant';\r\nimport { WeekDays } from './model';\r\nimport { WeekDay } from './model/weekday';\r\nimport { EventDetailDialogComponent } from './ui/event-detail-dialog/event-detail-dialog.component';\r\nimport { getMatrix } from './util';\r\n\r\nfunction calcWeekDays(date: Date): WeekDays {\r\n  const today = new Date();\r\n  const startDate = startOfWeek(date);\r\n\r\n  return Array.from(Array(7).keys()).map((i) => {\r\n    const d = addDays(startDate, i);\r\n\r\n    return {\r\n      date: d,\r\n      year: d.getFullYear(),\r\n      month: d.getMonth(),\r\n      day: d.getDate(),\r\n      weekDay: d.getDay(),\r\n      dateString: d.toDateString(),\r\n      isToday: d.toDateString() === today.toDateString()\r\n    };\r\n  });\r\n}\r\n@Component({\r\n  selector: 'app-calendar',\r\n  templateUrl: './calendar.component.html',\r\n  styleUrls: ['./calendar.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CalendarComponent implements OnInit {\r\n  @ViewChild(CalendarSlideContainerDirective) slideContainer: CalendarSlideContainerDirective;\r\n\r\n  selectedDate$ = new BehaviorSubject<Date>(new Date());\r\n\r\n  swipeDirection$ = new BehaviorSubject<SWIPE_DIRECTION>(null);\r\n\r\n  selectedJobList$ = this.swipeDirection$.pipe(\r\n    filter((swipeDirection) => swipeDirection !== SWIPE_DIRECTION.INITIAL),\r\n    map(() => calcWeekDays(this.selectedDate$.value)),\r\n    map((weekDays) => [weekDays[0].date, weekDays.slice(-1)[0].date]),\r\n    switchMap(([startDate, endDate]) => this.jobService.getList(startDate, endDate)),\r\n    switchMap((jobList) =>\r\n      this.selectedDate$.pipe(\r\n        map((date) => formatDate(date, 'yyyy/M/d', 'en-us')),\r\n        map((planDate) => jobList.filter((job) => job.PlanDate === planDate))\r\n      )\r\n    )\r\n  );\r\n\r\n  prevWeekDays: WeekDays = calcWeekDays(addDays(this.selectedDate$.value, -7));\r\n  currWeekDays: WeekDays = calcWeekDays(this.selectedDate$.value);\r\n  nextWeekDays: WeekDays = calcWeekDays(addDays(this.selectedDate$.value, 7));\r\n\r\n  private destroy$ = new Subject<void>();\r\n\r\n  constructor(private cd: ChangeDetectorRef, private dialog: AsDialog, private jobService: JobService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.swipeDirection$\r\n      .pipe(\r\n        filter((swipeDirection) => swipeDirection !== SWIPE_DIRECTION.INITIAL),\r\n        map(() => this.selectedDate$.value),\r\n        takeUntil(this.destroy$)\r\n      )\r\n      .subscribe((date) => {\r\n        calcWeekDays(addDays(date, -7)).forEach((weekDay, i) => (this.prevWeekDays[i] = weekDay));\r\n        calcWeekDays(date).forEach((weekDay, i) => (this.currWeekDays[i] = weekDay));\r\n        calcWeekDays(addDays(date, 7)).forEach((weekDay, i) => (this.nextWeekDays[i] = weekDay));\r\n\r\n        if (this.slideContainer) {\r\n          this.slideContainer.el.nativeElement.style.transform = 'translate3d(0, 0, 0)';\r\n        }\r\n\r\n        this.cd.detectChanges();\r\n      });\r\n  }\r\n\r\n  onPrev(): void {\r\n    const element = this.slideContainer.el.nativeElement;\r\n    const { x: startX } = getMatrix(element);\r\n    this.slideContainer.onSwipeChange(SWIPE_DIRECTION.RIGHT, element, startX);\r\n  }\r\n\r\n  onNext(): void {\r\n    const element = this.slideContainer.el.nativeElement;\r\n    const { x: startX } = getMatrix(element);\r\n    this.slideContainer.onSwipeChange(SWIPE_DIRECTION.LEFT, element, startX);\r\n  }\r\n\r\n  onPrevDay(): void {\r\n    const selectedDate = this.selectedDate$.value;\r\n    const targetDate = addDays(selectedDate, -1);\r\n    this.onSelect(targetDate);\r\n  }\r\n\r\n  onNextDay(): void {\r\n    const selectedDate = this.selectedDate$.value;\r\n    const targetDate = addDays(selectedDate, 1);\r\n    this.onSelect(targetDate);\r\n  }\r\n\r\n  onSelect(selectedDate: Date): void {\r\n    if (this.slideContainer.el.nativeElement.style.transform !== 'translate3d(0px, 0px, 0px)') {\r\n      return;\r\n    }\r\n\r\n    const startDate = startOfWeek(this.selectedDate$.value);\r\n    const endDate = endOfWeek(this.selectedDate$.value);\r\n\r\n    let direction = SWIPE_DIRECTION.INITIAL;\r\n\r\n    if (selectedDate < startDate) {\r\n      direction = SWIPE_DIRECTION.RIGHT;\r\n    } else if (selectedDate > endDate) {\r\n      direction = SWIPE_DIRECTION.LEFT;\r\n    }\r\n\r\n    const element = this.slideContainer.el.nativeElement;\r\n    const { x: startX } = getMatrix(element);\r\n\r\n    this.slideContainer.onSwipeChange(direction, element, startX, selectedDate);\r\n  }\r\n\r\n  onSelectToday(): void {\r\n    this.onSelect(new Date());\r\n  }\r\n\r\n  onSwipeChange({ direction, selectedDate }: { direction: SWIPE_DIRECTION; selectedDate?: Date }): void {\r\n    if (direction === SWIPE_DIRECTION.INITIAL && !selectedDate) {\r\n      return;\r\n    }\r\n\r\n    if (selectedDate) {\r\n      this.selectedDate$.next(selectedDate);\r\n    } else {\r\n      const startDate = startOfWeek(this.selectedDate$.value);\r\n      this.selectedDate$.next(addDays(startDate, direction === SWIPE_DIRECTION.LEFT ? 7 : -7));\r\n    }\r\n\r\n    this.swipeDirection$.next(direction);\r\n  }\r\n\r\n  openEventDetailDialog(job: Job): void {\r\n    this.dialog.open(EventDetailDialogComponent, job).afterClosed$.subscribe(console.log);\r\n  }\r\n\r\n  trackByFn(index: number, el: WeekDay): string {\r\n    return el.dateString;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CalendarComponent } from './calendar.component';\n\nconst routes: Routes = [{ path: '', component: CalendarComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CalendarRoutingModule { }\n","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nexport default function endOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setDate(date.getDate() + diff);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { SharedModule } from '@attendance-system/shared/shared.module';\nimport { CalendarRoutingModule } from './calendar-routing.module';\nimport { CalendarSlideContainerDirective } from './calendar-slide-container.directive';\nimport { CalendarComponent } from './calendar.component';\nimport { EventDetailDialogComponent } from './ui/event-detail-dialog/event-detail-dialog.component';\n\nconst MAT_MODULES = [MatDatepickerModule, MatButtonModule, MatFormFieldModule, MatInputModule, MatNativeDateModule];\n\n@NgModule({\n  declarations: [CalendarComponent, CalendarSlideContainerDirective, EventDetailDialogComponent],\n  imports: [CommonModule, FormsModule, ...MAT_MODULES, SharedModule, CalendarRoutingModule]\n})\nexport class CalendarModule {}\n"],"sourceRoot":"webpack:///","file":"625.bb490d7d646541cc.js"}