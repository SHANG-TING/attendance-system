{"version":3,"mappings":"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","names":["AsDialogModule","AsDialog","imports","CommonModule","OverlayModule","SharedModule","constructor","overlay","content","data","this","Subject","backdropClick","subscribe","_close","afterClosed","afterClosed$","asObservable","close","type","backdropElement","classList","remove","dispose","next","complete","i0","AsDialogComponent","ref","ngOnInit","contentType","TemplateRef","context","$implicit","bind","selectors","injector","open","configs","OverlayConfig","hasBackdrop","panelClass","backdropClass","overlayRef","create","dialogRef","AsDialogRef","createInjector","componentRef","attach","ComponentPortal","setTimeout","location","nativeElement","parentElement","add","inj","Injector","parent","providers","provide","useValue","factory","val","isArray","parseFloat","dueTime","periodOrScheduler","scheduler","period","isNumeric","Number","isScheduler","async","Observable","subscriber","due","now","schedule","dispatch","index","state","closed","delay","source","lift","ObserveOnOperator","call","ObserveOnSubscriber","Subscriber","destination","super","arg","notification","observe","unsubscribe","scheduleMessage","ObserveOnMessage","_next","value","Notification","_error","err","_complete","animationFrameScheduler","AsyncScheduler","flush","action","active","scheduled","undefined","actions","error","count","length","shift","execute","AsyncAction","work","requestAsyncId","id","push","requestAnimationFrame","recycleAsyncId","cancelAnimationFrame","scrollBehaviorSupported","supportsScrollBehavior","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","disable","html","htmlStyle","bodyStyle","body","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","Math","abs","updatePosition","element","scrollContainers","some","containerBounds","bottom","right","scrollContainerRect","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","isElementScrolledOutsideView","ScrollStrategyOptions","noop","NoopScrollStrategy","config","CloseScrollStrategy","block","BlockScrollStrategy","reposition","RepositionScrollStrategy","ɵfac","i1","DOCUMENT","ɵprov","scrollStrategy","disposeOnNavigation","configKeys","Object","keys","key","connectionPair","scrollableViewProperties","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","event","_backdropTransitionendHandler","_disposeBackdrop","target","_keydownEvents","_outsidePointerEvents","_scrollStrategy","_positionStrategy","positionStrategy","hostElement","portal","_previousHostParent","appendChild","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","_a","isAttached","_disposeScrollStrategy","attachments","detachments","keydownEvents","outsidePointerEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","assign","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","setAttribute","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","createElement","insertBefore","addEventListener","runOutsideAngular","nextSibling","parentNode","backdropToDetach","_backdropTimeout","cssClasses","isAdd","coerceArray","filter","c","subscription","takeUntil","merge","children","backdrop","removeEventListener","clearTimeout","OverlayContainer","_platform","ngOnDestroy","_containerElement","getContainerElement","_createContainer","containerClass","isBrowser","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","i","container","i1$1","boundingBoxClass","cssUnitPattern","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","origin","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","indexOf","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","y","originX","startX","_isRtl","endX","originY","overlayStartX","overlayStartY","overlayX","n","overlayY","point","rawOverlayRect","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","o","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","ConnectedOverlayPositionChange","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","e","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","isOriginClipped","isElementClippedByScrolling","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","forEach","cssClass","ElementRef","Element","hasOwnProperty","input","units","split","clientRect","floor","wrapperClass","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","P","OverlayPositionBuilder","global","GlobalPositionStrategy","flexibleConnectedTo","FlexibleConnectedPositionStrategy","BaseOverlayDispatcher","_attachedOverlays","splice","OverlayKeyboardDispatcher","_keydownListener","overlays","_isAttached","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","slice","_addEventListeners","IOS","_cursorOriginalValue","cursor","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","OverlayRef","_appRef","get","ApplicationRef","DomPortalOutlet","i5","i6","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","InjectionToken","deps","useFactory","ɵmod","ɵinj","BidiModule","PortalModule","ScrollingModule","_attachedHost","setAttachedHost","Portal","component","viewContainerRef","componentFactoryResolver","template","templateRef","elementRef","attachDomPortal","_attachedPortal","attachComponentPortal","TemplatePortal","attachTemplatePortal","DomPortal","_invokeDisposeFn","setDisposeFn","fn","_disposeFn","BasePortalOutlet","outletElement","_defaultInjector","anchorNode","createComment","replaceChild","componentFactory","resolveComponentFactory","createComponent","destroy","attachView","hostView","viewCount","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","rootNodes","rootNode","detectChanges","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","EventEmitter","_getRootNode","attachedRef","_attachedRef","emit","clear","nodeType","ELEMENT_NODE","ɵdir","nextHandle","RESOLVED","Promise","resolve","activeHandles","handle","Immediate","setImmediate","cb","then","findAndClearHandle","clearImmediate","durationSelector","AuditSubscriber","SimpleOuterSubscriber","hasValue","throttled","duration","innerSubscription","innerSubscribe","SimpleInnerSubscriber","clearThrottle","notifyNext","notifyComplete","AuditOperator","audit","timer","ScrollDispatcher","_scrolled","_globalSubscription","_scrolledCount","Map","register","has","set","elementScrolled","deregister","scrollableReference","delete","auditTimeInMs","observer","_addGlobalListener","auditTime","_removeGlobalListener","of","_","ancestorScrolled","elementOrElementRef","ancestors","getAncestorScrollContainers","scrollingContainers","_subscription","_scrollableContainsElement","_getWindow","defaultView","coerceElement","scrollableElement","fromEvent","ViewportRuler","ngZone","_change","_changeListener","_viewportSize","_updateViewportSize","output","getViewportRect","documentRect","scrollTop","scrollY","scrollLeft","scrollX","throttleTime","innerWidth","innerHeight","CdkScrollableModule"],"sources":["./src/app/shared/ui/dialog/dialog.module.ts","./src/app/shared/shared.module.ts","./src/app/shared/ui/dialog/dialog-ref.ts","./src/app/shared/ui/dialog/dialog.component.html","./src/app/shared/ui/dialog/dialog.component.ts","./src/app/shared/ui/dialog/dialog.ts","./node_modules/rxjs/_esm2015/internal/util/isNumeric.js","./node_modules/rxjs/_esm2015/internal/observable/timer.js","./node_modules/rxjs/_esm2015/internal/operators/observeOn.js","./node_modules/rxjs/_esm2015/internal/scheduler/animationFrame.js","./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameScheduler.js","./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameAction.js","./node_modules/@angular/cdk/fesm2015/overlay.mjs","./node_modules/@angular/cdk/fesm2015/portal.mjs","./node_modules/rxjs/_esm2015/internal/util/Immediate.js","./node_modules/rxjs/_esm2015/internal/scheduler/asap.js","./node_modules/rxjs/_esm2015/internal/scheduler/AsapScheduler.js","./node_modules/rxjs/_esm2015/internal/scheduler/AsapAction.js","./node_modules/rxjs/_esm2015/internal/operators/audit.js","./node_modules/rxjs/_esm2015/internal/operators/auditTime.js","./node_modules/@angular/cdk/fesm2015/scrolling.mjs"],"sourcesContent":["import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AsDialog } from './dialog';\nimport { AsDialogComponent } from './dialog.component';\n\n@NgModule({\n  declarations: [AsDialogComponent],\n  imports: [CommonModule, OverlayModule],\n  providers: [AsDialog],\n  exports: [OverlayModule]\n})\nexport class AsDialogModule {}\n","import { NgModule } from '@angular/core';\nimport { AsDialogModule } from './ui/dialog';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: [AsDialogModule]\n})\nexport class SharedModule {}\n","import { Observable, Subject } from 'rxjs';\n\nimport { OverlayRef } from '@angular/cdk/overlay';\n\nimport { TemplateRef, Type } from '@angular/core';\n\nexport interface AsDialogCloseEvent<R> {\n  type: 'backdropClick' | 'close';\n  data: R;\n}\n\n// R = Response Data Type, T = Data passed to Modal Type\nexport class AsDialogRef<R = any, T = any> {\n  afterClosed$ = new Subject<AsDialogCloseEvent<R>>();\n\n  constructor(\n    public overlay: OverlayRef,\n    public content: string | TemplateRef<any> | Type<any>,\n    public data: T // pass data to modal i.e. FormData\n  ) {\n    overlay.backdropClick().subscribe(() => this._close('backdropClick', null));\n  }\n\n  afterClosed(): Observable<AsDialogCloseEvent<R>> {\n    return this.afterClosed$.asObservable();\n  }\n\n  close(data?: R): void {\n    this._close('close', data);\n  }\n\n  private _close(type: 'backdropClick' | 'close', data: R): void {\n    this.overlay.backdropElement.classList.remove('show');\n    this.overlay.dispose();\n\n    this.afterClosed$.next({\n      type,\n      data\n    });\n\n    this.afterClosed$.complete();\n  }\n}\n","<div class=\"modal-dialog modal-dialog-centered\">\n  <div class=\"modal-content\">\n    <ng-container [ngSwitch]=\"contentType\">\n      <ng-container *ngSwitchCase=\"'string'\">\n        <div class=\"box\">\n          <div [innerHTML]=\"content\"></div>\n        </div>\n      </ng-container>\n\n      <ng-container *ngSwitchCase=\"'template'\">\n        <ng-container *ngTemplateOutlet=\"content; context: context\"></ng-container>\n      </ng-container>\n\n      <ng-container *ngSwitchCase=\"'component'\">\n        <ng-container *ngComponentOutlet=\"content\"></ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n","import { Component, OnInit, TemplateRef, Type } from '@angular/core';\nimport { AsDialogRef } from './dialog-ref';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'as-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: ['./dialog.component.scss']\n})\nexport class AsDialogComponent implements OnInit {\n  contentType: 'template' | 'string' | 'component';\n  content: string | TemplateRef<any> | Type<any>;\n  context;\n\n  constructor(private ref: AsDialogRef) {}\n\n  close(): void {\n    this.ref.close(null);\n  }\n\n  ngOnInit(): void {\n    this.content = this.ref.content;\n\n    if (typeof this.content === 'string') {\n      this.contentType = 'string';\n    } else if (this.content instanceof TemplateRef) {\n      this.contentType = 'template';\n      this.context = {\n        $implicit: this.ref.data,\n        close: this.ref.close.bind(this.ref)\n      };\n    } else {\n      this.contentType = 'component';\n    }\n  }\n}\n","import { Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Injectable, Injector, TemplateRef, Type } from '@angular/core';\nimport { AsDialogRef } from './dialog-ref';\nimport { AsDialogComponent } from './dialog.component';\n\n@Injectable()\nexport class AsDialog {\n  constructor(private overlay: Overlay, private injector: Injector) {}\n\n  open<R = any, T = any>(content: string | TemplateRef<any> | Type<any>, data: T): AsDialogRef<R> {\n    const configs = new OverlayConfig({\n      hasBackdrop: true,\n      panelClass: ['modal', 'modal-dialog-scrollable', 'fade', 'justify-content-center'],\n      backdropClass: ['modal-backdrop', 'show']\n    });\n\n    const overlayRef = this.overlay.create(configs);\n\n    const dialogRef = new AsDialogRef<R, T>(overlayRef, content, data);\n\n    const injector = this.createInjector(dialogRef, this.injector);\n    const componentRef = overlayRef.attach(new ComponentPortal(AsDialogComponent, null, injector));\n\n    setTimeout(() => {\n      componentRef.location.nativeElement.parentElement.classList.add('show');\n    }, 0);\n\n    return dialogRef;\n  }\n\n  createInjector(ref: AsDialogRef, inj: Injector): Injector {\n    return Injector.create({\n      parent: inj,\n      providers: [\n        {\n          provide: AsDialogRef,\n          useValue: ref\n        }\n      ]\n    });\n  }\n}\n","import { isArray } from './isArray';\nexport function isNumeric(val) {\n    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function timer(dueTime = 0, periodOrScheduler, scheduler) {\n    let period = -1;\n    if (isNumeric(periodOrScheduler)) {\n        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n    }\n    else if (isScheduler(periodOrScheduler)) {\n        scheduler = periodOrScheduler;\n    }\n    if (!isScheduler(scheduler)) {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        const due = isNumeric(dueTime)\n            ? dueTime\n            : (+dueTime - scheduler.now());\n        return scheduler.schedule(dispatch, due, {\n            index: 0, period, subscriber\n        });\n    });\n}\nfunction dispatch(state) {\n    const { index, period, subscriber } = state;\n    subscriber.next(index);\n    if (subscriber.closed) {\n        return;\n    }\n    else if (period === -1) {\n        return subscriber.complete();\n    }\n    state.index = index + 1;\n    this.schedule(state, period);\n}\n","import { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function observeOn(scheduler, delay = 0) {\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexport class ObserveOnOperator {\n    constructor(scheduler, delay = 0) {\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    }\n}\nexport class ObserveOnSubscriber extends Subscriber {\n    constructor(destination, scheduler, delay = 0) {\n        super(destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    static dispatch(arg) {\n        const { notification, destination } = arg;\n        notification.observe(destination);\n        this.unsubscribe();\n    }\n    scheduleMessage(notification) {\n        const destination = this.destination;\n        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    }\n    _next(value) {\n        this.scheduleMessage(Notification.createNext(value));\n    }\n    _error(err) {\n        this.scheduleMessage(Notification.createError(err));\n        this.unsubscribe();\n    }\n    _complete() {\n        this.scheduleMessage(Notification.createComplete());\n        this.unsubscribe();\n    }\n}\nexport class ObserveOnMessage {\n    constructor(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\nexport const animationFrame = animationFrameScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AnimationFrameScheduler extends AsyncScheduler {\n    flush(action) {\n        this.active = true;\n        this.scheduled = undefined;\n        const { actions } = this;\n        let error;\n        let index = -1;\n        let count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nexport class AnimationFrameAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(() => scheduler.flush(null)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        if (scheduler.actions.length === 0) {\n            cancelAnimationFrame(id);\n            scheduler.scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ElementRef, Optional, ApplicationRef, InjectionToken, Directive, EventEmitter, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _isTestEnvironment, _getEventTarget } from '@angular/cdk/platform';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollStrategyOptions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        var _a;\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        (_a = this._host) === null || _a === void 0 ? void 0 : _a.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        var _a;\n        (_a = this._containerElement) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayPositionBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: OverlayContainer }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseOverlayDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }];\n    } });\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkOverlayOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() {\n        return this._lockPosition;\n    }\n    set lockPosition(value) {\n        this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() {\n        return this._flexibleDimensions;\n    }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() {\n        return this._growAfterOpen;\n    }\n    set growAfterOpen(value) {\n        this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() {\n        return this._push;\n    }\n    set push(value) {\n        this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getFlexibleConnectedPositionStrategyOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getFlexibleConnectedPositionStrategyOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkConnectedOverlay.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                    }] }, { type: i5.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHasBackdrop']\n            }], lockPosition: [{\n                type: Input,\n                args: ['cdkConnectedOverlayLockPosition']\n            }], flexibleDimensions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayFlexibleDimensions']\n            }], growAfterOpen: [{\n                type: Input,\n                args: ['cdkConnectedOverlayGrowAfterOpen']\n            }], push: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPush']\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, declarations: [CdkConnectedOverlay, CdkOverlayOrigin], imports: [BidiModule, PortalModule, ScrollingModule], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] });\nOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n}\nFullscreenOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nFullscreenOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1$1.Platform }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import * as i0 from '@angular/core';\nimport { ElementRef, Injector, Directive, EventEmitter, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host != null) {\n            this._attachedHost = null;\n            host.detach();\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwNoPortalAttachedError();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwUnknownPortalTypeError();\n        }\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param outletElement Element into which the content is projected.\n     * @param _componentFactoryResolver Used to resolve the component factory.\n     *   Only required when attaching component portals.\n     * @param _appRef Reference to the application. Only used in component portals when there\n     *   is no `ViewContainerRef` available.\n     * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n     *   have one. Only used for component portals.\n     * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n     *   become a required parameter.\n     */\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = (portal.componentFactoryResolver || this._componentFactoryResolver);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !resolver) {\n            throw Error('Cannot attach component portal to outlet without a ComponentFactoryResolver.');\n        }\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n                throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n            }\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector || Injector.NULL);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                // Verify that the ApplicationRef has registered views before trying to detach a host view.\n                // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n                if (this._appRef.viewCount > 0) {\n                    this._appRef.detachView(componentRef.hostView);\n                }\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        this._attachedPortal = portal;\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn(() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        });\n        this._attachedPortal = portal;\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        this.outletElement.remove();\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkPortal, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkPortal.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkPortal, selector: \"[cdkPortal]\", exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkPortal, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortal]',\n                    exportAs: 'cdkPortal',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; } });\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TemplatePortalDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nTemplatePortalDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: TemplatePortalDirective, selector: \"[cdk-portal], [portal]\", providers: [\n        {\n            provide: CdkPortal,\n            useExisting: TemplatePortalDirective,\n        },\n    ], exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TemplatePortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-portal], [portal]',\n                    exportAs: 'cdkPortal',\n                    providers: [\n                        {\n                            provide: CdkPortal,\n                            useExisting: TemplatePortalDirective,\n                        },\n                    ],\n                }]\n        }] });\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal || null;\n    }\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE\n            ? nativeElement\n            : nativeElement.parentNode);\n    }\n}\nCdkPortalOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkPortalOutlet, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nCdkPortalOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkPortalOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalOutlet]',\n                    exportAs: 'cdkPortalOutlet',\n                    inputs: ['portal: cdkPortalOutlet'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    }, propDecorators: { attached: [{\n                type: Output\n            }] } });\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalHostDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nPortalHostDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: PortalHostDirective, selector: \"[cdkPortalHost], [portalHost]\", inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, providers: [\n        {\n            provide: CdkPortalOutlet,\n            useExisting: PortalHostDirective,\n        },\n    ], exportAs: [\"cdkPortalHost\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalHostDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalHost',\n                    inputs: ['portal: cdkPortalHost'],\n                    providers: [\n                        {\n                            provide: CdkPortalOutlet,\n                            useExisting: PortalHostDirective,\n                        },\n                    ],\n                }]\n        }] });\nclass PortalModule {\n}\nPortalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPortalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalModule, declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] });\nPortalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: PortalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                    declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n","let nextHandle = 1;\nconst RESOLVED = (() => Promise.resolve())();\nconst activeHandles = {};\nfunction findAndClearHandle(handle) {\n    if (handle in activeHandles) {\n        delete activeHandles[handle];\n        return true;\n    }\n    return false;\n}\nexport const Immediate = {\n    setImmediate(cb) {\n        const handle = nextHandle++;\n        activeHandles[handle] = true;\n        RESOLVED.then(() => findAndClearHandle(handle) && cb());\n        return handle;\n    },\n    clearImmediate(handle) {\n        findAndClearHandle(handle);\n    },\n};\nexport const TestTools = {\n    pending() {\n        return Object.keys(activeHandles).length;\n    }\n};\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\nexport const asapScheduler = new AsapScheduler(AsapAction);\nexport const asap = asapScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AsapScheduler extends AsyncScheduler {\n    flush(action) {\n        this.active = true;\n        this.scheduled = undefined;\n        const { actions } = this;\n        let error;\n        let index = -1;\n        let count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nexport class AsapAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        if (scheduler.actions.length === 0) {\n            Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n","import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nclass AuditOperator {\n    constructor(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    }\n}\nclass AuditSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, durationSelector) {\n        super(destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            let duration;\n            try {\n                const { durationSelector } = this;\n                duration = durationSelector(value);\n            }\n            catch (err) {\n                return this.destination.error(err);\n            }\n            const innerSubscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n            if (!innerSubscription || innerSubscription.closed) {\n                this.clearThrottle();\n            }\n            else {\n                this.add(this.throttled = innerSubscription);\n            }\n        }\n    }\n    clearThrottle() {\n        const { value, hasValue, throttled } = this;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = undefined;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = undefined;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    }\n    notifyNext() {\n        this.clearThrottle();\n    }\n    notifyComplete() {\n        this.clearThrottle();\n    }\n}\n","import { async } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nexport function auditTime(duration, scheduler = async) {\n    return audit(() => timer(duration, scheduler));\n}\n","import { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, supportsScrollBehavior } from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the virtual scrolling strategy. */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() {\n        /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() {\n        /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n        return this._itemSize;\n    }\n    set itemSize(value) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n        return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n        return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nCdkFixedSizeVirtualScroll.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkFixedSizeVirtualScroll, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, providers: [\n        {\n            provide: VIRTUAL_SCROLL_STRATEGY,\n            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n        },\n    ], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    providers: [\n                        {\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                        },\n                    ],\n                }]\n        }], propDecorators: { itemSize: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0\n                ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n                : this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while ((element = element.parentElement));\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollDispatcher, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll')\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkScrollable.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollable, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => (this._viewportSize = null));\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top ||\n            document.body.scrollTop ||\n            window.scrollY ||\n            documentElement.scrollTop ||\n            0;\n        const left = -documentRect.left ||\n            document.body.scrollLeft ||\n            window.scrollX ||\n            documentElement.scrollLeft ||\n            0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser\n            ? { width: window.innerWidth, height: window.innerHeight }\n            : { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ViewportRuler, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nViewportRuler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ViewportRuler, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ViewportRuler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        this._appendOnly = false;\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n    }\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n    get appendOnly() {\n        return this._appendOnly;\n    }\n    set appendOnly(value) {\n        this._appendOnly = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next((this._renderedRange = range));\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        // in appendOnly, we always start from the top\n        offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        return from\n            ? super.measureScrollOffset(from)\n            : super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize =\n            this.orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkVirtualScrollViewport, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: VIRTUAL_SCROLL_STRATEGY, optional: true }, { token: i2.Directionality, optional: true }, { token: ScrollDispatcher }, { token: ViewportRuler }], target: i0.ɵɵFactoryTarget.Component });\nCdkVirtualScrollViewport.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkVirtualScrollViewport, selector: \"cdk-virtual-scroll-viewport\", inputs: { orientation: \"orientation\", appendOnly: \"appendOnly\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, host: { properties: { \"class.cdk-virtual-scroll-orientation-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.cdk-virtual-scroll-orientation-vertical\": \"orientation !== \\\"horizontal\\\"\" }, classAttribute: \"cdk-virtual-scroll-viewport\" }, providers: [\n        {\n            provide: CdkScrollable,\n            useExisting: CdkVirtualScrollViewport,\n        },\n    ], viewQueries: [{ propertyName: \"_contentWrapper\", first: true, predicate: [\"contentWrapper\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkVirtualScrollViewport, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-virtual-scroll-viewport', host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: CdkVirtualScrollViewport,\n                        },\n                    ], template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [VIRTUAL_SCROLL_STRATEGY]\n                    }] }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: ScrollDispatcher }, { type: ViewportRuler }];\n    }, propDecorators: { orientation: [{\n                type: Input\n            }], appendOnly: [{\n                type: Input\n            }], scrolledIndexChange: [{\n                type: Output\n            }], _contentWrapper: [{\n                type: ViewChild,\n                args: ['contentWrapper', { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges.pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            if (this.viewChange.observers.length) {\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n            }\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn\n            ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n            : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode\n            ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n            : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false,\n            },\n            index,\n        };\n    }\n}\nCdkVirtualForOf.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkVirtualForOf, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: _VIEW_REPEATER_STRATEGY }, { token: CdkVirtualScrollViewport, skipSelf: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nCdkVirtualForOf.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkVirtualForOf, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkVirtualForOf, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i2$1._RecycleViewRepeaterStrategy, decorators: [{\n                        type: Inject,\n                        args: [_VIEW_REPEATER_STRATEGY]\n                    }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                        type: SkipSelf\n                    }] }, { type: i0.NgZone }];\n    }, propDecorators: { cdkVirtualForOf: [{\n                type: Input\n            }], cdkVirtualForTrackBy: [{\n                type: Input\n            }], cdkVirtualForTemplate: [{\n                type: Input\n            }], cdkVirtualForTemplateCacheSize: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkScrollableModule {\n}\nCdkScrollableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdkScrollableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollableModule, declarations: [CdkScrollable], exports: [CdkScrollable] });\nCdkScrollableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollableModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkScrollableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkScrollable],\n                    declarations: [CdkScrollable],\n                }]\n        }] });\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n}\nScrollingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nScrollingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollingModule, declarations: [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport], imports: [BidiModule, CdkScrollableModule], exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport] });\nScrollingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollingModule, imports: [[BidiModule, CdkScrollableModule], BidiModule, CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: ScrollingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, CdkScrollableModule],\n                    exports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                    ],\n                    declarations: [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n"],"sourceRoot":"webpack:///","file":"663.89214d8df0a98029.js"}