{"version":3,"mappings":"kOA0Be,WAAmBA,EAAWC,IAC3CC,OAAa,EAAGC,WAChB,IAAIC,KAAOC,KAAOL,GACdM,KAASC,KAAUN,GAEvB,GAAIO,MAAMF,GACR,OAAO,IAAIG,KAAKC,KAGlB,IAAKJ,EAEH,OAAOF,EAGT,IAAIO,EAAaP,EAAKQ,UASlBC,EAAoB,IAAIJ,KAAKL,EAAKU,WACtCD,EAAkBE,SAASX,EAAKY,WAAaV,EAAS,EAAG,GACzD,IAAIW,EAAcJ,EAAkBD,UAEpC,OAAID,GAAcM,EAGTJ,GASPT,EAAKc,YAAYL,EAAkBM,cAAeN,EAAkBG,WAAYL,GACzEP,oDCxDTgB,eAIC,UAJDA,CAIC,UAEoBA,SAAeA,QAChCA,kBAAqE,QAArEA,CAAqE,SAEjDA,SAAiBA,QACjCA,iBAAOA,SAAkBA,UAE3BA,mBAMFA,sCAZiBA,wBAGGA,0BACTA,4BCLV,IAAMC,EAAb,MAAM,QAOJC,YAAoBC,EAAyBC,GAAzBC,UAAyBA,kBAN7CA,UAAOA,KAAKF,GAAGG,MAAM,CACnBC,QAAS,CAAC,MAGZF,UAAc,GAIdG,YAEAC,WACE,MAAMF,EAAUF,KAAKK,KAAKC,IAAI,WAAWC,MAEzC,IAAKL,EAEH,YADAM,MAAM,oDAIR,MAAMC,EAAM,IAAIzB,KAChBgB,KAAKD,WAAWW,QCTL,WAAkBnC,EAAWC,IAC1CC,OAAa,EAAGC,WAChB,IAAIG,KAASC,KAAUN,GACvB,OAAOmC,EAAUpC,EAAoB,GAATM,GDMF+B,CAASH,GAAK,GAAKA,EAAKP,GAASW,UAAWC,IAChC,KAA7Bd,KAAKc,KAAOA,GAAMC,QACrBP,MAAM,kFAtBDZ,GAAeD,iDAAfC,EAAeoB,i7BDf5BrB,kBACEA,mBACAA,iBAAgC,cACkBA,gCAASsB,eACvDtB,eACFA,YAIJA,iBACEA,sBAqBFA,eA/BMA,0BAWcA,oGCIPC,GAAb,iBEMO,IAAMsB,EAAb,MAAM,sDAAOA,6DAFA,GAAEC,SATJ,CACPC,KACAC,KACAC,IACAC,KACAC,cAAsB,CAAC,CAAEC,KAAM,GAAIC,UAAW9B,SAMrCsB,GAAb","names":["dirtyDate","dirtyAmount","requiredArgs","arguments","date","toDate","amount","toInteger","isNaN","Date","NaN","dayOfMonth","getDate","endOfDesiredMonth","getTime","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","i0","SearchComponent","constructor","fb","jobService","this","group","keyword","ngOnInit","onSearch","form","get","value","alert","now","getList","addMonths","addYears","subscribe","jobs","length","selectors","ctx","SearchModule","imports","CommonModule","ReactiveFormsModule","MatInputModule","MatFormFieldModule","RouterModule","path","component"],"sources":["./node_modules/date-fns/esm/addMonths/index.js","./src/app/pages/search/search.component.html","./src/app/pages/search/search.component.ts","./node_modules/date-fns/esm/addYears/index.js","./src/app/pages/search/search.module.ts"],"sourcesContent":["import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","<form [formGroup]=\"form\" class=\"input-group d-flex p-3\">\n  <input type=\"text\" class=\"form-control\" placeholder=\"請輸入關鍵字\" formControlName=\"keyword\" />\n  <div class=\"input-group-append\">\n    <button class=\"btn btn-secondary\" type=\"button\" (click)=\"onSearch()\">\n      <i class=\"fa fa-search\"></i>\n    </button>\n  </div>\n</form>\n\n<div class=\"border-top border-white list-group flex-fill overflow-auto\">\n  <a\n    *ngFor=\"let job of jobs\"\n    href=\"javascript:void(0)\"\n    class=\"list-group-item list-group-item-action px-0 py-1 mb-1\"\n  >\n    <div class=\"px-3\" style=\"border-left: 4px solid; border-left-color: var(--secondary)\">\n      <h5 class=\"mb-1\">{{ job.Title }}</h5>\n      <div class=\"d-flex w-100 justify-content-between align-items-center\">\n        <div>\n          <p class=\"mb-1\">{{ job.Address }}</p>\n          <small>{{ job.PlanDate }}</small>\n        </div>\n        <img\n          src=\"https://www.svgrepo.com/show/152281/rocket-ship.svg\"\n          alt=\"大頭照\"\n          width=\"32\"\n          class=\"rounded-circle\"\n        />\n      </div>\n    </div>\n  </a>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\n\nimport { addYears } from 'date-fns';\n\nimport { JobService } from '@attendance-system/data/services';\nimport { Job } from '@attendance-system/data/models';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: 'search.component.html',\n  host: {\n    class: 'd-flex flex-column h-100'\n  }\n})\nexport class SearchComponent implements OnInit {\n  form = this.fb.group({\n    keyword: ['']\n  });\n\n  jobs: Job[] = [];\n\n  constructor(private fb: FormBuilder, private jobService: JobService) {}\n\n  ngOnInit() {}\n\n  onSearch(): void {\n    const keyword = this.form.get('keyword').value;\n\n    if (!keyword) {\n      alert('關鍵字不能為空！');\n      return;\n    }\n\n    const now = new Date();\n    this.jobService.getList(addYears(now, -3), now, keyword).subscribe((jobs) => {\n      if ((this.jobs = jobs).length === 0) {\n        alert('查無資料！');\n      }\n    });\n  }\n}\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nexport default function addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}","import { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { SearchComponent } from './search.component';\nimport { MatInputModule } from '@angular/material/input';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatInputModule,\n    MatFormFieldModule,\n    RouterModule.forChild([{ path: '', component: SearchComponent }])\n  ],\n  exports: [],\n  declarations: [SearchComponent],\n  providers: []\n})\nexport class SearchModule {}\n"],"sourceRoot":"webpack:///","file":"237.44127dfde52d413e.js"}